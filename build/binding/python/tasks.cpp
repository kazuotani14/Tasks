/* This file was generated by PyBindGen 0.16.0 */
#define PY_SSIZE_T_CLEAN
#include <Python.h>
#include <stddef.h>


#if PY_VERSION_HEX < 0x020400F0

#define PyEval_ThreadsInitialized() 1

#define Py_CLEAR(op)				\
        do {                            	\
                if (op) {			\
                        PyObject *tmp = (PyObject *)(op);	\
                        (op) = NULL;		\
                        Py_DECREF(tmp);		\
                }				\
        } while (0)


#define Py_VISIT(op)							\
        do { 								\
                if (op) {						\
                        int vret = visit((PyObject *)(op), arg);	\
                        if (vret)					\
                                return vret;				\
                }							\
        } while (0)

#endif



#if PY_VERSION_HEX < 0x020500F0

typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intobjargproc ssizeobjargproc;

#endif


#if     __GNUC__ > 2
# define PYBINDGEN_UNUSED(param) param __attribute__((__unused__))
#elif     __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ > 4)
# define PYBINDGEN_UNUSED(param) __attribute__((__unused__)) param
#else
# define PYBINDGEN_UNUSED(param) param
#endif  /* !__GNUC__ */

typedef enum _PyBindGenWrapperFlags {
   PYBINDGEN_WRAPPER_FLAG_NONE = 0,
   PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED = (1<<0),
} PyBindGenWrapperFlags;


#include <Tasks.h>
#include <QPSolver.h>
#include <QPTasks.h>
#include <QPConstr.h>
#include <QPContactConstr.h>
#include <QPMotionConstr.h>
#include <Bounds.h>
#include <RBDyn/MultiBodyConfig.h>
#include <sch/S_Object/S_Object.h>
#include <sch/S_Object/S_Sphere.h>
#include <sch/CD/CD_Pair.h>
/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    Eigen::Vector2d *obj;
    PyBindGenWrapperFlags flags:8;
} PyEigenVector2d;


extern PyTypeObject *_PyEigenVector2d_Type;
#define PyEigenVector2d_Type (*_PyEigenVector2d_Type)


typedef struct {
    PyObject_HEAD
    Eigen::Vector3d *obj;
    PyBindGenWrapperFlags flags:8;
} PyEigenVector3d;


extern PyTypeObject *_PyEigenVector3d_Type;
#define PyEigenVector3d_Type (*_PyEigenVector3d_Type)


typedef struct {
    PyObject_HEAD
    Eigen::Vector6d *obj;
    PyBindGenWrapperFlags flags:8;
} PyEigenVector6d;


extern PyTypeObject *_PyEigenVector6d_Type;
#define PyEigenVector6d_Type (*_PyEigenVector6d_Type)


typedef struct {
    PyObject_HEAD
    Eigen::Matrix3d *obj;
    PyBindGenWrapperFlags flags:8;
} PyEigenMatrix3d;


extern PyTypeObject *_PyEigenMatrix3d_Type;
#define PyEigenMatrix3d_Type (*_PyEigenMatrix3d_Type)


typedef struct {
    PyObject_HEAD
    Eigen::Matrix6d *obj;
    PyBindGenWrapperFlags flags:8;
} PyEigenMatrix6d;


extern PyTypeObject *_PyEigenMatrix6d_Type;
#define PyEigenMatrix6d_Type (*_PyEigenMatrix6d_Type)


typedef struct {
    PyObject_HEAD
    Eigen::MatrixXd *obj;
    PyBindGenWrapperFlags flags:8;
} PyEigenMatrixXd;


extern PyTypeObject *_PyEigenMatrixXd_Type;
#define PyEigenMatrixXd_Type (*_PyEigenMatrixXd_Type)


typedef struct {
    PyObject_HEAD
    Eigen::VectorXd *obj;
    PyBindGenWrapperFlags flags:8;
} PyEigenVectorXd;


extern PyTypeObject *_PyEigenVectorXd_Type;
#define PyEigenVectorXd_Type (*_PyEigenVectorXd_Type)


typedef struct {
    PyObject_HEAD
    Eigen::Quaterniond *obj;
    PyBindGenWrapperFlags flags:8;
} PyEigenQuaterniond;


extern PyTypeObject *_PyEigenQuaterniond_Type;
#define PyEigenQuaterniond_Type (*_PyEigenQuaterniond_Type)


typedef struct {
    PyObject_HEAD
    sva::MotionVecd *obj;
    PyBindGenWrapperFlags flags:8;
} PySvaMotionVecd;


extern PyTypeObject *_PySvaMotionVecd_Type;
#define PySvaMotionVecd_Type (*_PySvaMotionVecd_Type)


typedef struct {
    PyObject_HEAD
    sva::ForceVecd *obj;
    PyBindGenWrapperFlags flags:8;
} PySvaForceVecd;


extern PyTypeObject *_PySvaForceVecd_Type;
#define PySvaForceVecd_Type (*_PySvaForceVecd_Type)


typedef struct {
    PyObject_HEAD
    sva::RBInertiad *obj;
    PyBindGenWrapperFlags flags:8;
} PySvaRBInertiad;


extern PyTypeObject *_PySvaRBInertiad_Type;
#define PySvaRBInertiad_Type (*_PySvaRBInertiad_Type)


typedef struct {
    PyObject_HEAD
    sva::ABInertiad *obj;
    PyBindGenWrapperFlags flags:8;
} PySvaABInertiad;


extern PyTypeObject *_PySvaABInertiad_Type;
#define PySvaABInertiad_Type (*_PySvaABInertiad_Type)


typedef struct {
    PyObject_HEAD
    sva::PTransformd *obj;
    PyBindGenWrapperFlags flags:8;
} PySvaPTransformd;


extern PyTypeObject *_PySvaPTransformd_Type;
#define PySvaPTransformd_Type (*_PySvaPTransformd_Type)


typedef struct {
    PyObject_HEAD
    rbd::Body *obj;
    PyBindGenWrapperFlags flags:8;
} PyRbdBody;


extern PyTypeObject *_PyRbdBody_Type;
#define PyRbdBody_Type (*_PyRbdBody_Type)


typedef struct {
    PyObject_HEAD
    rbd::Joint *obj;
    PyBindGenWrapperFlags flags:8;
} PyRbdJoint;


extern PyTypeObject *_PyRbdJoint_Type;
#define PyRbdJoint_Type (*_PyRbdJoint_Type)


typedef struct {
    PyObject_HEAD
    rbd::MultiBody *obj;
    PyBindGenWrapperFlags flags:8;
} PyRbdMultiBody;


extern PyTypeObject *_PyRbdMultiBody_Type;
#define PyRbdMultiBody_Type (*_PyRbdMultiBody_Type)


typedef struct {
    PyObject_HEAD
    rbd::MultiBodyConfig *obj;
    PyBindGenWrapperFlags flags:8;
} PyRbdMultiBodyConfig;


extern PyTypeObject *_PyRbdMultiBodyConfig_Type;
#define PyRbdMultiBodyConfig_Type (*_PyRbdMultiBodyConfig_Type)


typedef struct {
    PyObject_HEAD
    rbd::Jacobian *obj;
    PyBindGenWrapperFlags flags:8;
} PyRbdJacobian;


extern PyTypeObject *_PyRbdJacobian_Type;
#define PyRbdJacobian_Type (*_PyRbdJacobian_Type)


typedef struct {
    PyObject_HEAD
    rbd::CoMJacobianDummy *obj;
    PyBindGenWrapperFlags flags:8;
} PyRbdCoMJacobianDummy;


extern PyTypeObject *_PyRbdCoMJacobianDummy_Type;
#define PyRbdCoMJacobianDummy_Type (*_PyRbdCoMJacobianDummy_Type)


typedef struct {
    PyObject_HEAD
    rbd::ForwardDynamics *obj;
    PyBindGenWrapperFlags flags:8;
} PyRbdForwardDynamics;


extern PyTypeObject *_PyRbdForwardDynamics_Type;
#define PyRbdForwardDynamics_Type (*_PyRbdForwardDynamics_Type)


typedef struct {
    PyObject_HEAD
    sch::S_Object *obj;
    PyBindGenWrapperFlags flags:8;
} PySchS_Object;


extern PyTypeObject *_PySchS_Object_Type;
#define PySchS_Object_Type (*_PySchS_Object_Type)


typedef struct {
    PyObject_HEAD
    sch::CD_Pair *obj;
    PyBindGenWrapperFlags flags:8;
} PySchCD_Pair;


extern PyTypeObject *_PySchCD_Pair_Type;
#define PySchCD_Pair_Type (*_PySchCD_Pair_Type)


typedef struct {
    PyObject_HEAD
    boost::timer::cpu_times *obj;
    PyBindGenWrapperFlags flags:8;
} PyBoostTimerCpu_times;


extern PyTypeObject PyBoostTimerCpu_times_Type;


typedef struct {
    PyObject_HEAD
    tasks::PositionTask *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksPositionTask;


extern PyTypeObject PyTasksPositionTask_Type;


typedef struct {
    PyObject_HEAD
    tasks::OrientationTask *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksOrientationTask;


extern PyTypeObject PyTasksOrientationTask_Type;


typedef struct {
    PyObject_HEAD
    tasks::SurfaceOrientationTask *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksSurfaceOrientationTask;


extern PyTypeObject PyTasksSurfaceOrientationTask_Type;


typedef struct {
    PyObject_HEAD
    tasks::GazeTask *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksGazeTask;


extern PyTypeObject PyTasksGazeTask_Type;


typedef struct {
    PyObject_HEAD
    tasks::PositionBasedVisServoTask *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksPositionBasedVisServoTask;


extern PyTypeObject PyTasksPositionBasedVisServoTask_Type;


typedef struct {
    PyObject_HEAD
    tasks::PostureTask *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksPostureTask;


extern PyTypeObject PyTasksPostureTask_Type;


typedef struct {
    PyObject_HEAD
    tasks::CoMTask *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksCoMTask;


extern PyTypeObject PyTasksCoMTask_Type;


typedef struct {
    PyObject_HEAD
    tasks::MultiCoMTask *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksMultiCoMTask;


extern PyTypeObject PyTasksMultiCoMTask_Type;


typedef struct {
    PyObject_HEAD
    tasks::MomentumTask *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksMomentumTask;


extern PyTypeObject PyTasksMomentumTask_Type;


typedef struct {
    PyObject_HEAD
    tasks::LinVelocityTask *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksLinVelocityTask;


extern PyTypeObject PyTasksLinVelocityTask_Type;


typedef struct {
    PyObject_HEAD
    tasks::OrientationTrackingTask *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksOrientationTrackingTask;


extern PyTypeObject PyTasksOrientationTrackingTask_Type;


typedef struct {
    PyObject_HEAD
    tasks::MultiRobotTransformTask *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksMultiRobotTransformTask;


extern PyTypeObject PyTasksMultiRobotTransformTask_Type;


typedef struct {
    PyObject_HEAD
    tasks::TransformTask *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksTransformTask;


extern PyTypeObject PyTasksTransformTask_Type;


typedef struct {
    PyObject_HEAD
    tasks::SurfaceTransformTask *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksSurfaceTransformTask;


extern PyTypeObject PyTasksSurfaceTransformTask_Type;


typedef struct {
    PyObject_HEAD
    tasks::RelativeDistTask *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksRelativeDistTask;


extern PyTypeObject PyTasksRelativeDistTask_Type;


typedef struct {
    PyObject_HEAD
    tasks::VectorOrientationTask *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksVectorOrientationTask;


extern PyTypeObject PyTasksVectorOrientationTask_Type;


typedef struct {
    PyObject_HEAD
    tasks::RelativeDistTask::rbInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksRelativeDistTaskRbInfo;


extern PyTypeObject PyTasksRelativeDistTaskRbInfo_Type;


typedef struct {
    PyObject_HEAD
    tasks::QBound *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQBound;


extern PyTypeObject PyTasksQBound_Type;


typedef struct {
    PyObject_HEAD
    tasks::AlphaBound *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksAlphaBound;


extern PyTypeObject PyTasksAlphaBound_Type;


typedef struct {
    PyObject_HEAD
    tasks::TorqueBound *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksTorqueBound;


extern PyTypeObject PyTasksTorqueBound_Type;


typedef struct {
    PyObject_HEAD
    tasks::PolyTorqueBound *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksPolyTorqueBound;


extern PyTypeObject PyTasksPolyTorqueBound_Type;


typedef struct {
    PyObject_HEAD
    std::vector<int> *obj;
} Pystd__vector__lt__int__gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt__int__gt__ *container;
    std::vector<int>::iterator *iterator;
} Pystd__vector__lt__int__gt__Iter;


extern PyTypeObject Pystd__vector__lt__int__gt___Type;
extern PyTypeObject Pystd__vector__lt__int__gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___int___gt__(PyObject *arg, std::vector<int> *container);

typedef struct {
    PyObject_HEAD
    std::vector<std::string> *obj;
} Pystd__vector__lt__std__string__gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt__std__string__gt__ *container;
    std::vector<std::string>::iterator *iterator;
} Pystd__vector__lt__std__string__gt__Iter;


extern PyTypeObject Pystd__vector__lt__std__string__gt___Type;
extern PyTypeObject Pystd__vector__lt__std__string__gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___std__string___gt__(PyObject *arg, std::vector<std::string> *container);

typedef struct {
    PyObject_HEAD
    std::vector<double> *obj;
} Pystd__vector__lt__double__gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt__double__gt__ *container;
    std::vector<double>::iterator *iterator;
} Pystd__vector__lt__double__gt__Iter;


extern PyTypeObject Pystd__vector__lt__double__gt___Type;
extern PyTypeObject Pystd__vector__lt__double__gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___double___gt__(PyObject *arg, std::vector<double> *container);

typedef struct {
    PyObject_HEAD
    std::vector<std::vector<double> > *obj;
} Pystd__vector__lt__std__vector__lt__double__gt_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt__std__vector__lt__double__gt_____gt__ *container;
    std::vector<std::vector<double> >::iterator *iterator;
} Pystd__vector__lt__std__vector__lt__double__gt_____gt__Iter;


extern PyTypeObject Pystd__vector__lt__std__vector__lt__double__gt_____gt___Type;
extern PyTypeObject Pystd__vector__lt__std__vector__lt__double__gt_____gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___std__vector__lt___double___gt_____gt__(PyObject *arg, std::vector<std::vector<double> > *container);

typedef struct {
    PyObject_HEAD
    std::vector<rbd::MultiBody> *obj;
} Pystd__vector__lt__rbd__MultiBody__gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt__rbd__MultiBody__gt__ *container;
    std::vector<rbd::MultiBody>::iterator *iterator;
} Pystd__vector__lt__rbd__MultiBody__gt__Iter;


extern PyTypeObject Pystd__vector__lt__rbd__MultiBody__gt___Type;
extern PyTypeObject Pystd__vector__lt__rbd__MultiBody__gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__(PyObject *arg, std::vector<rbd::MultiBody> *container);

typedef struct {
    PyObject_HEAD
    std::vector<rbd::MultiBodyConfig> *obj;
} Pystd__vector__lt__rbd__MultiBodyConfig__gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt__rbd__MultiBodyConfig__gt__ *container;
    std::vector<rbd::MultiBodyConfig>::iterator *iterator;
} Pystd__vector__lt__rbd__MultiBodyConfig__gt__Iter;


extern PyTypeObject Pystd__vector__lt__rbd__MultiBodyConfig__gt___Type;
extern PyTypeObject Pystd__vector__lt__rbd__MultiBodyConfig__gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___rbd__MultiBodyConfig___gt__(PyObject *arg, std::vector<rbd::MultiBodyConfig> *container);

typedef struct {
    PyObject_HEAD
    std::vector<sva::MotionVecd> *obj;
} Pystd__vector__lt__sva__MotionVecd__gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt__sva__MotionVecd__gt__ *container;
    std::vector<sva::MotionVecd>::iterator *iterator;
} Pystd__vector__lt__sva__MotionVecd__gt__Iter;


extern PyTypeObject Pystd__vector__lt__sva__MotionVecd__gt___Type;
extern PyTypeObject Pystd__vector__lt__sva__MotionVecd__gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___sva__MotionVecd___gt__(PyObject *arg, std::vector<sva::MotionVecd> *container);

typedef struct {
    PyObject_HEAD
    std::vector<std::vector<sva::MotionVecd> > *obj;
} Pystd__vector__lt__std__vector__lt__sva__MotionVecd__gt_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt__std__vector__lt__sva__MotionVecd__gt_____gt__ *container;
    std::vector<std::vector<sva::MotionVecd> >::iterator *iterator;
} Pystd__vector__lt__std__vector__lt__sva__MotionVecd__gt_____gt__Iter;


extern PyTypeObject Pystd__vector__lt__std__vector__lt__sva__MotionVecd__gt_____gt___Type;
extern PyTypeObject Pystd__vector__lt__std__vector__lt__sva__MotionVecd__gt_____gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___std__vector__lt___sva__MotionVecd___gt_____gt__(PyObject *arg, std::vector<std::vector<sva::MotionVecd> > *container);

typedef struct {
    PyObject_HEAD
    std::vector<tasks::qp::FrictionCone> *obj;
} Pystd__vector__lt__tasks__qp__FrictionCone__gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt__tasks__qp__FrictionCone__gt__ *container;
    std::vector<tasks::qp::FrictionCone>::iterator *iterator;
} Pystd__vector__lt__tasks__qp__FrictionCone__gt__Iter;


extern PyTypeObject Pystd__vector__lt__tasks__qp__FrictionCone__gt___Type;
extern PyTypeObject Pystd__vector__lt__tasks__qp__FrictionCone__gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___tasks__qp__FrictionCone___gt__(PyObject *arg, std::vector<tasks::qp::FrictionCone> *container);

typedef struct {
    PyObject_HEAD
    std::vector<tasks::qp::UnilateralContact> *obj;
} Pystd__vector__lt__tasks__qp__UnilateralContact__gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt__tasks__qp__UnilateralContact__gt__ *container;
    std::vector<tasks::qp::UnilateralContact>::iterator *iterator;
} Pystd__vector__lt__tasks__qp__UnilateralContact__gt__Iter;


extern PyTypeObject Pystd__vector__lt__tasks__qp__UnilateralContact__gt___Type;
extern PyTypeObject Pystd__vector__lt__tasks__qp__UnilateralContact__gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___tasks__qp__UnilateralContact___gt__(PyObject *arg, std::vector<tasks::qp::UnilateralContact> *container);

typedef struct {
    PyObject_HEAD
    std::vector<tasks::qp::BilateralContact> *obj;
} Pystd__vector__lt__tasks__qp__BilateralContact__gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt__tasks__qp__BilateralContact__gt__ *container;
    std::vector<tasks::qp::BilateralContact>::iterator *iterator;
} Pystd__vector__lt__tasks__qp__BilateralContact__gt__Iter;


extern PyTypeObject Pystd__vector__lt__tasks__qp__BilateralContact__gt___Type;
extern PyTypeObject Pystd__vector__lt__tasks__qp__BilateralContact__gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___tasks__qp__BilateralContact___gt__(PyObject *arg, std::vector<tasks::qp::BilateralContact> *container);

typedef struct {
    PyObject_HEAD
    std::vector<tasks::qp::JointStiffness> *obj;
} Pystd__vector__lt__tasks__qp__JointStiffness__gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt__tasks__qp__JointStiffness__gt__ *container;
    std::vector<tasks::qp::JointStiffness>::iterator *iterator;
} Pystd__vector__lt__tasks__qp__JointStiffness__gt__Iter;


extern PyTypeObject Pystd__vector__lt__tasks__qp__JointStiffness__gt___Type;
extern PyTypeObject Pystd__vector__lt__tasks__qp__JointStiffness__gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___tasks__qp__JointStiffness___gt__(PyObject *arg, std::vector<tasks::qp::JointStiffness> *container);

typedef struct {
    PyObject_HEAD
    std::vector<tasks::qp::JointGains> *obj;
} Pystd__vector__lt__tasks__qp__JointGains__gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt__tasks__qp__JointGains__gt__ *container;
    std::vector<tasks::qp::JointGains>::iterator *iterator;
} Pystd__vector__lt__tasks__qp__JointGains__gt__Iter;


extern PyTypeObject Pystd__vector__lt__tasks__qp__JointGains__gt___Type;
extern PyTypeObject Pystd__vector__lt__tasks__qp__JointGains__gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___tasks__qp__JointGains___gt__(PyObject *arg, std::vector<tasks::qp::JointGains> *container);

typedef struct {
    PyObject_HEAD
    std::vector<tasks::qp::SpringJoint> *obj;
} Pystd__vector__lt__tasks__qp__SpringJoint__gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt__tasks__qp__SpringJoint__gt__ *container;
    std::vector<tasks::qp::SpringJoint>::iterator *iterator;
} Pystd__vector__lt__tasks__qp__SpringJoint__gt__Iter;


extern PyTypeObject Pystd__vector__lt__tasks__qp__SpringJoint__gt___Type;
extern PyTypeObject Pystd__vector__lt__tasks__qp__SpringJoint__gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___tasks__qp__SpringJoint___gt__(PyObject *arg, std::vector<tasks::qp::SpringJoint> *container);

typedef struct {
    PyObject_HEAD
    std::vector<Eigen::Vector3d> *obj;
} Pystd__vector__lt__Eigen__Vector3d__gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt__Eigen__Vector3d__gt__ *container;
    std::vector<Eigen::Vector3d>::iterator *iterator;
} Pystd__vector__lt__Eigen__Vector3d__gt__Iter;


extern PyTypeObject Pystd__vector__lt__Eigen__Vector3d__gt___Type;
extern PyTypeObject Pystd__vector__lt__Eigen__Vector3d__gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___Eigen__Vector3d___gt__(PyObject *arg, std::vector<Eigen::Vector3d> *container);

typedef struct {
    PyObject_HEAD
    std::vector<Eigen::Matrix3d> *obj;
} Pystd__vector__lt__Eigen__Matrix3d__gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt__Eigen__Matrix3d__gt__ *container;
    std::vector<Eigen::Matrix3d>::iterator *iterator;
} Pystd__vector__lt__Eigen__Matrix3d__gt__Iter;


extern PyTypeObject Pystd__vector__lt__Eigen__Matrix3d__gt___Type;
extern PyTypeObject Pystd__vector__lt__Eigen__Matrix3d__gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___Eigen__Matrix3d___gt__(PyObject *arg, std::vector<Eigen::Matrix3d> *container);

typedef struct {
    PyObject_HEAD
    std::vector<Eigen::VectorXd> *obj;
} Pystd__vector__lt__Eigen__VectorXd__gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt__Eigen__VectorXd__gt__ *container;
    std::vector<Eigen::VectorXd>::iterator *iterator;
} Pystd__vector__lt__Eigen__VectorXd__gt__Iter;


extern PyTypeObject Pystd__vector__lt__Eigen__VectorXd__gt___Type;
extern PyTypeObject Pystd__vector__lt__Eigen__VectorXd__gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___Eigen__VectorXd___gt__(PyObject *arg, std::vector<Eigen::VectorXd> *container);

typedef struct {
    PyObject_HEAD
    std::vector<std::vector<Eigen::VectorXd> > *obj;
} Pystd__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt__ *container;
    std::vector<std::vector<Eigen::VectorXd> >::iterator *iterator;
} Pystd__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt__Iter;


extern PyTypeObject Pystd__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt___Type;
extern PyTypeObject Pystd__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___std__vector__lt___Eigen__VectorXd___gt_____gt__(PyObject *arg, std::vector<std::vector<Eigen::VectorXd> > *container);

extern PyTypeObject *Py___std__domain_error_Type;


extern PyTypeObject *Py___std__out_of_range_Type;

/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    tasks::qp::QPSolver *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpQPSolver;


extern PyTypeObject PyTasksQpQPSolver_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::SolverData *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpSolverData;


extern PyTypeObject PyTasksQpSolverData_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::FrictionCone *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpFrictionCone;


extern PyTypeObject PyTasksQpFrictionCone_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::ContactId *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpContactId;


extern PyTypeObject PyTasksQpContactId_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::UnilateralContact *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpUnilateralContact;


extern PyTypeObject PyTasksQpUnilateralContact_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::BilateralContact *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpBilateralContact;


extern PyTypeObject PyTasksQpBilateralContact_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::JointStiffness *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpJointStiffness;


extern PyTypeObject PyTasksQpJointStiffness_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::JointGains *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpJointGains;


extern PyTypeObject PyTasksQpJointGains_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::SpringJoint *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpSpringJoint;


extern PyTypeObject PyTasksQpSpringJoint_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::Constraint *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpConstraint;


extern PyTypeObject PyTasksQpConstraint_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::Equality *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpEquality;


extern PyTypeObject PyTasksQpEquality_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::Inequality *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpInequality;


extern PyTypeObject PyTasksQpInequality_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::GenInequality *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpGenInequality;


extern PyTypeObject PyTasksQpGenInequality_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::Bound *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpBound;


extern PyTypeObject PyTasksQpBound_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::Task *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpTask;


extern PyTypeObject PyTasksQpTask_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::HighLevelTask *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpHighLevelTask;


extern PyTypeObject PyTasksQpHighLevelTask_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::SetPointTask *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpSetPointTask;


extern PyTypeObject PyTasksQpSetPointTask_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::TrackingTask *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpTrackingTask;


extern PyTypeObject PyTasksQpTrackingTask_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::TrajectoryTask *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpTrajectoryTask;


extern PyTypeObject PyTasksQpTrajectoryTask_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::PIDTask *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpPIDTask;


extern PyTypeObject PyTasksQpPIDTask_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::TargetObjectiveTask *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpTargetObjectiveTask;


extern PyTypeObject PyTasksQpTargetObjectiveTask_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::PositionTask *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpPositionTask;


extern PyTypeObject PyTasksQpPositionTask_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::OrientationTask *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpOrientationTask;


extern PyTypeObject PyTasksQpOrientationTask_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::SurfaceOrientationTask *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpSurfaceOrientationTask;


extern PyTypeObject PyTasksQpSurfaceOrientationTask_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::GazeTask *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpGazeTask;


extern PyTypeObject PyTasksQpGazeTask_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::PositionBasedVisServoTask *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpPositionBasedVisServoTask;


extern PyTypeObject PyTasksQpPositionBasedVisServoTask_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::PostureTask *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpPostureTask;


extern PyTypeObject PyTasksQpPostureTask_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::TorqueTask *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpTorqueTask;


extern PyTypeObject PyTasksQpTorqueTask_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::CoMTask *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpCoMTask;


extern PyTypeObject PyTasksQpCoMTask_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::MultiCoMTask *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpMultiCoMTask;


extern PyTypeObject PyTasksQpMultiCoMTask_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::MultiRobotTransformTask *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpMultiRobotTransformTask;


extern PyTypeObject PyTasksQpMultiRobotTransformTask_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::MomentumTask *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpMomentumTask;


extern PyTypeObject PyTasksQpMomentumTask_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::ContactTask *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpContactTask;


extern PyTypeObject PyTasksQpContactTask_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::GripperTorqueTask *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpGripperTorqueTask;


extern PyTypeObject PyTasksQpGripperTorqueTask_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::LinVelocityTask *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpLinVelocityTask;


extern PyTypeObject PyTasksQpLinVelocityTask_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::OrientationTrackingTask *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpOrientationTrackingTask;


extern PyTypeObject PyTasksQpOrientationTrackingTask_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::TransformTask *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpTransformTask;


extern PyTypeObject PyTasksQpTransformTask_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::SurfaceTransformTask *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpSurfaceTransformTask;


extern PyTypeObject PyTasksQpSurfaceTransformTask_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::JointsSelector *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpJointsSelector;


extern PyTypeObject PyTasksQpJointsSelector_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::RelativeDistTask *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpRelativeDistTask;


extern PyTypeObject PyTasksQpRelativeDistTask_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::VectorOrientationTask *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpVectorOrientationTask;


extern PyTypeObject PyTasksQpVectorOrientationTask_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::MotionConstr *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpMotionConstr;


extern PyTypeObject PyTasksQpMotionConstr_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::MotionPolyConstr *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpMotionPolyConstr;


extern PyTypeObject PyTasksQpMotionPolyConstr_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::MotionSpringConstr *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpMotionSpringConstr;


extern PyTypeObject PyTasksQpMotionSpringConstr_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::PositiveLambda *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpPositiveLambda;


extern PyTypeObject PyTasksQpPositiveLambda_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::ContactConstrCommon *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpContactConstrCommon;


extern PyTypeObject PyTasksQpContactConstrCommon_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::ContactAccConstr *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpContactAccConstr;


extern PyTypeObject PyTasksQpContactAccConstr_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::ContactSpeedConstr *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpContactSpeedConstr;


extern PyTypeObject PyTasksQpContactSpeedConstr_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::ContactPosConstr *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpContactPosConstr;


extern PyTypeObject PyTasksQpContactPosConstr_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::CollisionConstr *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpCollisionConstr;


extern PyTypeObject PyTasksQpCollisionConstr_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::CoMIncPlaneConstr *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpCoMIncPlaneConstr;


extern PyTypeObject PyTasksQpCoMIncPlaneConstr_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::JointLimitsConstr *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpJointLimitsConstr;


extern PyTypeObject PyTasksQpJointLimitsConstr_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::DamperJointLimitsConstr *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpDamperJointLimitsConstr;


extern PyTypeObject PyTasksQpDamperJointLimitsConstr_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::GripperTorqueConstr *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpGripperTorqueConstr;


extern PyTypeObject PyTasksQpGripperTorqueConstr_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::BoundedSpeedConstr *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpBoundedSpeedConstr;


extern PyTypeObject PyTasksQpBoundedSpeedConstr_Type;


typedef struct {
    PyObject_HEAD
    tasks::qp::ImageConstr *obj;
    PyBindGenWrapperFlags flags:8;
} PyTasksQpImageConstr;


extern PyTypeObject PyTasksQpImageConstr_Type;


int _wrap_convert_py2c__int(PyObject *value, int *address);


int _wrap_convert_py2c__std__string(PyObject *value, std::string *address);


int _wrap_convert_py2c__double(PyObject *value, double *address);


int _wrap_convert_py2c__rbd__MultiBody(PyObject *value, rbd::MultiBody *address);


int _wrap_convert_py2c__rbd__MultiBodyConfig(PyObject *value, rbd::MultiBodyConfig *address);


int _wrap_convert_py2c__sva__MotionVecd(PyObject *value, sva::MotionVecd *address);


int _wrap_convert_py2c__tasks__qp__FrictionCone(PyObject *value, tasks::qp::FrictionCone *address);


int _wrap_convert_py2c__tasks__qp__UnilateralContact(PyObject *value, tasks::qp::UnilateralContact *address);


int _wrap_convert_py2c__tasks__qp__BilateralContact(PyObject *value, tasks::qp::BilateralContact *address);


int _wrap_convert_py2c__tasks__qp__JointStiffness(PyObject *value, tasks::qp::JointStiffness *address);


int _wrap_convert_py2c__tasks__qp__JointGains(PyObject *value, tasks::qp::JointGains *address);


int _wrap_convert_py2c__tasks__qp__SpringJoint(PyObject *value, tasks::qp::SpringJoint *address);


int _wrap_convert_py2c__Eigen__Vector3d(PyObject *value, Eigen::Vector3d *address);


int _wrap_convert_py2c__Eigen__Matrix3d(PyObject *value, Eigen::Matrix3d *address);


int _wrap_convert_py2c__Eigen__VectorXd(PyObject *value, Eigen::VectorXd *address);

static PyMethodDef _tasks_qp_functions[] = {
    {NULL, NULL, 0, NULL}
};
/* --- classes --- */



static int
_wrap_PyTasksQpQPSolver__tp_init(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        return -1;
    }
    self->obj = new tasks::qp::QPSolver();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}



PyObject *
_wrap_PyTasksQpQPSolver_addInequalityConstraint__0(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpCollisionConstr *ptr;
    tasks::qp::CollisionConstr *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpCollisionConstr_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->addInequalityConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_addInequalityConstraint__1(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpGripperTorqueConstr *ptr;
    tasks::qp::GripperTorqueConstr *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpGripperTorqueConstr_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->addInequalityConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_addInequalityConstraint__2(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpCoMIncPlaneConstr *ptr;
    tasks::qp::CoMIncPlaneConstr *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpCoMIncPlaneConstr_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->addInequalityConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_addInequalityConstraint__3(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpImageConstr *ptr;
    tasks::qp::ImageConstr *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpImageConstr_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->addInequalityConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyTasksQpQPSolver_addInequalityConstraint(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[4] = {0,};
    retval = _wrap_PyTasksQpQPSolver_addInequalityConstraint__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_addInequalityConstraint__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_addInequalityConstraint__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_addInequalityConstraint__3(self, args, kwargs, &exceptions[3]);
    if (!exceptions[3]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        return retval;
    }
    error_list = PyList_New(4);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyList_SET_ITEM(error_list, 3, PyObject_Str(exceptions[3]));
    Py_DECREF(exceptions[3]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}



PyObject *
_wrap_PyTasksQpQPSolver_addEqualityConstraint__0(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpContactAccConstr *ptr;
    tasks::qp::ContactAccConstr *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpContactAccConstr_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->addEqualityConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_addEqualityConstraint__1(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpContactSpeedConstr *ptr;
    tasks::qp::ContactSpeedConstr *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpContactSpeedConstr_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->addEqualityConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_addEqualityConstraint__2(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpContactPosConstr *ptr;
    tasks::qp::ContactPosConstr *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpContactPosConstr_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->addEqualityConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyTasksQpQPSolver_addEqualityConstraint(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyTasksQpQPSolver_addEqualityConstraint__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_addEqualityConstraint__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_addEqualityConstraint__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksQpQPSolver_nrInequalityConstraints(PyTasksQpQPSolver *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->nrInequalityConstraints();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyTasksQpQPSolver_result(PyTasksQpQPSolver *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd const & retval = self->obj->result();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}


PyObject *
_wrap_PyTasksQpQPSolver_updateMbc(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyRbdMultiBodyConfig *mbc;
    int robotIndex;
    const char *keywords[] = {"mbc", "robotIndex", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyRbdMultiBodyConfig_Type, &mbc, &robotIndex)) {
        return NULL;
    }
    self->obj->updateMbc(*((PyRbdMultiBodyConfig *) mbc)->obj, robotIndex);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyTasksQpQPSolver_nrVars__0(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mbs_value;
    std::vector<tasks::qp::UnilateralContact> uni_value;
    std::vector<tasks::qp::BilateralContact> bi_value;
    const char *keywords[] = {"mbs", "uni", "bi", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O&O&", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, _wrap_convert_py2c__std__vector__lt___tasks__qp__UnilateralContact___gt__, &uni_value, _wrap_convert_py2c__std__vector__lt___tasks__qp__BilateralContact___gt__, &bi_value)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->nrVars(mbs_value, uni_value, bi_value);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_nrVars__1(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    int retval;
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->nrVars();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}

PyObject * _wrap_PyTasksQpQPSolver_nrVars(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpQPSolver_nrVars__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_nrVars__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksQpQPSolver_nrGenInequalityConstraints(PyTasksQpQPSolver *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->nrGenInequalityConstraints();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}



PyObject *
_wrap_PyTasksQpQPSolver_removeConstraint__0(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpMotionConstr *ptr;
    tasks::qp::MotionConstr *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpMotionConstr_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->removeConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_removeConstraint__1(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpMotionPolyConstr *ptr;
    tasks::qp::MotionPolyConstr *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpMotionPolyConstr_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->removeConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_removeConstraint__2(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpContactAccConstr *ptr;
    tasks::qp::ContactAccConstr *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpContactAccConstr_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->removeConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_removeConstraint__3(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpContactSpeedConstr *ptr;
    tasks::qp::ContactSpeedConstr *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpContactSpeedConstr_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->removeConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_removeConstraint__4(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpCollisionConstr *ptr;
    tasks::qp::CollisionConstr *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpCollisionConstr_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->removeConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_removeConstraint__5(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpJointLimitsConstr *ptr;
    tasks::qp::JointLimitsConstr *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpJointLimitsConstr_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->removeConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_removeConstraint__6(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpDamperJointLimitsConstr *ptr;
    tasks::qp::DamperJointLimitsConstr *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpDamperJointLimitsConstr_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->removeConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_removeConstraint__7(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpMotionSpringConstr *ptr;
    tasks::qp::MotionSpringConstr *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpMotionSpringConstr_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->removeConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_removeConstraint__8(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpGripperTorqueConstr *ptr;
    tasks::qp::GripperTorqueConstr *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpGripperTorqueConstr_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->removeConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_removeConstraint__9(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpBoundedSpeedConstr *ptr;
    tasks::qp::BoundedSpeedConstr *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpBoundedSpeedConstr_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->removeConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_removeConstraint__10(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpCoMIncPlaneConstr *ptr;
    tasks::qp::CoMIncPlaneConstr *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpCoMIncPlaneConstr_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->removeConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_removeConstraint__11(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpPositiveLambda *ptr;
    tasks::qp::PositiveLambda *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpPositiveLambda_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->removeConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_removeConstraint__12(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpContactPosConstr *ptr;
    tasks::qp::ContactPosConstr *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpContactPosConstr_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->removeConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_removeConstraint__13(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpImageConstr *ptr;
    tasks::qp::ImageConstr *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpImageConstr_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->removeConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyTasksQpQPSolver_removeConstraint(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[14] = {0,};
    retval = _wrap_PyTasksQpQPSolver_removeConstraint__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_removeConstraint__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_removeConstraint__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_removeConstraint__3(self, args, kwargs, &exceptions[3]);
    if (!exceptions[3]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_removeConstraint__4(self, args, kwargs, &exceptions[4]);
    if (!exceptions[4]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_removeConstraint__5(self, args, kwargs, &exceptions[5]);
    if (!exceptions[5]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_removeConstraint__6(self, args, kwargs, &exceptions[6]);
    if (!exceptions[6]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_removeConstraint__7(self, args, kwargs, &exceptions[7]);
    if (!exceptions[7]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_removeConstraint__8(self, args, kwargs, &exceptions[8]);
    if (!exceptions[8]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_removeConstraint__9(self, args, kwargs, &exceptions[9]);
    if (!exceptions[9]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_removeConstraint__10(self, args, kwargs, &exceptions[10]);
    if (!exceptions[10]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_removeConstraint__11(self, args, kwargs, &exceptions[11]);
    if (!exceptions[11]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_removeConstraint__12(self, args, kwargs, &exceptions[12]);
    if (!exceptions[12]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_removeConstraint__13(self, args, kwargs, &exceptions[13]);
    if (!exceptions[13]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        return retval;
    }
    error_list = PyList_New(14);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyList_SET_ITEM(error_list, 3, PyObject_Str(exceptions[3]));
    Py_DECREF(exceptions[3]);
    PyList_SET_ITEM(error_list, 4, PyObject_Str(exceptions[4]));
    Py_DECREF(exceptions[4]);
    PyList_SET_ITEM(error_list, 5, PyObject_Str(exceptions[5]));
    Py_DECREF(exceptions[5]);
    PyList_SET_ITEM(error_list, 6, PyObject_Str(exceptions[6]));
    Py_DECREF(exceptions[6]);
    PyList_SET_ITEM(error_list, 7, PyObject_Str(exceptions[7]));
    Py_DECREF(exceptions[7]);
    PyList_SET_ITEM(error_list, 8, PyObject_Str(exceptions[8]));
    Py_DECREF(exceptions[8]);
    PyList_SET_ITEM(error_list, 9, PyObject_Str(exceptions[9]));
    Py_DECREF(exceptions[9]);
    PyList_SET_ITEM(error_list, 10, PyObject_Str(exceptions[10]));
    Py_DECREF(exceptions[10]);
    PyList_SET_ITEM(error_list, 11, PyObject_Str(exceptions[11]));
    Py_DECREF(exceptions[11]);
    PyList_SET_ITEM(error_list, 12, PyObject_Str(exceptions[12]));
    Py_DECREF(exceptions[12]);
    PyList_SET_ITEM(error_list, 13, PyObject_Str(exceptions[13]));
    Py_DECREF(exceptions[13]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}



PyObject *
_wrap_PyTasksQpQPSolver_lambdaVec__0(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PyEigenVectorXd *py_VectorXd;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    Eigen::VectorXd retval = self->obj->lambdaVec();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_lambdaVec__1(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    int contactIndex;
    const char *keywords[] = {"contactIndex", NULL};
    PyEigenVectorXd *py_VectorXd;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &contactIndex)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    Eigen::VectorXd retval = self->obj->lambdaVec(contactIndex);
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_lambdaVec__2(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PyEigenVectorXd *py_VectorXd;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    Eigen::VectorXd retval = self->obj->lambdaVec();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}

PyObject * _wrap_PyTasksQpQPSolver_lambdaVec(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyTasksQpQPSolver_lambdaVec__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_lambdaVec__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_lambdaVec__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}



PyObject *
_wrap_PyTasksQpQPSolver_removeEqualityConstraint__0(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpContactAccConstr *ptr;
    tasks::qp::ContactAccConstr *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpContactAccConstr_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->removeEqualityConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_removeEqualityConstraint__1(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpContactSpeedConstr *ptr;
    tasks::qp::ContactSpeedConstr *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpContactSpeedConstr_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->removeEqualityConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_removeEqualityConstraint__2(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpContactPosConstr *ptr;
    tasks::qp::ContactPosConstr *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpContactPosConstr_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->removeEqualityConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyTasksQpQPSolver_removeEqualityConstraint(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyTasksQpQPSolver_removeEqualityConstraint__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_removeEqualityConstraint__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_removeEqualityConstraint__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksQpQPSolver_updateNrVars(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mb_value;
    const char *keywords[] = {"mb", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mb_value)) {
        return NULL;
    }
    self->obj->updateNrVars(mb_value);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksQpQPSolver_updateConstrsNrVars(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mb_value;
    const char *keywords[] = {"mb", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mb_value)) {
        return NULL;
    }
    self->obj->updateConstrsNrVars(mb_value);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksQpQPSolver_updateTasksNrVars(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mb_value;
    const char *keywords[] = {"mb", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mb_value)) {
        return NULL;
    }
    self->obj->updateTasksNrVars(mb_value);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksQpQPSolver_updateConstrSize(PyTasksQpQPSolver *self)
{
    PyObject *py_retval;

    self->obj->updateConstrSize();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksQpQPSolver_contactLambdaPosition(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int retval;
    PyTasksQpContactId *contactId;
    const char *keywords[] = {"contactId", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpContactId_Type, &contactId)) {
        return NULL;
    }
    retval = self->obj->contactLambdaPosition(*((PyTasksQpContactId *) contactId)->obj);
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}



PyObject *
_wrap_PyTasksQpQPSolver_addConstraint__0(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpMotionConstr *ptr;
    tasks::qp::MotionConstr *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpMotionConstr_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->addConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_addConstraint__1(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpMotionPolyConstr *ptr;
    tasks::qp::MotionPolyConstr *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpMotionPolyConstr_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->addConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_addConstraint__2(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpContactAccConstr *ptr;
    tasks::qp::ContactAccConstr *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpContactAccConstr_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->addConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_addConstraint__3(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpContactSpeedConstr *ptr;
    tasks::qp::ContactSpeedConstr *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpContactSpeedConstr_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->addConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_addConstraint__4(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpCollisionConstr *ptr;
    tasks::qp::CollisionConstr *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpCollisionConstr_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->addConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_addConstraint__5(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpJointLimitsConstr *ptr;
    tasks::qp::JointLimitsConstr *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpJointLimitsConstr_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->addConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_addConstraint__6(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpDamperJointLimitsConstr *ptr;
    tasks::qp::DamperJointLimitsConstr *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpDamperJointLimitsConstr_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->addConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_addConstraint__7(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpMotionSpringConstr *ptr;
    tasks::qp::MotionSpringConstr *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpMotionSpringConstr_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->addConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_addConstraint__8(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpGripperTorqueConstr *ptr;
    tasks::qp::GripperTorqueConstr *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpGripperTorqueConstr_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->addConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_addConstraint__9(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpBoundedSpeedConstr *ptr;
    tasks::qp::BoundedSpeedConstr *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpBoundedSpeedConstr_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->addConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_addConstraint__10(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpCoMIncPlaneConstr *ptr;
    tasks::qp::CoMIncPlaneConstr *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpCoMIncPlaneConstr_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->addConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_addConstraint__11(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpPositiveLambda *ptr;
    tasks::qp::PositiveLambda *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpPositiveLambda_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->addConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_addConstraint__12(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpContactPosConstr *ptr;
    tasks::qp::ContactPosConstr *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpContactPosConstr_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->addConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_addConstraint__13(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpImageConstr *ptr;
    tasks::qp::ImageConstr *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpImageConstr_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->addConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_addConstraint__14(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mbs_value;
    PyTasksQpConstraint *ptr;
    tasks::qp::Constraint *ptr_ptr;
    const char *keywords[] = {"mbs", "ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &PyTasksQpConstraint_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->addConstraint(mbs_value, ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyTasksQpQPSolver_addConstraint(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[15] = {0,};
    retval = _wrap_PyTasksQpQPSolver_addConstraint__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_addConstraint__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_addConstraint__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_addConstraint__3(self, args, kwargs, &exceptions[3]);
    if (!exceptions[3]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_addConstraint__4(self, args, kwargs, &exceptions[4]);
    if (!exceptions[4]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_addConstraint__5(self, args, kwargs, &exceptions[5]);
    if (!exceptions[5]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_addConstraint__6(self, args, kwargs, &exceptions[6]);
    if (!exceptions[6]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_addConstraint__7(self, args, kwargs, &exceptions[7]);
    if (!exceptions[7]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_addConstraint__8(self, args, kwargs, &exceptions[8]);
    if (!exceptions[8]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_addConstraint__9(self, args, kwargs, &exceptions[9]);
    if (!exceptions[9]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_addConstraint__10(self, args, kwargs, &exceptions[10]);
    if (!exceptions[10]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_addConstraint__11(self, args, kwargs, &exceptions[11]);
    if (!exceptions[11]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_addConstraint__12(self, args, kwargs, &exceptions[12]);
    if (!exceptions[12]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_addConstraint__13(self, args, kwargs, &exceptions[13]);
    if (!exceptions[13]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_addConstraint__14(self, args, kwargs, &exceptions[14]);
    if (!exceptions[14]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        return retval;
    }
    error_list = PyList_New(15);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyList_SET_ITEM(error_list, 3, PyObject_Str(exceptions[3]));
    Py_DECREF(exceptions[3]);
    PyList_SET_ITEM(error_list, 4, PyObject_Str(exceptions[4]));
    Py_DECREF(exceptions[4]);
    PyList_SET_ITEM(error_list, 5, PyObject_Str(exceptions[5]));
    Py_DECREF(exceptions[5]);
    PyList_SET_ITEM(error_list, 6, PyObject_Str(exceptions[6]));
    Py_DECREF(exceptions[6]);
    PyList_SET_ITEM(error_list, 7, PyObject_Str(exceptions[7]));
    Py_DECREF(exceptions[7]);
    PyList_SET_ITEM(error_list, 8, PyObject_Str(exceptions[8]));
    Py_DECREF(exceptions[8]);
    PyList_SET_ITEM(error_list, 9, PyObject_Str(exceptions[9]));
    Py_DECREF(exceptions[9]);
    PyList_SET_ITEM(error_list, 10, PyObject_Str(exceptions[10]));
    Py_DECREF(exceptions[10]);
    PyList_SET_ITEM(error_list, 11, PyObject_Str(exceptions[11]));
    Py_DECREF(exceptions[11]);
    PyList_SET_ITEM(error_list, 12, PyObject_Str(exceptions[12]));
    Py_DECREF(exceptions[12]);
    PyList_SET_ITEM(error_list, 13, PyObject_Str(exceptions[13]));
    Py_DECREF(exceptions[13]);
    PyList_SET_ITEM(error_list, 14, PyObject_Str(exceptions[14]));
    Py_DECREF(exceptions[14]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksQpQPSolver_nrEqualityConstraints(PyTasksQpQPSolver *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->nrEqualityConstraints();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}



PyObject *
_wrap_PyTasksQpQPSolver_removeBoundConstraint__0(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpPositiveLambda *ptr;
    tasks::qp::PositiveLambda *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpPositiveLambda_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->removeBoundConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_removeBoundConstraint__1(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpJointLimitsConstr *ptr;
    tasks::qp::JointLimitsConstr *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpJointLimitsConstr_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->removeBoundConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_removeBoundConstraint__2(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpDamperJointLimitsConstr *ptr;
    tasks::qp::DamperJointLimitsConstr *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpDamperJointLimitsConstr_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->removeBoundConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyTasksQpQPSolver_removeBoundConstraint(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyTasksQpQPSolver_removeBoundConstraint__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_removeBoundConstraint__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_removeBoundConstraint__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksQpQPSolver_nrTasks(PyTasksQpQPSolver *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->nrTasks();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}



PyObject *
_wrap_PyTasksQpQPSolver_removeInequalityConstraint__0(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpCollisionConstr *ptr;
    tasks::qp::CollisionConstr *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpCollisionConstr_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->removeInequalityConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_removeInequalityConstraint__1(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpGripperTorqueConstr *ptr;
    tasks::qp::GripperTorqueConstr *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpGripperTorqueConstr_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->removeInequalityConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_removeInequalityConstraint__2(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpCoMIncPlaneConstr *ptr;
    tasks::qp::CoMIncPlaneConstr *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpCoMIncPlaneConstr_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->removeInequalityConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_removeInequalityConstraint__3(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpImageConstr *ptr;
    tasks::qp::ImageConstr *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpImageConstr_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->removeInequalityConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyTasksQpQPSolver_removeInequalityConstraint(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[4] = {0,};
    retval = _wrap_PyTasksQpQPSolver_removeInequalityConstraint__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_removeInequalityConstraint__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_removeInequalityConstraint__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_removeInequalityConstraint__3(self, args, kwargs, &exceptions[3]);
    if (!exceptions[3]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        return retval;
    }
    error_list = PyList_New(4);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyList_SET_ITEM(error_list, 3, PyObject_Str(exceptions[3]));
    Py_DECREF(exceptions[3]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}



PyObject *
_wrap_PyTasksQpQPSolver_addGenInequalityConstraint__0(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpMotionConstr *ptr;
    tasks::qp::MotionConstr *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpMotionConstr_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->addGenInequalityConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_addGenInequalityConstraint__1(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpMotionPolyConstr *ptr;
    tasks::qp::MotionPolyConstr *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpMotionPolyConstr_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->addGenInequalityConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_addGenInequalityConstraint__2(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpMotionSpringConstr *ptr;
    tasks::qp::MotionSpringConstr *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpMotionSpringConstr_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->addGenInequalityConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyTasksQpQPSolver_addGenInequalityConstraint(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyTasksQpQPSolver_addGenInequalityConstraint__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_addGenInequalityConstraint__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_addGenInequalityConstraint__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksQpQPSolver_data(PyTasksQpQPSolver *self)
{
    PyObject *py_retval;
    PyTasksQpSolverData *py_SolverData;

    tasks::qp::SolverData retval = self->obj->data();
    py_SolverData = PyObject_New(PyTasksQpSolverData, &PyTasksQpSolverData_Type);
    py_SolverData->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_SolverData->obj = new tasks::qp::SolverData(retval);
    py_retval = Py_BuildValue((char *) "N", py_SolverData);
    return py_retval;
}


PyObject *
_wrap_PyTasksQpQPSolver_resetTasks(PyTasksQpQPSolver *self)
{
    PyObject *py_retval;

    self->obj->resetTasks();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyTasksQpQPSolver_addBoundConstraint__0(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpPositiveLambda *ptr;
    tasks::qp::PositiveLambda *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpPositiveLambda_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->addBoundConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_addBoundConstraint__1(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpJointLimitsConstr *ptr;
    tasks::qp::JointLimitsConstr *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpJointLimitsConstr_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->addBoundConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_addBoundConstraint__2(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpDamperJointLimitsConstr *ptr;
    tasks::qp::DamperJointLimitsConstr *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpDamperJointLimitsConstr_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->addBoundConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyTasksQpQPSolver_addBoundConstraint(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyTasksQpQPSolver_addBoundConstraint__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_addBoundConstraint__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_addBoundConstraint__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}



PyObject *
_wrap_PyTasksQpQPSolver_addTask__0(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpSetPointTask *ptr;
    tasks::qp::SetPointTask *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpSetPointTask_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->addTask(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_addTask__1(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpTrackingTask *ptr;
    tasks::qp::TrackingTask *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpTrackingTask_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->addTask(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_addTask__2(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpTrajectoryTask *ptr;
    tasks::qp::TrajectoryTask *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpTrajectoryTask_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->addTask(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_addTask__3(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpPIDTask *ptr;
    tasks::qp::PIDTask *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpPIDTask_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->addTask(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_addTask__4(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpTargetObjectiveTask *ptr;
    tasks::qp::TargetObjectiveTask *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpTargetObjectiveTask_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->addTask(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_addTask__5(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpPostureTask *ptr;
    tasks::qp::PostureTask *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpPostureTask_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->addTask(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_addTask__6(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpContactTask *ptr;
    tasks::qp::ContactTask *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpContactTask_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->addTask(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_addTask__7(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpGripperTorqueTask *ptr;
    tasks::qp::GripperTorqueTask *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpGripperTorqueTask_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->addTask(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_addTask__8(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpMultiCoMTask *ptr;
    tasks::qp::MultiCoMTask *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpMultiCoMTask_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->addTask(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_addTask__9(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpMultiRobotTransformTask *ptr;
    tasks::qp::MultiRobotTransformTask *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpMultiRobotTransformTask_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->addTask(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_addTask__10(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpTorqueTask *ptr;
    tasks::qp::TorqueTask *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpTorqueTask_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->addTask(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_addTask__11(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mbs_value;
    PyTasksQpTask *ptr;
    tasks::qp::Task *ptr_ptr;
    const char *keywords[] = {"mbs", "ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &PyTasksQpTask_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->addTask(mbs_value, ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyTasksQpQPSolver_addTask(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[12] = {0,};
    retval = _wrap_PyTasksQpQPSolver_addTask__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_addTask__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_addTask__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_addTask__3(self, args, kwargs, &exceptions[3]);
    if (!exceptions[3]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_addTask__4(self, args, kwargs, &exceptions[4]);
    if (!exceptions[4]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_addTask__5(self, args, kwargs, &exceptions[5]);
    if (!exceptions[5]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_addTask__6(self, args, kwargs, &exceptions[6]);
    if (!exceptions[6]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_addTask__7(self, args, kwargs, &exceptions[7]);
    if (!exceptions[7]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_addTask__8(self, args, kwargs, &exceptions[8]);
    if (!exceptions[8]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_addTask__9(self, args, kwargs, &exceptions[9]);
    if (!exceptions[9]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_addTask__10(self, args, kwargs, &exceptions[10]);
    if (!exceptions[10]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_addTask__11(self, args, kwargs, &exceptions[11]);
    if (!exceptions[11]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        return retval;
    }
    error_list = PyList_New(12);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyList_SET_ITEM(error_list, 3, PyObject_Str(exceptions[3]));
    Py_DECREF(exceptions[3]);
    PyList_SET_ITEM(error_list, 4, PyObject_Str(exceptions[4]));
    Py_DECREF(exceptions[4]);
    PyList_SET_ITEM(error_list, 5, PyObject_Str(exceptions[5]));
    Py_DECREF(exceptions[5]);
    PyList_SET_ITEM(error_list, 6, PyObject_Str(exceptions[6]));
    Py_DECREF(exceptions[6]);
    PyList_SET_ITEM(error_list, 7, PyObject_Str(exceptions[7]));
    Py_DECREF(exceptions[7]);
    PyList_SET_ITEM(error_list, 8, PyObject_Str(exceptions[8]));
    Py_DECREF(exceptions[8]);
    PyList_SET_ITEM(error_list, 9, PyObject_Str(exceptions[9]));
    Py_DECREF(exceptions[9]);
    PyList_SET_ITEM(error_list, 10, PyObject_Str(exceptions[10]));
    Py_DECREF(exceptions[10]);
    PyList_SET_ITEM(error_list, 11, PyObject_Str(exceptions[11]));
    Py_DECREF(exceptions[11]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksQpQPSolver_solveAndBuildTime(PyTasksQpQPSolver *self)
{
    PyObject *py_retval;
    PyBoostTimerCpu_times *py_cpu_times;

    boost::timer::cpu_times retval = self->obj->solveAndBuildTime();
    py_cpu_times = PyObject_New(PyBoostTimerCpu_times, &PyBoostTimerCpu_times_Type);
    py_cpu_times->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_cpu_times->obj = new boost::timer::cpu_times(retval);
    py_retval = Py_BuildValue((char *) "N", py_cpu_times);
    return py_retval;
}


PyObject *
_wrap_PyTasksQpQPSolver_solver(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *name;
    Py_ssize_t name_len;
    std::string name_std;
    const char *keywords[] = {"name", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &name, &name_len)) {
        return NULL;
    }
    name_std = std::string(name, name_len);
    self->obj->solver(name_std);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksQpQPSolver_solveTime(PyTasksQpQPSolver *self)
{
    PyObject *py_retval;
    PyBoostTimerCpu_times *py_cpu_times;

    boost::timer::cpu_times retval = self->obj->solveTime();
    py_cpu_times = PyObject_New(PyBoostTimerCpu_times, &PyBoostTimerCpu_times_Type);
    py_cpu_times->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_cpu_times->obj = new boost::timer::cpu_times(retval);
    py_retval = Py_BuildValue((char *) "N", py_cpu_times);
    return py_retval;
}



PyObject *
_wrap_PyTasksQpQPSolver_alphaDVec__0(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PyEigenVectorXd *py_VectorXd;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    Eigen::VectorXd retval = self->obj->alphaDVec();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_alphaDVec__1(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    int robotIndex;
    const char *keywords[] = {"robotIndex", NULL};
    PyEigenVectorXd *py_VectorXd;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &robotIndex)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    Eigen::VectorXd retval = self->obj->alphaDVec(robotIndex);
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}

PyObject * _wrap_PyTasksQpQPSolver_alphaDVec(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpQPSolver_alphaDVec__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_alphaDVec__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksQpQPSolver_nrConstraints(PyTasksQpQPSolver *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->nrConstraints();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyTasksQpQPSolver_solve(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    std::vector<rbd::MultiBody> mbs_value;
    std::vector<rbd::MultiBodyConfig> mbcs_value;
    const char *keywords[] = {"mbs", "mbcs", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O&", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, _wrap_convert_py2c__std__vector__lt___rbd__MultiBodyConfig___gt__, &mbcs_value)) {
        return NULL;
    }
    retval = self->obj->solve(mbs_value, mbcs_value);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}



PyObject *
_wrap_PyTasksQpQPSolver_removeTask__0(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpSetPointTask *ptr;
    tasks::qp::SetPointTask *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpSetPointTask_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->removeTask(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_removeTask__1(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpTrackingTask *ptr;
    tasks::qp::TrackingTask *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpTrackingTask_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->removeTask(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_removeTask__2(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpTrajectoryTask *ptr;
    tasks::qp::TrajectoryTask *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpTrajectoryTask_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->removeTask(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_removeTask__3(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpPIDTask *ptr;
    tasks::qp::PIDTask *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpPIDTask_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->removeTask(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_removeTask__4(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpTargetObjectiveTask *ptr;
    tasks::qp::TargetObjectiveTask *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpTargetObjectiveTask_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->removeTask(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_removeTask__5(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpPostureTask *ptr;
    tasks::qp::PostureTask *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpPostureTask_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->removeTask(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_removeTask__6(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpContactTask *ptr;
    tasks::qp::ContactTask *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpContactTask_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->removeTask(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_removeTask__7(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpGripperTorqueTask *ptr;
    tasks::qp::GripperTorqueTask *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpGripperTorqueTask_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->removeTask(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_removeTask__8(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpMultiCoMTask *ptr;
    tasks::qp::MultiCoMTask *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpMultiCoMTask_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->removeTask(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_removeTask__9(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpMultiRobotTransformTask *ptr;
    tasks::qp::MultiRobotTransformTask *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpMultiRobotTransformTask_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->removeTask(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_removeTask__10(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpTorqueTask *ptr;
    tasks::qp::TorqueTask *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpTorqueTask_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->removeTask(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyTasksQpQPSolver_removeTask(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[11] = {0,};
    retval = _wrap_PyTasksQpQPSolver_removeTask__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_removeTask__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_removeTask__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_removeTask__3(self, args, kwargs, &exceptions[3]);
    if (!exceptions[3]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_removeTask__4(self, args, kwargs, &exceptions[4]);
    if (!exceptions[4]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_removeTask__5(self, args, kwargs, &exceptions[5]);
    if (!exceptions[5]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_removeTask__6(self, args, kwargs, &exceptions[6]);
    if (!exceptions[6]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_removeTask__7(self, args, kwargs, &exceptions[7]);
    if (!exceptions[7]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_removeTask__8(self, args, kwargs, &exceptions[8]);
    if (!exceptions[8]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_removeTask__9(self, args, kwargs, &exceptions[9]);
    if (!exceptions[9]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_removeTask__10(self, args, kwargs, &exceptions[10]);
    if (!exceptions[10]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        return retval;
    }
    error_list = PyList_New(11);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyList_SET_ITEM(error_list, 3, PyObject_Str(exceptions[3]));
    Py_DECREF(exceptions[3]);
    PyList_SET_ITEM(error_list, 4, PyObject_Str(exceptions[4]));
    Py_DECREF(exceptions[4]);
    PyList_SET_ITEM(error_list, 5, PyObject_Str(exceptions[5]));
    Py_DECREF(exceptions[5]);
    PyList_SET_ITEM(error_list, 6, PyObject_Str(exceptions[6]));
    Py_DECREF(exceptions[6]);
    PyList_SET_ITEM(error_list, 7, PyObject_Str(exceptions[7]));
    Py_DECREF(exceptions[7]);
    PyList_SET_ITEM(error_list, 8, PyObject_Str(exceptions[8]));
    Py_DECREF(exceptions[8]);
    PyList_SET_ITEM(error_list, 9, PyObject_Str(exceptions[9]));
    Py_DECREF(exceptions[9]);
    PyList_SET_ITEM(error_list, 10, PyObject_Str(exceptions[10]));
    Py_DECREF(exceptions[10]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksQpQPSolver_nrBoundConstraints(PyTasksQpQPSolver *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->nrBoundConstraints();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyTasksQpQPSolver_solveNoMbcUpdate(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    std::vector<rbd::MultiBody> mbs_value;
    std::vector<rbd::MultiBodyConfig> mbcs_value;
    const char *keywords[] = {"mbs", "mbcs", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O&", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, _wrap_convert_py2c__std__vector__lt___rbd__MultiBodyConfig___gt__, &mbcs_value)) {
        return NULL;
    }
    retval = self->obj->solveNoMbcUpdate(mbs_value, mbcs_value);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}



PyObject *
_wrap_PyTasksQpQPSolver_removeGenInequalityConstraint__0(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpMotionConstr *ptr;
    tasks::qp::MotionConstr *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpMotionConstr_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->removeGenInequalityConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_removeGenInequalityConstraint__1(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpMotionPolyConstr *ptr;
    tasks::qp::MotionPolyConstr *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpMotionPolyConstr_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->removeGenInequalityConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpQPSolver_removeGenInequalityConstraint__2(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpMotionSpringConstr *ptr;
    tasks::qp::MotionSpringConstr *ptr_ptr;
    const char *keywords[] = {"ptr", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpMotionSpringConstr_Type, &ptr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ptr_ptr = (ptr ? ptr->obj : NULL);
    self->obj->removeGenInequalityConstraint(ptr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyTasksQpQPSolver_removeGenInequalityConstraint(PyTasksQpQPSolver *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyTasksQpQPSolver_removeGenInequalityConstraint__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_removeGenInequalityConstraint__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyTasksQpQPSolver_removeGenInequalityConstraint__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}

static PyMethodDef PyTasksQpQPSolver_methods[] = {
    {(char *) "addInequalityConstraint", (PyCFunction) _wrap_PyTasksQpQPSolver_addInequalityConstraint, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "addEqualityConstraint", (PyCFunction) _wrap_PyTasksQpQPSolver_addEqualityConstraint, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "nrInequalityConstraints", (PyCFunction) _wrap_PyTasksQpQPSolver_nrInequalityConstraints, METH_NOARGS, NULL },
    {(char *) "result", (PyCFunction) _wrap_PyTasksQpQPSolver_result, METH_NOARGS, NULL },
    {(char *) "updateMbc", (PyCFunction) _wrap_PyTasksQpQPSolver_updateMbc, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "nrVars", (PyCFunction) _wrap_PyTasksQpQPSolver_nrVars, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "nrGenInequalityConstraints", (PyCFunction) _wrap_PyTasksQpQPSolver_nrGenInequalityConstraints, METH_NOARGS, NULL },
    {(char *) "removeConstraint", (PyCFunction) _wrap_PyTasksQpQPSolver_removeConstraint, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "lambdaVec", (PyCFunction) _wrap_PyTasksQpQPSolver_lambdaVec, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "removeEqualityConstraint", (PyCFunction) _wrap_PyTasksQpQPSolver_removeEqualityConstraint, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "updateNrVars", (PyCFunction) _wrap_PyTasksQpQPSolver_updateNrVars, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "updateConstrsNrVars", (PyCFunction) _wrap_PyTasksQpQPSolver_updateConstrsNrVars, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "updateTasksNrVars", (PyCFunction) _wrap_PyTasksQpQPSolver_updateTasksNrVars, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "updateConstrSize", (PyCFunction) _wrap_PyTasksQpQPSolver_updateConstrSize, METH_NOARGS, NULL },
    {(char *) "contactLambdaPosition", (PyCFunction) _wrap_PyTasksQpQPSolver_contactLambdaPosition, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "addConstraint", (PyCFunction) _wrap_PyTasksQpQPSolver_addConstraint, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "nrEqualityConstraints", (PyCFunction) _wrap_PyTasksQpQPSolver_nrEqualityConstraints, METH_NOARGS, NULL },
    {(char *) "removeBoundConstraint", (PyCFunction) _wrap_PyTasksQpQPSolver_removeBoundConstraint, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "nrTasks", (PyCFunction) _wrap_PyTasksQpQPSolver_nrTasks, METH_NOARGS, NULL },
    {(char *) "removeInequalityConstraint", (PyCFunction) _wrap_PyTasksQpQPSolver_removeInequalityConstraint, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "addGenInequalityConstraint", (PyCFunction) _wrap_PyTasksQpQPSolver_addGenInequalityConstraint, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "data", (PyCFunction) _wrap_PyTasksQpQPSolver_data, METH_NOARGS, NULL },
    {(char *) "resetTasks", (PyCFunction) _wrap_PyTasksQpQPSolver_resetTasks, METH_NOARGS, NULL },
    {(char *) "addBoundConstraint", (PyCFunction) _wrap_PyTasksQpQPSolver_addBoundConstraint, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "addTask", (PyCFunction) _wrap_PyTasksQpQPSolver_addTask, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "solveAndBuildTime", (PyCFunction) _wrap_PyTasksQpQPSolver_solveAndBuildTime, METH_NOARGS, NULL },
    {(char *) "solver", (PyCFunction) _wrap_PyTasksQpQPSolver_solver, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "solveTime", (PyCFunction) _wrap_PyTasksQpQPSolver_solveTime, METH_NOARGS, NULL },
    {(char *) "alphaDVec", (PyCFunction) _wrap_PyTasksQpQPSolver_alphaDVec, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "nrConstraints", (PyCFunction) _wrap_PyTasksQpQPSolver_nrConstraints, METH_NOARGS, NULL },
    {(char *) "solve", (PyCFunction) _wrap_PyTasksQpQPSolver_solve, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "removeTask", (PyCFunction) _wrap_PyTasksQpQPSolver_removeTask, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "nrBoundConstraints", (PyCFunction) _wrap_PyTasksQpQPSolver_nrBoundConstraints, METH_NOARGS, NULL },
    {(char *) "solveNoMbcUpdate", (PyCFunction) _wrap_PyTasksQpQPSolver_solveNoMbcUpdate, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "removeGenInequalityConstraint", (PyCFunction) _wrap_PyTasksQpQPSolver_removeGenInequalityConstraint, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpQPSolver__tp_dealloc(PyTasksQpQPSolver *self)
{
        tasks::qp::QPSolver *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpQPSolver__tp_richcompare (PyTasksQpQPSolver *PYBINDGEN_UNUSED(self), PyTasksQpQPSolver *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpQPSolver_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpQPSolver_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.QPSolver",            /* tp_name */
    sizeof(PyTasksQpQPSolver),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpQPSolver__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpQPSolver__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpQPSolver_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpQPSolver__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyTasksQpSolverData__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'SolverData' cannot be constructed ()");
    return -1;
}


PyObject *
_wrap_PyTasksQpSolverData_totalLambda(PyTasksQpSolverData *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->totalLambda();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyTasksQpSolverData_computeNormalAccB(PyTasksQpSolverData *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mbs_value;
    std::vector<rbd::MultiBodyConfig> mbcs_value;
    const char *keywords[] = {"mbs", "mbcs", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O&", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, _wrap_convert_py2c__std__vector__lt___rbd__MultiBodyConfig___gt__, &mbcs_value)) {
        return NULL;
    }
    self->obj->computeNormalAccB(mbs_value, mbcs_value);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksQpSolverData_nrBiLambda(PyTasksQpSolverData *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->nrBiLambda();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyTasksQpSolverData_nrContacts(PyTasksQpSolverData *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->nrContacts();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyTasksQpSolverData_allContacts(PyTasksQpSolverData *self)
{
    PyObject *py_retval;
    std::vector< tasks::qp::BilateralContact > retval;
    Pystd__vector__lt__tasks__qp__BilateralContact__gt__ *py_std__vector__lt__tasks__qp__BilateralContact__gt__;

    retval = self->obj->allContacts();
    py_std__vector__lt__tasks__qp__BilateralContact__gt__ = PyObject_New(Pystd__vector__lt__tasks__qp__BilateralContact__gt__, &Pystd__vector__lt__tasks__qp__BilateralContact__gt___Type);
    py_std__vector__lt__tasks__qp__BilateralContact__gt__->obj = new std::vector<tasks::qp::BilateralContact>(retval);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt__tasks__qp__BilateralContact__gt__);
    return py_retval;
}


PyObject *
_wrap_PyTasksQpSolverData_nrVars(PyTasksQpSolverData *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->nrVars();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyTasksQpSolverData_unilateralContacts(PyTasksQpSolverData *self)
{
    PyObject *py_retval;
    std::vector< tasks::qp::UnilateralContact > retval;
    Pystd__vector__lt__tasks__qp__UnilateralContact__gt__ *py_std__vector__lt__tasks__qp__UnilateralContact__gt__;

    retval = self->obj->unilateralContacts();
    py_std__vector__lt__tasks__qp__UnilateralContact__gt__ = PyObject_New(Pystd__vector__lt__tasks__qp__UnilateralContact__gt__, &Pystd__vector__lt__tasks__qp__UnilateralContact__gt___Type);
    py_std__vector__lt__tasks__qp__UnilateralContact__gt__->obj = new std::vector<tasks::qp::UnilateralContact>(retval);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt__tasks__qp__UnilateralContact__gt__);
    return py_retval;
}


PyObject *
_wrap_PyTasksQpSolverData_normalAccB(PyTasksQpSolverData *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector< sva::MotionVecd > retval;
    int robotIndex;
    const char *keywords[] = {"robotIndex", NULL};
    Pystd__vector__lt__sva__MotionVecd__gt__ *py_std__vector__lt__sva__MotionVecd__gt__;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &robotIndex)) {
        return NULL;
    }
    retval = self->obj->normalAccB(robotIndex);
    py_std__vector__lt__sva__MotionVecd__gt__ = PyObject_New(Pystd__vector__lt__sva__MotionVecd__gt__, &Pystd__vector__lt__sva__MotionVecd__gt___Type);
    py_std__vector__lt__sva__MotionVecd__gt__->obj = new std::vector<sva::MotionVecd>(retval);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt__sva__MotionVecd__gt__);
    return py_retval;
}


PyObject *
_wrap_PyTasksQpSolverData_totalAlphaD(PyTasksQpSolverData *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->totalAlphaD();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyTasksQpSolverData_bilateralBegin(PyTasksQpSolverData *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->bilateralBegin();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyTasksQpSolverData_alphaD(PyTasksQpSolverData *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int retval;
    int robotIndex;
    const char *keywords[] = {"robotIndex", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &robotIndex)) {
        return NULL;
    }
    retval = self->obj->alphaD(robotIndex);
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyTasksQpSolverData_nrUniLambda(PyTasksQpSolverData *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->nrUniLambda();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyTasksQpSolverData_bilateralContacts(PyTasksQpSolverData *self)
{
    PyObject *py_retval;
    std::vector< tasks::qp::BilateralContact > retval;
    Pystd__vector__lt__tasks__qp__BilateralContact__gt__ *py_std__vector__lt__tasks__qp__BilateralContact__gt__;

    retval = self->obj->bilateralContacts();
    py_std__vector__lt__tasks__qp__BilateralContact__gt__ = PyObject_New(Pystd__vector__lt__tasks__qp__BilateralContact__gt__, &Pystd__vector__lt__tasks__qp__BilateralContact__gt___Type);
    py_std__vector__lt__tasks__qp__BilateralContact__gt__->obj = new std::vector<tasks::qp::BilateralContact>(retval);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt__tasks__qp__BilateralContact__gt__);
    return py_retval;
}



PyObject *
_wrap_PyTasksQpSolverData_lambdaBegin__0(PyTasksQpSolverData *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    int retval;
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->lambdaBegin();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpSolverData_lambdaBegin__1(PyTasksQpSolverData *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    int retval;
    int contactIndex;
    const char *keywords[] = {"contactIndex", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &contactIndex)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->lambdaBegin(contactIndex);
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}

PyObject * _wrap_PyTasksQpSolverData_lambdaBegin(PyTasksQpSolverData *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpSolverData_lambdaBegin__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpSolverData_lambdaBegin__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}



PyObject *
_wrap_PyTasksQpSolverData_alphaDBegin__0(PyTasksQpSolverData *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    int retval;
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->alphaDBegin();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpSolverData_alphaDBegin__1(PyTasksQpSolverData *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    int retval;
    int robotIndex;
    const char *keywords[] = {"robotIndex", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &robotIndex)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->alphaDBegin(robotIndex);
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}

PyObject * _wrap_PyTasksQpSolverData_alphaDBegin(PyTasksQpSolverData *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpSolverData_alphaDBegin__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpSolverData_alphaDBegin__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksQpSolverData_unilateralBegin(PyTasksQpSolverData *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->unilateralBegin();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyTasksQpSolverData_lambda(PyTasksQpSolverData *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int retval;
    int contactIndex;
    const char *keywords[] = {"contactIndex", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &contactIndex)) {
        return NULL;
    }
    retval = self->obj->lambda(contactIndex);
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}

static PyMethodDef PyTasksQpSolverData_methods[] = {
    {(char *) "totalLambda", (PyCFunction) _wrap_PyTasksQpSolverData_totalLambda, METH_NOARGS, NULL },
    {(char *) "computeNormalAccB", (PyCFunction) _wrap_PyTasksQpSolverData_computeNormalAccB, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "nrBiLambda", (PyCFunction) _wrap_PyTasksQpSolverData_nrBiLambda, METH_NOARGS, NULL },
    {(char *) "nrContacts", (PyCFunction) _wrap_PyTasksQpSolverData_nrContacts, METH_NOARGS, NULL },
    {(char *) "allContacts", (PyCFunction) _wrap_PyTasksQpSolverData_allContacts, METH_NOARGS, NULL },
    {(char *) "nrVars", (PyCFunction) _wrap_PyTasksQpSolverData_nrVars, METH_NOARGS, NULL },
    {(char *) "unilateralContacts", (PyCFunction) _wrap_PyTasksQpSolverData_unilateralContacts, METH_NOARGS, NULL },
    {(char *) "normalAccB", (PyCFunction) _wrap_PyTasksQpSolverData_normalAccB, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "totalAlphaD", (PyCFunction) _wrap_PyTasksQpSolverData_totalAlphaD, METH_NOARGS, NULL },
    {(char *) "bilateralBegin", (PyCFunction) _wrap_PyTasksQpSolverData_bilateralBegin, METH_NOARGS, NULL },
    {(char *) "alphaD", (PyCFunction) _wrap_PyTasksQpSolverData_alphaD, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "nrUniLambda", (PyCFunction) _wrap_PyTasksQpSolverData_nrUniLambda, METH_NOARGS, NULL },
    {(char *) "bilateralContacts", (PyCFunction) _wrap_PyTasksQpSolverData_bilateralContacts, METH_NOARGS, NULL },
    {(char *) "lambdaBegin", (PyCFunction) _wrap_PyTasksQpSolverData_lambdaBegin, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "alphaDBegin", (PyCFunction) _wrap_PyTasksQpSolverData_alphaDBegin, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "unilateralBegin", (PyCFunction) _wrap_PyTasksQpSolverData_unilateralBegin, METH_NOARGS, NULL },
    {(char *) "lambda", (PyCFunction) _wrap_PyTasksQpSolverData_lambda, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpSolverData__tp_dealloc(PyTasksQpSolverData *self)
{
        tasks::qp::SolverData *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpSolverData__tp_richcompare (PyTasksQpSolverData *PYBINDGEN_UNUSED(self), PyTasksQpSolverData *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpSolverData_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpSolverData_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.SolverData",            /* tp_name */
    sizeof(PyTasksQpSolverData),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpSolverData__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpSolverData__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpSolverData_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpSolverData__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



static PyObject* _wrap_PyTasksQpFrictionCone__get_generators(PyTasksQpFrictionCone *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    Pystd__vector__lt__Eigen__Vector3d__gt__ *py_std__vector__lt__Eigen__Vector3d__gt__;

    py_std__vector__lt__Eigen__Vector3d__gt__ = PyObject_New(Pystd__vector__lt__Eigen__Vector3d__gt__, &Pystd__vector__lt__Eigen__Vector3d__gt___Type);
    py_std__vector__lt__Eigen__Vector3d__gt__->obj = new std::vector<Eigen::Vector3d>(self->obj->generators);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt__Eigen__Vector3d__gt__);
    return py_retval;
}
static int _wrap_PyTasksQpFrictionCone__set_generators(PyTasksQpFrictionCone *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O&", _wrap_convert_py2c__std__vector__lt___Eigen__Vector3d___gt__, &self->obj->generators)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyTasksQpFrictionCone__getsets[] = {
    {
        (char*) "generators", /* attribute name */
        (getter) _wrap_PyTasksQpFrictionCone__get_generators, /* C function to get the attribute */
        (setter) _wrap_PyTasksQpFrictionCone__set_generators, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyTasksQpFrictionCone__tp_init__0(PyTasksQpFrictionCone *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new tasks::qp::FrictionCone();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpFrictionCone__tp_init__1(PyTasksQpFrictionCone *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyTasksQpFrictionCone *ctor_arg;
    const char *keywords[] = {"ctor_arg", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpFrictionCone_Type, &ctor_arg)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new tasks::qp::FrictionCone(*((PyTasksQpFrictionCone *) ctor_arg)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpFrictionCone__tp_init__2(PyTasksQpFrictionCone *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new tasks::qp::FrictionCone();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpFrictionCone__tp_init__3(PyTasksQpFrictionCone *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyEigenMatrix3d *frame;
    int nrGen;
    double mu;
    double direction = 1.;
    const char *keywords[] = {"frame", "nrGen", "mu", "direction", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!id|d", (char **) keywords, &PyEigenMatrix3d_Type, &frame, &nrGen, &mu, &direction)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new tasks::qp::FrictionCone(*((PyEigenMatrix3d *) frame)->obj, nrGen, mu, direction);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyTasksQpFrictionCone__tp_init(PyTasksQpFrictionCone *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[4] = {0,};
    retval = _wrap_PyTasksQpFrictionCone__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpFrictionCone__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyTasksQpFrictionCone__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    retval = _wrap_PyTasksQpFrictionCone__tp_init__3(self, args, kwargs, &exceptions[3]);
    if (!exceptions[3]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        return retval;
    }
    error_list = PyList_New(4);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyList_SET_ITEM(error_list, 3, PyObject_Str(exceptions[3]));
    Py_DECREF(exceptions[3]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyTasksQpFrictionCone__copy__(PyTasksQpFrictionCone *self)
{

    PyTasksQpFrictionCone *py_copy;
    py_copy = PyObject_New(PyTasksQpFrictionCone, &PyTasksQpFrictionCone_Type);
    py_copy->obj = new tasks::qp::FrictionCone(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return (PyObject*) py_copy;
}

static PyMethodDef PyTasksQpFrictionCone_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyTasksQpFrictionCone__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpFrictionCone__tp_dealloc(PyTasksQpFrictionCone *self)
{
        tasks::qp::FrictionCone *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpFrictionCone__tp_richcompare (PyTasksQpFrictionCone *PYBINDGEN_UNUSED(self), PyTasksQpFrictionCone *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpFrictionCone_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpFrictionCone_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.FrictionCone",            /* tp_name */
    sizeof(PyTasksQpFrictionCone),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpFrictionCone__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpFrictionCone__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpFrictionCone_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyTasksQpFrictionCone__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpFrictionCone__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



static PyObject* _wrap_PyTasksQpContactId__get_r1Index(PyTasksQpContactId *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "i", self->obj->r1Index);
    return py_retval;
}
static int _wrap_PyTasksQpContactId__set_r1Index(PyTasksQpContactId *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &self->obj->r1Index)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyTasksQpContactId__get_r2Index(PyTasksQpContactId *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "i", self->obj->r2Index);
    return py_retval;
}
static int _wrap_PyTasksQpContactId__set_r2Index(PyTasksQpContactId *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &self->obj->r2Index)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyTasksQpContactId__get_r1BodyName(PyTasksQpContactId *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "s#", (self->obj->r1BodyName).c_str(), (self->obj->r1BodyName).size());
    return py_retval;
}
static int _wrap_PyTasksQpContactId__set_r1BodyName(PyTasksQpContactId *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    const char *retval_ptr;
    Py_ssize_t retval_len;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "s#", &retval_ptr, &retval_len)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->r1BodyName = std::string(retval_ptr, retval_len);
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyTasksQpContactId__get_r2BodyName(PyTasksQpContactId *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "s#", (self->obj->r2BodyName).c_str(), (self->obj->r2BodyName).size());
    return py_retval;
}
static int _wrap_PyTasksQpContactId__set_r2BodyName(PyTasksQpContactId *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    const char *retval_ptr;
    Py_ssize_t retval_len;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "s#", &retval_ptr, &retval_len)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->r2BodyName = std::string(retval_ptr, retval_len);
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyTasksQpContactId__get_ambiguityId(PyTasksQpContactId *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "i", self->obj->ambiguityId);
    return py_retval;
}
static int _wrap_PyTasksQpContactId__set_ambiguityId(PyTasksQpContactId *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &self->obj->ambiguityId)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyTasksQpContactId__getsets[] = {
    {
        (char*) "r1BodyName", /* attribute name */
        (getter) _wrap_PyTasksQpContactId__get_r1BodyName, /* C function to get the attribute */
        (setter) _wrap_PyTasksQpContactId__set_r1BodyName, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "ambiguityId", /* attribute name */
        (getter) _wrap_PyTasksQpContactId__get_ambiguityId, /* C function to get the attribute */
        (setter) _wrap_PyTasksQpContactId__set_ambiguityId, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "r2BodyName", /* attribute name */
        (getter) _wrap_PyTasksQpContactId__get_r2BodyName, /* C function to get the attribute */
        (setter) _wrap_PyTasksQpContactId__set_r2BodyName, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "r1Index", /* attribute name */
        (getter) _wrap_PyTasksQpContactId__get_r1Index, /* C function to get the attribute */
        (setter) _wrap_PyTasksQpContactId__set_r1Index, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "r2Index", /* attribute name */
        (getter) _wrap_PyTasksQpContactId__get_r2Index, /* C function to get the attribute */
        (setter) _wrap_PyTasksQpContactId__set_r2Index, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyTasksQpContactId__tp_init__0(PyTasksQpContactId *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new tasks::qp::ContactId();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpContactId__tp_init__1(PyTasksQpContactId *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyTasksQpContactId *ctor_arg;
    const char *keywords[] = {"ctor_arg", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpContactId_Type, &ctor_arg)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new tasks::qp::ContactId(*((PyTasksQpContactId *) ctor_arg)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpContactId__tp_init__2(PyTasksQpContactId *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new tasks::qp::ContactId();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpContactId__tp_init__3(PyTasksQpContactId *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    int r1Index;
    int r2Index;
    const char *r1BodyName;
    Py_ssize_t r1BodyName_len;
    std::string r1BodyName_std;
    const char *r2BodyName;
    Py_ssize_t r2BodyName_len;
    std::string r2BodyName_std;
    int nSurf = -1;
    const char *keywords[] = {"r1Index", "r2Index", "r1BodyName", "r2BodyName", "nSurf", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iis#s#|i", (char **) keywords, &r1Index, &r2Index, &r1BodyName, &r1BodyName_len, &r2BodyName, &r2BodyName_len, &nSurf)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    r1BodyName_std = std::string(r1BodyName, r1BodyName_len);
    r2BodyName_std = std::string(r2BodyName, r2BodyName_len);
    self->obj = new tasks::qp::ContactId(r1Index, r2Index, r1BodyName_std, r2BodyName_std, nSurf);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyTasksQpContactId__tp_init(PyTasksQpContactId *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[4] = {0,};
    retval = _wrap_PyTasksQpContactId__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpContactId__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyTasksQpContactId__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    retval = _wrap_PyTasksQpContactId__tp_init__3(self, args, kwargs, &exceptions[3]);
    if (!exceptions[3]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        return retval;
    }
    error_list = PyList_New(4);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyList_SET_ITEM(error_list, 3, PyObject_Str(exceptions[3]));
    Py_DECREF(exceptions[3]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyTasksQpContactId__copy__(PyTasksQpContactId *self)
{

    PyTasksQpContactId *py_copy;
    py_copy = PyObject_New(PyTasksQpContactId, &PyTasksQpContactId_Type);
    py_copy->obj = new tasks::qp::ContactId(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return (PyObject*) py_copy;
}

static PyMethodDef PyTasksQpContactId_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyTasksQpContactId__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpContactId__tp_dealloc(PyTasksQpContactId *self)
{
        tasks::qp::ContactId *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpContactId__tp_richcompare (PyTasksQpContactId *PYBINDGEN_UNUSED(self), PyTasksQpContactId *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpContactId_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        if (*self->obj < *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        if (*self->obj == *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_NE:
        if (*self->obj != *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpContactId_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.ContactId",            /* tp_name */
    sizeof(PyTasksQpContactId),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpContactId__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpContactId__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpContactId_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyTasksQpContactId__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpContactId__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



static PyObject* _wrap_PyTasksQpUnilateralContact__get_contactId(PyTasksQpUnilateralContact *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyTasksQpContactId *py_ContactId;

    py_ContactId = PyObject_New(PyTasksQpContactId, &PyTasksQpContactId_Type);
    py_ContactId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_ContactId->obj = new tasks::qp::ContactId(self->obj->contactId);
    py_retval = Py_BuildValue((char *) "N", py_ContactId);
    return py_retval;
}
static int _wrap_PyTasksQpUnilateralContact__set_contactId(PyTasksQpUnilateralContact *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyTasksQpContactId *tmp_ContactId;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyTasksQpContactId_Type, &tmp_ContactId)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->contactId = *tmp_ContactId->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyTasksQpUnilateralContact__get_r1Points(PyTasksQpUnilateralContact *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    Pystd__vector__lt__Eigen__Vector3d__gt__ *py_std__vector__lt__Eigen__Vector3d__gt__;

    py_std__vector__lt__Eigen__Vector3d__gt__ = PyObject_New(Pystd__vector__lt__Eigen__Vector3d__gt__, &Pystd__vector__lt__Eigen__Vector3d__gt___Type);
    py_std__vector__lt__Eigen__Vector3d__gt__->obj = new std::vector<Eigen::Vector3d>(self->obj->r1Points);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt__Eigen__Vector3d__gt__);
    return py_retval;
}
static int _wrap_PyTasksQpUnilateralContact__set_r1Points(PyTasksQpUnilateralContact *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O&", _wrap_convert_py2c__std__vector__lt___Eigen__Vector3d___gt__, &self->obj->r1Points)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyTasksQpUnilateralContact__get_r2Points(PyTasksQpUnilateralContact *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    Pystd__vector__lt__Eigen__Vector3d__gt__ *py_std__vector__lt__Eigen__Vector3d__gt__;

    py_std__vector__lt__Eigen__Vector3d__gt__ = PyObject_New(Pystd__vector__lt__Eigen__Vector3d__gt__, &Pystd__vector__lt__Eigen__Vector3d__gt___Type);
    py_std__vector__lt__Eigen__Vector3d__gt__->obj = new std::vector<Eigen::Vector3d>(self->obj->r2Points);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt__Eigen__Vector3d__gt__);
    return py_retval;
}
static int _wrap_PyTasksQpUnilateralContact__set_r2Points(PyTasksQpUnilateralContact *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O&", _wrap_convert_py2c__std__vector__lt___Eigen__Vector3d___gt__, &self->obj->r2Points)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyTasksQpUnilateralContact__get_r1Cone(PyTasksQpUnilateralContact *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyTasksQpFrictionCone *py_FrictionCone;

    py_FrictionCone = PyObject_New(PyTasksQpFrictionCone, &PyTasksQpFrictionCone_Type);
    py_FrictionCone->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_FrictionCone->obj = new tasks::qp::FrictionCone(self->obj->r1Cone);
    py_retval = Py_BuildValue((char *) "N", py_FrictionCone);
    return py_retval;
}
static int _wrap_PyTasksQpUnilateralContact__set_r1Cone(PyTasksQpUnilateralContact *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyTasksQpFrictionCone *tmp_FrictionCone;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyTasksQpFrictionCone_Type, &tmp_FrictionCone)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->r1Cone = *tmp_FrictionCone->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyTasksQpUnilateralContact__get_r2Cone(PyTasksQpUnilateralContact *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyTasksQpFrictionCone *py_FrictionCone;

    py_FrictionCone = PyObject_New(PyTasksQpFrictionCone, &PyTasksQpFrictionCone_Type);
    py_FrictionCone->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_FrictionCone->obj = new tasks::qp::FrictionCone(self->obj->r2Cone);
    py_retval = Py_BuildValue((char *) "N", py_FrictionCone);
    return py_retval;
}
static int _wrap_PyTasksQpUnilateralContact__set_r2Cone(PyTasksQpUnilateralContact *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyTasksQpFrictionCone *tmp_FrictionCone;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyTasksQpFrictionCone_Type, &tmp_FrictionCone)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->r2Cone = *tmp_FrictionCone->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyTasksQpUnilateralContact__get_X_b1_b2(PyTasksQpUnilateralContact *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PySvaPTransformd *py_PTransformd;

    py_PTransformd = PyObject_New(PySvaPTransformd, &PySvaPTransformd_Type);
    py_PTransformd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_PTransformd->obj = new sva::PTransformd(self->obj->X_b1_b2);
    py_retval = Py_BuildValue((char *) "N", py_PTransformd);
    return py_retval;
}
static int _wrap_PyTasksQpUnilateralContact__set_X_b1_b2(PyTasksQpUnilateralContact *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PySvaPTransformd *tmp_PTransformd;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PySvaPTransformd_Type, &tmp_PTransformd)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->X_b1_b2 = *tmp_PTransformd->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyTasksQpUnilateralContact__get_X_b1_cf(PyTasksQpUnilateralContact *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PySvaPTransformd *py_PTransformd;

    py_PTransformd = PyObject_New(PySvaPTransformd, &PySvaPTransformd_Type);
    py_PTransformd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_PTransformd->obj = new sva::PTransformd(self->obj->X_b1_cf);
    py_retval = Py_BuildValue((char *) "N", py_PTransformd);
    return py_retval;
}
static int _wrap_PyTasksQpUnilateralContact__set_X_b1_cf(PyTasksQpUnilateralContact *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PySvaPTransformd *tmp_PTransformd;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PySvaPTransformd_Type, &tmp_PTransformd)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->X_b1_cf = *tmp_PTransformd->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyTasksQpUnilateralContact__getsets[] = {
    {
        (char*) "X_b1_b2", /* attribute name */
        (getter) _wrap_PyTasksQpUnilateralContact__get_X_b1_b2, /* C function to get the attribute */
        (setter) _wrap_PyTasksQpUnilateralContact__set_X_b1_b2, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "r2Points", /* attribute name */
        (getter) _wrap_PyTasksQpUnilateralContact__get_r2Points, /* C function to get the attribute */
        (setter) _wrap_PyTasksQpUnilateralContact__set_r2Points, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "X_b1_cf", /* attribute name */
        (getter) _wrap_PyTasksQpUnilateralContact__get_X_b1_cf, /* C function to get the attribute */
        (setter) _wrap_PyTasksQpUnilateralContact__set_X_b1_cf, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "contactId", /* attribute name */
        (getter) _wrap_PyTasksQpUnilateralContact__get_contactId, /* C function to get the attribute */
        (setter) _wrap_PyTasksQpUnilateralContact__set_contactId, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "r1Cone", /* attribute name */
        (getter) _wrap_PyTasksQpUnilateralContact__get_r1Cone, /* C function to get the attribute */
        (setter) _wrap_PyTasksQpUnilateralContact__set_r1Cone, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "r1Points", /* attribute name */
        (getter) _wrap_PyTasksQpUnilateralContact__get_r1Points, /* C function to get the attribute */
        (setter) _wrap_PyTasksQpUnilateralContact__set_r1Points, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "r2Cone", /* attribute name */
        (getter) _wrap_PyTasksQpUnilateralContact__get_r2Cone, /* C function to get the attribute */
        (setter) _wrap_PyTasksQpUnilateralContact__set_r2Cone, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyTasksQpUnilateralContact__tp_init__0(PyTasksQpUnilateralContact *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new tasks::qp::UnilateralContact();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpUnilateralContact__tp_init__1(PyTasksQpUnilateralContact *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyTasksQpUnilateralContact *ctor_arg;
    const char *keywords[] = {"ctor_arg", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpUnilateralContact_Type, &ctor_arg)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new tasks::qp::UnilateralContact(*((PyTasksQpUnilateralContact *) ctor_arg)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpUnilateralContact__tp_init__2(PyTasksQpUnilateralContact *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new tasks::qp::UnilateralContact();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpUnilateralContact__tp_init__3(PyTasksQpUnilateralContact *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    int r1Index;
    int r2Index;
    const char *r1BodyName;
    Py_ssize_t r1BodyName_len;
    std::string r1BodyName_std;
    const char *r2BodyName;
    Py_ssize_t r2BodyName_len;
    std::string r2BodyName_std;
    std::vector<Eigen::Vector3d> r1Points_value;
    PyEigenMatrix3d *r1Frame;
    PySvaPTransformd *X_b1_b2;
    int nrGen;
    double mu;
    PySvaPTransformd *X_b1_cf = NULL;
    const char *keywords[] = {"r1Index", "r2Index", "r1BodyName", "r2BodyName", "r1Points", "r1Frame", "X_b1_b2", "nrGen", "mu", "X_b1_cf", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iis#s#O&O!O!id|O!", (char **) keywords, &r1Index, &r2Index, &r1BodyName, &r1BodyName_len, &r2BodyName, &r2BodyName_len, _wrap_convert_py2c__std__vector__lt___Eigen__Vector3d___gt__, &r1Points_value, &PyEigenMatrix3d_Type, &r1Frame, &PySvaPTransformd_Type, &X_b1_b2, &nrGen, &mu, &PySvaPTransformd_Type, &X_b1_cf)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    r1BodyName_std = std::string(r1BodyName, r1BodyName_len);
    r2BodyName_std = std::string(r2BodyName, r2BodyName_len);
    self->obj = new tasks::qp::UnilateralContact(r1Index, r2Index, r1BodyName_std, r2BodyName_std, r1Points_value, *((PyEigenMatrix3d *) r1Frame)->obj, *((PySvaPTransformd *) X_b1_b2)->obj, nrGen, mu, (X_b1_cf ? (*((PySvaPTransformd *) X_b1_cf)->obj) : sva::PTransformd::Identity()));
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpUnilateralContact__tp_init__4(PyTasksQpUnilateralContact *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    int r1Index;
    int r2Index;
    const char *r1BodyName;
    Py_ssize_t r1BodyName_len;
    std::string r1BodyName_std;
    const char *r2BodyName;
    Py_ssize_t r2BodyName_len;
    std::string r2BodyName_std;
    int ambiguityId;
    std::vector<Eigen::Vector3d> r1Points_value;
    PyEigenMatrix3d *r1Frame;
    PySvaPTransformd *X_b1_b2;
    int nrGen;
    double mu;
    PySvaPTransformd *X_b1_cf = NULL;
    const char *keywords[] = {"r1Index", "r2Index", "r1BodyName", "r2BodyName", "ambiguityId", "r1Points", "r1Frame", "X_b1_b2", "nrGen", "mu", "X_b1_cf", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iis#s#iO&O!O!id|O!", (char **) keywords, &r1Index, &r2Index, &r1BodyName, &r1BodyName_len, &r2BodyName, &r2BodyName_len, &ambiguityId, _wrap_convert_py2c__std__vector__lt___Eigen__Vector3d___gt__, &r1Points_value, &PyEigenMatrix3d_Type, &r1Frame, &PySvaPTransformd_Type, &X_b1_b2, &nrGen, &mu, &PySvaPTransformd_Type, &X_b1_cf)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    r1BodyName_std = std::string(r1BodyName, r1BodyName_len);
    r2BodyName_std = std::string(r2BodyName, r2BodyName_len);
    self->obj = new tasks::qp::UnilateralContact(r1Index, r2Index, r1BodyName_std, r2BodyName_std, ambiguityId, r1Points_value, *((PyEigenMatrix3d *) r1Frame)->obj, *((PySvaPTransformd *) X_b1_b2)->obj, nrGen, mu, (X_b1_cf ? (*((PySvaPTransformd *) X_b1_cf)->obj) : sva::PTransformd::Identity()));
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpUnilateralContact__tp_init__5(PyTasksQpUnilateralContact *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyTasksQpContactId *contactId;
    std::vector<Eigen::Vector3d> r1Points_value;
    PyEigenMatrix3d *r1Frame;
    PySvaPTransformd *X_b1_b2;
    int nrGen;
    double mu;
    PySvaPTransformd *X_b1_cf = NULL;
    const char *keywords[] = {"contactId", "r1Points", "r1Frame", "X_b1_b2", "nrGen", "mu", "X_b1_cf", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O&O!O!id|O!", (char **) keywords, &PyTasksQpContactId_Type, &contactId, _wrap_convert_py2c__std__vector__lt___Eigen__Vector3d___gt__, &r1Points_value, &PyEigenMatrix3d_Type, &r1Frame, &PySvaPTransformd_Type, &X_b1_b2, &nrGen, &mu, &PySvaPTransformd_Type, &X_b1_cf)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new tasks::qp::UnilateralContact(*((PyTasksQpContactId *) contactId)->obj, r1Points_value, *((PyEigenMatrix3d *) r1Frame)->obj, *((PySvaPTransformd *) X_b1_b2)->obj, nrGen, mu, (X_b1_cf ? (*((PySvaPTransformd *) X_b1_cf)->obj) : sva::PTransformd::Identity()));
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyTasksQpUnilateralContact__tp_init(PyTasksQpUnilateralContact *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[6] = {0,};
    retval = _wrap_PyTasksQpUnilateralContact__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpUnilateralContact__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyTasksQpUnilateralContact__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    retval = _wrap_PyTasksQpUnilateralContact__tp_init__3(self, args, kwargs, &exceptions[3]);
    if (!exceptions[3]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        return retval;
    }
    retval = _wrap_PyTasksQpUnilateralContact__tp_init__4(self, args, kwargs, &exceptions[4]);
    if (!exceptions[4]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        return retval;
    }
    retval = _wrap_PyTasksQpUnilateralContact__tp_init__5(self, args, kwargs, &exceptions[5]);
    if (!exceptions[5]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        return retval;
    }
    error_list = PyList_New(6);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyList_SET_ITEM(error_list, 3, PyObject_Str(exceptions[3]));
    Py_DECREF(exceptions[3]);
    PyList_SET_ITEM(error_list, 4, PyObject_Str(exceptions[4]));
    Py_DECREF(exceptions[4]);
    PyList_SET_ITEM(error_list, 5, PyObject_Str(exceptions[5]));
    Py_DECREF(exceptions[5]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}



PyObject *
_wrap_PyTasksQpUnilateralContact_nrLambda__0(PyTasksQpUnilateralContact *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    int retval;
    int point;
    const char *keywords[] = {"point", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &point)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    try
    {
        retval = self->obj->sNrLambda(point);
    } catch ( ::std::domain_error const &exc) {
        PyErr_SetString((PyObject *) Py___std__domain_error_Type, exc.what());
        return NULL;
    }
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpUnilateralContact_nrLambda__1(PyTasksQpUnilateralContact *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    int retval;
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    try
    {
        retval = self->obj->nrLambda();
    } catch ( ::std::domain_error const &exc) {
        PyErr_SetString((PyObject *) Py___std__domain_error_Type, exc.what());
        return NULL;
    }
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}

PyObject * _wrap_PyTasksQpUnilateralContact_nrLambda(PyTasksQpUnilateralContact *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpUnilateralContact_nrLambda__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpUnilateralContact_nrLambda__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}



PyObject *
_wrap_PyTasksQpUnilateralContact_force__0(PyTasksQpUnilateralContact *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    Eigen::Vector3d retval;
    PyEigenVectorXd *lambda;
    int point;
    PyTasksQpFrictionCone *c;
    const char *keywords[] = {"lambda", "point", "c", NULL};
    PyEigenVector3d *py_Vector3d;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!iO!", (char **) keywords, &PyEigenVectorXd_Type, &lambda, &point, &PyTasksQpFrictionCone_Type, &c)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    try
    {
        retval = self->obj->sForce(*((PyEigenVectorXd *) lambda)->obj, point, *((PyTasksQpFrictionCone *) c)->obj);
    } catch ( ::std::domain_error const &exc) {
        PyErr_SetString((PyObject *) Py___std__domain_error_Type, exc.what());
        return NULL;
    }
    py_Vector3d = PyObject_New(PyEigenVector3d, &PyEigenVector3d_Type);
    py_Vector3d->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Vector3d->obj = new Eigen::Vector3d(retval);
    py_retval = Py_BuildValue((char *) "N", py_Vector3d);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpUnilateralContact_force__1(PyTasksQpUnilateralContact *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    Eigen::Vector3d retval;
    PyEigenVectorXd *lambda;
    PyTasksQpFrictionCone *c;
    const char *keywords[] = {"lambda", "c", NULL};
    PyEigenVector3d *py_Vector3d;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyEigenVectorXd_Type, &lambda, &PyTasksQpFrictionCone_Type, &c)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    try
    {
        retval = self->obj->sForce(*((PyEigenVectorXd *) lambda)->obj, *((PyTasksQpFrictionCone *) c)->obj);
    } catch ( ::std::domain_error const &exc) {
        PyErr_SetString((PyObject *) Py___std__domain_error_Type, exc.what());
        return NULL;
    }
    py_Vector3d = PyObject_New(PyEigenVector3d, &PyEigenVector3d_Type);
    py_Vector3d->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Vector3d->obj = new Eigen::Vector3d(retval);
    py_retval = Py_BuildValue((char *) "N", py_Vector3d);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpUnilateralContact_force__2(PyTasksQpUnilateralContact *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    sva::ForceVecd retval;
    PyEigenVectorXd *lambda;
    std::vector<Eigen::Vector3d> r_b_pi_value;
    PyTasksQpFrictionCone *c_b;
    const char *keywords[] = {"lambda", "r_b_pi", "c_b", NULL};
    PySvaForceVecd *py_ForceVecd;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O&O!", (char **) keywords, &PyEigenVectorXd_Type, &lambda, _wrap_convert_py2c__std__vector__lt___Eigen__Vector3d___gt__, &r_b_pi_value, &PyTasksQpFrictionCone_Type, &c_b)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    try
    {
        retval = self->obj->sForce(*((PyEigenVectorXd *) lambda)->obj, r_b_pi_value, *((PyTasksQpFrictionCone *) c_b)->obj);
    } catch ( ::std::domain_error const &exc) {
        PyErr_SetString((PyObject *) Py___std__domain_error_Type, exc.what());
        return NULL;
    }
    py_ForceVecd = PyObject_New(PySvaForceVecd, &PySvaForceVecd_Type);
    py_ForceVecd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_ForceVecd->obj = new sva::ForceVecd(retval);
    py_retval = Py_BuildValue((char *) "N", py_ForceVecd);
    return py_retval;
}

PyObject * _wrap_PyTasksQpUnilateralContact_force(PyTasksQpUnilateralContact *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyTasksQpUnilateralContact_force__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpUnilateralContact_force__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyTasksQpUnilateralContact_force__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


static PyObject*
_wrap_PyTasksQpUnilateralContact__copy__(PyTasksQpUnilateralContact *self)
{

    PyTasksQpUnilateralContact *py_copy;
    py_copy = PyObject_New(PyTasksQpUnilateralContact, &PyTasksQpUnilateralContact_Type);
    py_copy->obj = new tasks::qp::UnilateralContact(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return (PyObject*) py_copy;
}

static PyMethodDef PyTasksQpUnilateralContact_methods[] = {
    {(char *) "nrLambda", (PyCFunction) _wrap_PyTasksQpUnilateralContact_nrLambda, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "force", (PyCFunction) _wrap_PyTasksQpUnilateralContact_force, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyTasksQpUnilateralContact__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpUnilateralContact__tp_dealloc(PyTasksQpUnilateralContact *self)
{
        tasks::qp::UnilateralContact *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpUnilateralContact__tp_richcompare (PyTasksQpUnilateralContact *PYBINDGEN_UNUSED(self), PyTasksQpUnilateralContact *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpUnilateralContact_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpUnilateralContact_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.UnilateralContact",            /* tp_name */
    sizeof(PyTasksQpUnilateralContact),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpUnilateralContact__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpUnilateralContact__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpUnilateralContact_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyTasksQpUnilateralContact__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpUnilateralContact__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



static PyObject* _wrap_PyTasksQpBilateralContact__get_contactId(PyTasksQpBilateralContact *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyTasksQpContactId *py_ContactId;

    py_ContactId = PyObject_New(PyTasksQpContactId, &PyTasksQpContactId_Type);
    py_ContactId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_ContactId->obj = new tasks::qp::ContactId(self->obj->contactId);
    py_retval = Py_BuildValue((char *) "N", py_ContactId);
    return py_retval;
}
static int _wrap_PyTasksQpBilateralContact__set_contactId(PyTasksQpBilateralContact *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyTasksQpContactId *tmp_ContactId;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyTasksQpContactId_Type, &tmp_ContactId)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->contactId = *tmp_ContactId->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyTasksQpBilateralContact__get_r1Points(PyTasksQpBilateralContact *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    Pystd__vector__lt__Eigen__Vector3d__gt__ *py_std__vector__lt__Eigen__Vector3d__gt__;

    py_std__vector__lt__Eigen__Vector3d__gt__ = PyObject_New(Pystd__vector__lt__Eigen__Vector3d__gt__, &Pystd__vector__lt__Eigen__Vector3d__gt___Type);
    py_std__vector__lt__Eigen__Vector3d__gt__->obj = new std::vector<Eigen::Vector3d>(self->obj->r1Points);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt__Eigen__Vector3d__gt__);
    return py_retval;
}
static int _wrap_PyTasksQpBilateralContact__set_r1Points(PyTasksQpBilateralContact *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O&", _wrap_convert_py2c__std__vector__lt___Eigen__Vector3d___gt__, &self->obj->r1Points)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyTasksQpBilateralContact__get_r2Points(PyTasksQpBilateralContact *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    Pystd__vector__lt__Eigen__Vector3d__gt__ *py_std__vector__lt__Eigen__Vector3d__gt__;

    py_std__vector__lt__Eigen__Vector3d__gt__ = PyObject_New(Pystd__vector__lt__Eigen__Vector3d__gt__, &Pystd__vector__lt__Eigen__Vector3d__gt___Type);
    py_std__vector__lt__Eigen__Vector3d__gt__->obj = new std::vector<Eigen::Vector3d>(self->obj->r2Points);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt__Eigen__Vector3d__gt__);
    return py_retval;
}
static int _wrap_PyTasksQpBilateralContact__set_r2Points(PyTasksQpBilateralContact *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O&", _wrap_convert_py2c__std__vector__lt___Eigen__Vector3d___gt__, &self->obj->r2Points)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyTasksQpBilateralContact__get_r1Cones(PyTasksQpBilateralContact *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    Pystd__vector__lt__tasks__qp__FrictionCone__gt__ *py_std__vector__lt__tasks__qp__FrictionCone__gt__;

    py_std__vector__lt__tasks__qp__FrictionCone__gt__ = PyObject_New(Pystd__vector__lt__tasks__qp__FrictionCone__gt__, &Pystd__vector__lt__tasks__qp__FrictionCone__gt___Type);
    py_std__vector__lt__tasks__qp__FrictionCone__gt__->obj = new std::vector<tasks::qp::FrictionCone>(self->obj->r1Cones);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt__tasks__qp__FrictionCone__gt__);
    return py_retval;
}
static int _wrap_PyTasksQpBilateralContact__set_r1Cones(PyTasksQpBilateralContact *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O&", _wrap_convert_py2c__std__vector__lt___tasks__qp__FrictionCone___gt__, &self->obj->r1Cones)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyTasksQpBilateralContact__get_r2Cones(PyTasksQpBilateralContact *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    Pystd__vector__lt__tasks__qp__FrictionCone__gt__ *py_std__vector__lt__tasks__qp__FrictionCone__gt__;

    py_std__vector__lt__tasks__qp__FrictionCone__gt__ = PyObject_New(Pystd__vector__lt__tasks__qp__FrictionCone__gt__, &Pystd__vector__lt__tasks__qp__FrictionCone__gt___Type);
    py_std__vector__lt__tasks__qp__FrictionCone__gt__->obj = new std::vector<tasks::qp::FrictionCone>(self->obj->r2Cones);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt__tasks__qp__FrictionCone__gt__);
    return py_retval;
}
static int _wrap_PyTasksQpBilateralContact__set_r2Cones(PyTasksQpBilateralContact *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O&", _wrap_convert_py2c__std__vector__lt___tasks__qp__FrictionCone___gt__, &self->obj->r2Cones)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyTasksQpBilateralContact__get_X_b1_b2(PyTasksQpBilateralContact *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PySvaPTransformd *py_PTransformd;

    py_PTransformd = PyObject_New(PySvaPTransformd, &PySvaPTransformd_Type);
    py_PTransformd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_PTransformd->obj = new sva::PTransformd(self->obj->X_b1_b2);
    py_retval = Py_BuildValue((char *) "N", py_PTransformd);
    return py_retval;
}
static int _wrap_PyTasksQpBilateralContact__set_X_b1_b2(PyTasksQpBilateralContact *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PySvaPTransformd *tmp_PTransformd;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PySvaPTransformd_Type, &tmp_PTransformd)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->X_b1_b2 = *tmp_PTransformd->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyTasksQpBilateralContact__get_X_b1_cf(PyTasksQpBilateralContact *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PySvaPTransformd *py_PTransformd;

    py_PTransformd = PyObject_New(PySvaPTransformd, &PySvaPTransformd_Type);
    py_PTransformd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_PTransformd->obj = new sva::PTransformd(self->obj->X_b1_cf);
    py_retval = Py_BuildValue((char *) "N", py_PTransformd);
    return py_retval;
}
static int _wrap_PyTasksQpBilateralContact__set_X_b1_cf(PyTasksQpBilateralContact *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PySvaPTransformd *tmp_PTransformd;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PySvaPTransformd_Type, &tmp_PTransformd)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->X_b1_cf = *tmp_PTransformd->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyTasksQpBilateralContact__getsets[] = {
    {
        (char*) "r2Cones", /* attribute name */
        (getter) _wrap_PyTasksQpBilateralContact__get_r2Cones, /* C function to get the attribute */
        (setter) _wrap_PyTasksQpBilateralContact__set_r2Cones, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "X_b1_b2", /* attribute name */
        (getter) _wrap_PyTasksQpBilateralContact__get_X_b1_b2, /* C function to get the attribute */
        (setter) _wrap_PyTasksQpBilateralContact__set_X_b1_b2, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "r2Points", /* attribute name */
        (getter) _wrap_PyTasksQpBilateralContact__get_r2Points, /* C function to get the attribute */
        (setter) _wrap_PyTasksQpBilateralContact__set_r2Points, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "r1Cones", /* attribute name */
        (getter) _wrap_PyTasksQpBilateralContact__get_r1Cones, /* C function to get the attribute */
        (setter) _wrap_PyTasksQpBilateralContact__set_r1Cones, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "X_b1_cf", /* attribute name */
        (getter) _wrap_PyTasksQpBilateralContact__get_X_b1_cf, /* C function to get the attribute */
        (setter) _wrap_PyTasksQpBilateralContact__set_X_b1_cf, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "contactId", /* attribute name */
        (getter) _wrap_PyTasksQpBilateralContact__get_contactId, /* C function to get the attribute */
        (setter) _wrap_PyTasksQpBilateralContact__set_contactId, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "r1Points", /* attribute name */
        (getter) _wrap_PyTasksQpBilateralContact__get_r1Points, /* C function to get the attribute */
        (setter) _wrap_PyTasksQpBilateralContact__set_r1Points, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyTasksQpBilateralContact__tp_init__0(PyTasksQpBilateralContact *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new tasks::qp::BilateralContact();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpBilateralContact__tp_init__1(PyTasksQpBilateralContact *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyTasksQpBilateralContact *ctor_arg;
    const char *keywords[] = {"ctor_arg", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpBilateralContact_Type, &ctor_arg)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new tasks::qp::BilateralContact(*((PyTasksQpBilateralContact *) ctor_arg)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpBilateralContact__tp_init__2(PyTasksQpBilateralContact *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new tasks::qp::BilateralContact();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpBilateralContact__tp_init__3(PyTasksQpBilateralContact *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    int r1Index;
    int r2Index;
    const char *r1BodyName;
    Py_ssize_t r1BodyName_len;
    std::string r1BodyName_std;
    const char *r2BodyName;
    Py_ssize_t r2BodyName_len;
    std::string r2BodyName_std;
    std::vector<Eigen::Vector3d> r1Points_value;
    std::vector<Eigen::Matrix3d> r1Frames_value;
    PySvaPTransformd *X_b1_b2;
    int nrGen;
    double mu;
    PySvaPTransformd *X_b1_cf = NULL;
    const char *keywords[] = {"r1Index", "r2Index", "r1BodyName", "r2BodyName", "r1Points", "r1Frames", "X_b1_b2", "nrGen", "mu", "X_b1_cf", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iis#s#O&O&O!id|O!", (char **) keywords, &r1Index, &r2Index, &r1BodyName, &r1BodyName_len, &r2BodyName, &r2BodyName_len, _wrap_convert_py2c__std__vector__lt___Eigen__Vector3d___gt__, &r1Points_value, _wrap_convert_py2c__std__vector__lt___Eigen__Matrix3d___gt__, &r1Frames_value, &PySvaPTransformd_Type, &X_b1_b2, &nrGen, &mu, &PySvaPTransformd_Type, &X_b1_cf)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    r1BodyName_std = std::string(r1BodyName, r1BodyName_len);
    r2BodyName_std = std::string(r2BodyName, r2BodyName_len);
    self->obj = new tasks::qp::BilateralContact(r1Index, r2Index, r1BodyName_std, r2BodyName_std, r1Points_value, r1Frames_value, *((PySvaPTransformd *) X_b1_b2)->obj, nrGen, mu, (X_b1_cf ? (*((PySvaPTransformd *) X_b1_cf)->obj) : sva::PTransformd::Identity()));
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpBilateralContact__tp_init__4(PyTasksQpBilateralContact *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    int r1Index;
    int r2Index;
    const char *r1BodyName;
    Py_ssize_t r1BodyName_len;
    std::string r1BodyName_std;
    const char *r2BodyName;
    Py_ssize_t r2BodyName_len;
    std::string r2BodyName_std;
    int ambiguityId;
    std::vector<Eigen::Vector3d> r1Points_value;
    std::vector<Eigen::Matrix3d> r1Frames_value;
    PySvaPTransformd *X_b1_b2;
    int nrGen;
    double mu;
    PySvaPTransformd *X_b1_cf = NULL;
    const char *keywords[] = {"r1Index", "r2Index", "r1BodyName", "r2BodyName", "ambiguityId", "r1Points", "r1Frames", "X_b1_b2", "nrGen", "mu", "X_b1_cf", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iis#s#iO&O&O!id|O!", (char **) keywords, &r1Index, &r2Index, &r1BodyName, &r1BodyName_len, &r2BodyName, &r2BodyName_len, &ambiguityId, _wrap_convert_py2c__std__vector__lt___Eigen__Vector3d___gt__, &r1Points_value, _wrap_convert_py2c__std__vector__lt___Eigen__Matrix3d___gt__, &r1Frames_value, &PySvaPTransformd_Type, &X_b1_b2, &nrGen, &mu, &PySvaPTransformd_Type, &X_b1_cf)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    r1BodyName_std = std::string(r1BodyName, r1BodyName_len);
    r2BodyName_std = std::string(r2BodyName, r2BodyName_len);
    self->obj = new tasks::qp::BilateralContact(r1Index, r2Index, r1BodyName_std, r2BodyName_std, ambiguityId, r1Points_value, r1Frames_value, *((PySvaPTransformd *) X_b1_b2)->obj, nrGen, mu, (X_b1_cf ? (*((PySvaPTransformd *) X_b1_cf)->obj) : sva::PTransformd::Identity()));
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpBilateralContact__tp_init__5(PyTasksQpBilateralContact *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyTasksQpContactId *contactId;
    std::vector<Eigen::Vector3d> r1Points_value;
    std::vector<Eigen::Matrix3d> r1Frames_value;
    PySvaPTransformd *X_b1_b2;
    int nrGen;
    double mu;
    PySvaPTransformd *X_b1_cf = NULL;
    const char *keywords[] = {"contactId", "r1Points", "r1Frames", "X_b1_b2", "nrGen", "mu", "X_b1_cf", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O&O&O!id|O!", (char **) keywords, &PyTasksQpContactId_Type, &contactId, _wrap_convert_py2c__std__vector__lt___Eigen__Vector3d___gt__, &r1Points_value, _wrap_convert_py2c__std__vector__lt___Eigen__Matrix3d___gt__, &r1Frames_value, &PySvaPTransformd_Type, &X_b1_b2, &nrGen, &mu, &PySvaPTransformd_Type, &X_b1_cf)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new tasks::qp::BilateralContact(*((PyTasksQpContactId *) contactId)->obj, r1Points_value, r1Frames_value, *((PySvaPTransformd *) X_b1_b2)->obj, nrGen, mu, (X_b1_cf ? (*((PySvaPTransformd *) X_b1_cf)->obj) : sva::PTransformd::Identity()));
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpBilateralContact__tp_init__6(PyTasksQpBilateralContact *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyTasksQpUnilateralContact *uc;
    const char *keywords[] = {"uc", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpUnilateralContact_Type, &uc)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new tasks::qp::BilateralContact(*((PyTasksQpUnilateralContact *) uc)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyTasksQpBilateralContact__tp_init(PyTasksQpBilateralContact *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[7] = {0,};
    retval = _wrap_PyTasksQpBilateralContact__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpBilateralContact__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyTasksQpBilateralContact__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    retval = _wrap_PyTasksQpBilateralContact__tp_init__3(self, args, kwargs, &exceptions[3]);
    if (!exceptions[3]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        return retval;
    }
    retval = _wrap_PyTasksQpBilateralContact__tp_init__4(self, args, kwargs, &exceptions[4]);
    if (!exceptions[4]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        return retval;
    }
    retval = _wrap_PyTasksQpBilateralContact__tp_init__5(self, args, kwargs, &exceptions[5]);
    if (!exceptions[5]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        return retval;
    }
    retval = _wrap_PyTasksQpBilateralContact__tp_init__6(self, args, kwargs, &exceptions[6]);
    if (!exceptions[6]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        return retval;
    }
    error_list = PyList_New(7);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyList_SET_ITEM(error_list, 3, PyObject_Str(exceptions[3]));
    Py_DECREF(exceptions[3]);
    PyList_SET_ITEM(error_list, 4, PyObject_Str(exceptions[4]));
    Py_DECREF(exceptions[4]);
    PyList_SET_ITEM(error_list, 5, PyObject_Str(exceptions[5]));
    Py_DECREF(exceptions[5]);
    PyList_SET_ITEM(error_list, 6, PyObject_Str(exceptions[6]));
    Py_DECREF(exceptions[6]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}



PyObject *
_wrap_PyTasksQpBilateralContact_nrLambda__0(PyTasksQpBilateralContact *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    int retval;
    int point;
    const char *keywords[] = {"point", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &point)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    try
    {
        retval = self->obj->sNrLambda(point);
    } catch ( ::std::domain_error const &exc) {
        PyErr_SetString((PyObject *) Py___std__domain_error_Type, exc.what());
        return NULL;
    }
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpBilateralContact_nrLambda__1(PyTasksQpBilateralContact *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    int retval;
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    try
    {
        retval = self->obj->nrLambda();
    } catch ( ::std::domain_error const &exc) {
        PyErr_SetString((PyObject *) Py___std__domain_error_Type, exc.what());
        return NULL;
    }
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}

PyObject * _wrap_PyTasksQpBilateralContact_nrLambda(PyTasksQpBilateralContact *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpBilateralContact_nrLambda__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpBilateralContact_nrLambda__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}



PyObject *
_wrap_PyTasksQpBilateralContact_force__0(PyTasksQpBilateralContact *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    Eigen::Vector3d retval;
    PyEigenVectorXd *lambda;
    int point;
    std::vector<tasks::qp::FrictionCone> c_value;
    const char *keywords[] = {"lambda", "point", "c", NULL};
    PyEigenVector3d *py_Vector3d;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!iO&", (char **) keywords, &PyEigenVectorXd_Type, &lambda, &point, _wrap_convert_py2c__std__vector__lt___tasks__qp__FrictionCone___gt__, &c_value)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    try
    {
        retval = self->obj->sForce(*((PyEigenVectorXd *) lambda)->obj, point, c_value);
    } catch ( ::std::domain_error const &exc) {
        PyErr_SetString((PyObject *) Py___std__domain_error_Type, exc.what());
        return NULL;
    }
    py_Vector3d = PyObject_New(PyEigenVector3d, &PyEigenVector3d_Type);
    py_Vector3d->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Vector3d->obj = new Eigen::Vector3d(retval);
    py_retval = Py_BuildValue((char *) "N", py_Vector3d);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpBilateralContact_force__1(PyTasksQpBilateralContact *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    Eigen::Vector3d retval;
    PyEigenVectorXd *lambda;
    std::vector<tasks::qp::FrictionCone> c_value;
    const char *keywords[] = {"lambda", "c", NULL};
    PyEigenVector3d *py_Vector3d;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O&", (char **) keywords, &PyEigenVectorXd_Type, &lambda, _wrap_convert_py2c__std__vector__lt___tasks__qp__FrictionCone___gt__, &c_value)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    try
    {
        retval = self->obj->sForce(*((PyEigenVectorXd *) lambda)->obj, c_value);
    } catch ( ::std::domain_error const &exc) {
        PyErr_SetString((PyObject *) Py___std__domain_error_Type, exc.what());
        return NULL;
    }
    py_Vector3d = PyObject_New(PyEigenVector3d, &PyEigenVector3d_Type);
    py_Vector3d->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Vector3d->obj = new Eigen::Vector3d(retval);
    py_retval = Py_BuildValue((char *) "N", py_Vector3d);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpBilateralContact_force__2(PyTasksQpBilateralContact *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    sva::ForceVecd retval;
    PyEigenVectorXd *lambda;
    std::vector<Eigen::Vector3d> r_b_pi_value;
    std::vector<tasks::qp::FrictionCone> c_pi_b_value;
    const char *keywords[] = {"lambda", "r_b_pi", "c_pi_b", NULL};
    PySvaForceVecd *py_ForceVecd;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O&O&", (char **) keywords, &PyEigenVectorXd_Type, &lambda, _wrap_convert_py2c__std__vector__lt___Eigen__Vector3d___gt__, &r_b_pi_value, _wrap_convert_py2c__std__vector__lt___tasks__qp__FrictionCone___gt__, &c_pi_b_value)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    try
    {
        retval = self->obj->sForce(*((PyEigenVectorXd *) lambda)->obj, r_b_pi_value, c_pi_b_value);
    } catch ( ::std::domain_error const &exc) {
        PyErr_SetString((PyObject *) Py___std__domain_error_Type, exc.what());
        return NULL;
    }
    py_ForceVecd = PyObject_New(PySvaForceVecd, &PySvaForceVecd_Type);
    py_ForceVecd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_ForceVecd->obj = new sva::ForceVecd(retval);
    py_retval = Py_BuildValue((char *) "N", py_ForceVecd);
    return py_retval;
}

PyObject * _wrap_PyTasksQpBilateralContact_force(PyTasksQpBilateralContact *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyTasksQpBilateralContact_force__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpBilateralContact_force__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyTasksQpBilateralContact_force__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


static PyObject*
_wrap_PyTasksQpBilateralContact__copy__(PyTasksQpBilateralContact *self)
{

    PyTasksQpBilateralContact *py_copy;
    py_copy = PyObject_New(PyTasksQpBilateralContact, &PyTasksQpBilateralContact_Type);
    py_copy->obj = new tasks::qp::BilateralContact(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return (PyObject*) py_copy;
}

static PyMethodDef PyTasksQpBilateralContact_methods[] = {
    {(char *) "nrLambda", (PyCFunction) _wrap_PyTasksQpBilateralContact_nrLambda, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "force", (PyCFunction) _wrap_PyTasksQpBilateralContact_force, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyTasksQpBilateralContact__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpBilateralContact__tp_dealloc(PyTasksQpBilateralContact *self)
{
        tasks::qp::BilateralContact *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpBilateralContact__tp_richcompare (PyTasksQpBilateralContact *PYBINDGEN_UNUSED(self), PyTasksQpBilateralContact *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpBilateralContact_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpBilateralContact_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.BilateralContact",            /* tp_name */
    sizeof(PyTasksQpBilateralContact),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpBilateralContact__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpBilateralContact__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpBilateralContact_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyTasksQpBilateralContact__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpBilateralContact__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



static PyObject* _wrap_PyTasksQpJointStiffness__get_jointName(PyTasksQpJointStiffness *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "s#", (self->obj->jointName).c_str(), (self->obj->jointName).size());
    return py_retval;
}
static int _wrap_PyTasksQpJointStiffness__set_jointName(PyTasksQpJointStiffness *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    const char *retval_ptr;
    Py_ssize_t retval_len;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "s#", &retval_ptr, &retval_len)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->jointName = std::string(retval_ptr, retval_len);
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyTasksQpJointStiffness__get_stiffness(PyTasksQpJointStiffness *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "d", self->obj->stiffness);
    return py_retval;
}
static int _wrap_PyTasksQpJointStiffness__set_stiffness(PyTasksQpJointStiffness *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &self->obj->stiffness)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyTasksQpJointStiffness__getsets[] = {
    {
        (char*) "jointName", /* attribute name */
        (getter) _wrap_PyTasksQpJointStiffness__get_jointName, /* C function to get the attribute */
        (setter) _wrap_PyTasksQpJointStiffness__set_jointName, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "stiffness", /* attribute name */
        (getter) _wrap_PyTasksQpJointStiffness__get_stiffness, /* C function to get the attribute */
        (setter) _wrap_PyTasksQpJointStiffness__set_stiffness, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyTasksQpJointStiffness__tp_init__0(PyTasksQpJointStiffness *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new tasks::qp::JointStiffness();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpJointStiffness__tp_init__1(PyTasksQpJointStiffness *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyTasksQpJointStiffness *ctor_arg;
    const char *keywords[] = {"ctor_arg", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpJointStiffness_Type, &ctor_arg)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new tasks::qp::JointStiffness(*((PyTasksQpJointStiffness *) ctor_arg)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpJointStiffness__tp_init__2(PyTasksQpJointStiffness *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new tasks::qp::JointStiffness();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpJointStiffness__tp_init__3(PyTasksQpJointStiffness *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *jointName;
    Py_ssize_t jointName_len;
    std::string jointName_std;
    double stiffness;
    const char *keywords[] = {"jointName", "stiffness", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#d", (char **) keywords, &jointName, &jointName_len, &stiffness)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    jointName_std = std::string(jointName, jointName_len);
    self->obj = new tasks::qp::JointStiffness(jointName_std, stiffness);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyTasksQpJointStiffness__tp_init(PyTasksQpJointStiffness *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[4] = {0,};
    retval = _wrap_PyTasksQpJointStiffness__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpJointStiffness__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyTasksQpJointStiffness__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    retval = _wrap_PyTasksQpJointStiffness__tp_init__3(self, args, kwargs, &exceptions[3]);
    if (!exceptions[3]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        return retval;
    }
    error_list = PyList_New(4);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyList_SET_ITEM(error_list, 3, PyObject_Str(exceptions[3]));
    Py_DECREF(exceptions[3]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyTasksQpJointStiffness__copy__(PyTasksQpJointStiffness *self)
{

    PyTasksQpJointStiffness *py_copy;
    py_copy = PyObject_New(PyTasksQpJointStiffness, &PyTasksQpJointStiffness_Type);
    py_copy->obj = new tasks::qp::JointStiffness(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return (PyObject*) py_copy;
}

static PyMethodDef PyTasksQpJointStiffness_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyTasksQpJointStiffness__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpJointStiffness__tp_dealloc(PyTasksQpJointStiffness *self)
{
        tasks::qp::JointStiffness *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpJointStiffness__tp_richcompare (PyTasksQpJointStiffness *PYBINDGEN_UNUSED(self), PyTasksQpJointStiffness *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpJointStiffness_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpJointStiffness_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.JointStiffness",            /* tp_name */
    sizeof(PyTasksQpJointStiffness),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpJointStiffness__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpJointStiffness__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpJointStiffness_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyTasksQpJointStiffness__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpJointStiffness__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



static PyObject* _wrap_PyTasksQpJointGains__get_jointName(PyTasksQpJointGains *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "s#", (self->obj->jointName).c_str(), (self->obj->jointName).size());
    return py_retval;
}
static int _wrap_PyTasksQpJointGains__set_jointName(PyTasksQpJointGains *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    const char *retval_ptr;
    Py_ssize_t retval_len;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "s#", &retval_ptr, &retval_len)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->jointName = std::string(retval_ptr, retval_len);
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyTasksQpJointGains__get_stiffness(PyTasksQpJointGains *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "d", self->obj->stiffness);
    return py_retval;
}
static int _wrap_PyTasksQpJointGains__set_stiffness(PyTasksQpJointGains *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &self->obj->stiffness)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyTasksQpJointGains__get_damping(PyTasksQpJointGains *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "d", self->obj->damping);
    return py_retval;
}
static int _wrap_PyTasksQpJointGains__set_damping(PyTasksQpJointGains *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &self->obj->damping)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyTasksQpJointGains__getsets[] = {
    {
        (char*) "jointName", /* attribute name */
        (getter) _wrap_PyTasksQpJointGains__get_jointName, /* C function to get the attribute */
        (setter) _wrap_PyTasksQpJointGains__set_jointName, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "damping", /* attribute name */
        (getter) _wrap_PyTasksQpJointGains__get_damping, /* C function to get the attribute */
        (setter) _wrap_PyTasksQpJointGains__set_damping, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "stiffness", /* attribute name */
        (getter) _wrap_PyTasksQpJointGains__get_stiffness, /* C function to get the attribute */
        (setter) _wrap_PyTasksQpJointGains__set_stiffness, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyTasksQpJointGains__tp_init__0(PyTasksQpJointGains *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new tasks::qp::JointGains();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpJointGains__tp_init__1(PyTasksQpJointGains *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyTasksQpJointGains *ctor_arg;
    const char *keywords[] = {"ctor_arg", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpJointGains_Type, &ctor_arg)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new tasks::qp::JointGains(*((PyTasksQpJointGains *) ctor_arg)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpJointGains__tp_init__2(PyTasksQpJointGains *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new tasks::qp::JointGains();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpJointGains__tp_init__3(PyTasksQpJointGains *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *jointName;
    Py_ssize_t jointName_len;
    std::string jointName_std;
    double stiffness;
    const char *keywords[] = {"jointName", "stiffness", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#d", (char **) keywords, &jointName, &jointName_len, &stiffness)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    jointName_std = std::string(jointName, jointName_len);
    self->obj = new tasks::qp::JointGains(jointName_std, stiffness);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpJointGains__tp_init__4(PyTasksQpJointGains *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *jointName;
    Py_ssize_t jointName_len;
    std::string jointName_std;
    double stiffness;
    double damping;
    const char *keywords[] = {"jointName", "stiffness", "damping", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#dd", (char **) keywords, &jointName, &jointName_len, &stiffness, &damping)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    jointName_std = std::string(jointName, jointName_len);
    self->obj = new tasks::qp::JointGains(jointName_std, stiffness, damping);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyTasksQpJointGains__tp_init(PyTasksQpJointGains *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[5] = {0,};
    retval = _wrap_PyTasksQpJointGains__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpJointGains__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyTasksQpJointGains__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    retval = _wrap_PyTasksQpJointGains__tp_init__3(self, args, kwargs, &exceptions[3]);
    if (!exceptions[3]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        return retval;
    }
    retval = _wrap_PyTasksQpJointGains__tp_init__4(self, args, kwargs, &exceptions[4]);
    if (!exceptions[4]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        return retval;
    }
    error_list = PyList_New(5);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyList_SET_ITEM(error_list, 3, PyObject_Str(exceptions[3]));
    Py_DECREF(exceptions[3]);
    PyList_SET_ITEM(error_list, 4, PyObject_Str(exceptions[4]));
    Py_DECREF(exceptions[4]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyTasksQpJointGains__copy__(PyTasksQpJointGains *self)
{

    PyTasksQpJointGains *py_copy;
    py_copy = PyObject_New(PyTasksQpJointGains, &PyTasksQpJointGains_Type);
    py_copy->obj = new tasks::qp::JointGains(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return (PyObject*) py_copy;
}

static PyMethodDef PyTasksQpJointGains_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyTasksQpJointGains__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpJointGains__tp_dealloc(PyTasksQpJointGains *self)
{
        tasks::qp::JointGains *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpJointGains__tp_richcompare (PyTasksQpJointGains *PYBINDGEN_UNUSED(self), PyTasksQpJointGains *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpJointGains_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpJointGains_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.JointGains",            /* tp_name */
    sizeof(PyTasksQpJointGains),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpJointGains__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpJointGains__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpJointGains_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyTasksQpJointGains__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpJointGains__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



static PyObject* _wrap_PyTasksQpSpringJoint__get_jointName(PyTasksQpSpringJoint *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "s#", (self->obj->jointName).c_str(), (self->obj->jointName).size());
    return py_retval;
}
static int _wrap_PyTasksQpSpringJoint__set_jointName(PyTasksQpSpringJoint *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    const char *retval_ptr;
    Py_ssize_t retval_len;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "s#", &retval_ptr, &retval_len)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->jointName = std::string(retval_ptr, retval_len);
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyTasksQpSpringJoint__get_K(PyTasksQpSpringJoint *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "d", self->obj->K);
    return py_retval;
}
static int _wrap_PyTasksQpSpringJoint__set_K(PyTasksQpSpringJoint *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &self->obj->K)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyTasksQpSpringJoint__get_C(PyTasksQpSpringJoint *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "d", self->obj->C);
    return py_retval;
}
static int _wrap_PyTasksQpSpringJoint__set_C(PyTasksQpSpringJoint *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &self->obj->C)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyTasksQpSpringJoint__get_O(PyTasksQpSpringJoint *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "d", self->obj->O);
    return py_retval;
}
static int _wrap_PyTasksQpSpringJoint__set_O(PyTasksQpSpringJoint *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &self->obj->O)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyTasksQpSpringJoint__getsets[] = {
    {
        (char*) "K", /* attribute name */
        (getter) _wrap_PyTasksQpSpringJoint__get_K, /* C function to get the attribute */
        (setter) _wrap_PyTasksQpSpringJoint__set_K, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "jointName", /* attribute name */
        (getter) _wrap_PyTasksQpSpringJoint__get_jointName, /* C function to get the attribute */
        (setter) _wrap_PyTasksQpSpringJoint__set_jointName, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "C", /* attribute name */
        (getter) _wrap_PyTasksQpSpringJoint__get_C, /* C function to get the attribute */
        (setter) _wrap_PyTasksQpSpringJoint__set_C, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "O", /* attribute name */
        (getter) _wrap_PyTasksQpSpringJoint__get_O, /* C function to get the attribute */
        (setter) _wrap_PyTasksQpSpringJoint__set_O, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyTasksQpSpringJoint__tp_init__0(PyTasksQpSpringJoint *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new tasks::qp::SpringJoint();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpSpringJoint__tp_init__1(PyTasksQpSpringJoint *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyTasksQpSpringJoint *ctor_arg;
    const char *keywords[] = {"ctor_arg", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpSpringJoint_Type, &ctor_arg)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new tasks::qp::SpringJoint(*((PyTasksQpSpringJoint *) ctor_arg)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpSpringJoint__tp_init__2(PyTasksQpSpringJoint *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new tasks::qp::SpringJoint();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpSpringJoint__tp_init__3(PyTasksQpSpringJoint *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *jointName;
    Py_ssize_t jointName_len;
    std::string jointName_std;
    double K;
    double C;
    double O;
    const char *keywords[] = {"jointName", "K", "C", "O", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#ddd", (char **) keywords, &jointName, &jointName_len, &K, &C, &O)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    jointName_std = std::string(jointName, jointName_len);
    self->obj = new tasks::qp::SpringJoint(jointName_std, K, C, O);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyTasksQpSpringJoint__tp_init(PyTasksQpSpringJoint *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[4] = {0,};
    retval = _wrap_PyTasksQpSpringJoint__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpSpringJoint__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyTasksQpSpringJoint__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    retval = _wrap_PyTasksQpSpringJoint__tp_init__3(self, args, kwargs, &exceptions[3]);
    if (!exceptions[3]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        return retval;
    }
    error_list = PyList_New(4);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyList_SET_ITEM(error_list, 3, PyObject_Str(exceptions[3]));
    Py_DECREF(exceptions[3]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyTasksQpSpringJoint__copy__(PyTasksQpSpringJoint *self)
{

    PyTasksQpSpringJoint *py_copy;
    py_copy = PyObject_New(PyTasksQpSpringJoint, &PyTasksQpSpringJoint_Type);
    py_copy->obj = new tasks::qp::SpringJoint(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return (PyObject*) py_copy;
}

static PyMethodDef PyTasksQpSpringJoint_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyTasksQpSpringJoint__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpSpringJoint__tp_dealloc(PyTasksQpSpringJoint *self)
{
        tasks::qp::SpringJoint *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpSpringJoint__tp_richcompare (PyTasksQpSpringJoint *PYBINDGEN_UNUSED(self), PyTasksQpSpringJoint *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpSpringJoint_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpSpringJoint_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.SpringJoint",            /* tp_name */
    sizeof(PyTasksQpSpringJoint),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpSpringJoint__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpSpringJoint__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpSpringJoint_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyTasksQpSpringJoint__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpSpringJoint__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyTasksQpConstraint__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'Constraint' cannot be constructed ()");
    return -1;
}


PyObject *
_wrap_PyTasksQpConstraint_updateNrVars(PyTasksQpConstraint *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mb_value;
    PyTasksQpSolverData *data;
    const char *keywords[] = {"mb", "data", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mb_value, &PyTasksQpSolverData_Type, &data)) {
        return NULL;
    }
    self->obj->updateNrVars(mb_value, *((PyTasksQpSolverData *) data)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksQpConstraint_update(PyTasksQpConstraint *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mb_value;
    std::vector<rbd::MultiBodyConfig> mbc_value;
    PyTasksQpSolverData *data;
    const char *keywords[] = {"mb", "mbc", "data", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mb_value, _wrap_convert_py2c__std__vector__lt___rbd__MultiBodyConfig___gt__, &mbc_value, &PyTasksQpSolverData_Type, &data)) {
        return NULL;
    }
    self->obj->update(mb_value, mbc_value, *((PyTasksQpSolverData *) data)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyTasksQpConstraint_methods[] = {
    {(char *) "updateNrVars", (PyCFunction) _wrap_PyTasksQpConstraint_updateNrVars, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "update", (PyCFunction) _wrap_PyTasksQpConstraint_update, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpConstraint__tp_dealloc(PyTasksQpConstraint *self)
{
        tasks::qp::Constraint *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpConstraint__tp_richcompare (PyTasksQpConstraint *PYBINDGEN_UNUSED(self), PyTasksQpConstraint *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpConstraint_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpConstraint_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.Constraint",            /* tp_name */
    sizeof(PyTasksQpConstraint),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpConstraint__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpConstraint__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpConstraint_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpConstraint__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyTasksQpEquality__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'Equality' cannot be constructed ()");
    return -1;
}


PyObject *
_wrap_PyTasksQpEquality_AEq(PyTasksQpEquality *self)
{
    PyObject *py_retval;
    PyEigenMatrixXd *py_MatrixXd;

    Eigen::MatrixXd retval = self->obj->AEq();
    py_MatrixXd = PyObject_New(PyEigenMatrixXd, &PyEigenMatrixXd_Type);
    py_MatrixXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MatrixXd->obj = new Eigen::MatrixXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_MatrixXd);
    return py_retval;
}


PyObject *
_wrap_PyTasksQpEquality_nrEq(PyTasksQpEquality *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->nrEq();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyTasksQpEquality_bEq(PyTasksQpEquality *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd retval = self->obj->bEq();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}


PyObject *
_wrap_PyTasksQpEquality_maxEq(PyTasksQpEquality *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->maxEq();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}

static PyMethodDef PyTasksQpEquality_methods[] = {
    {(char *) "AEq", (PyCFunction) _wrap_PyTasksQpEquality_AEq, METH_NOARGS, NULL },
    {(char *) "nrEq", (PyCFunction) _wrap_PyTasksQpEquality_nrEq, METH_NOARGS, NULL },
    {(char *) "bEq", (PyCFunction) _wrap_PyTasksQpEquality_bEq, METH_NOARGS, NULL },
    {(char *) "maxEq", (PyCFunction) _wrap_PyTasksQpEquality_maxEq, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpEquality__tp_dealloc(PyTasksQpEquality *self)
{
        tasks::qp::Equality *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpEquality__tp_richcompare (PyTasksQpEquality *PYBINDGEN_UNUSED(self), PyTasksQpEquality *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpEquality_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpEquality_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.Equality",            /* tp_name */
    sizeof(PyTasksQpEquality),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpEquality__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpEquality__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpEquality_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpEquality__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyTasksQpInequality__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'Inequality' cannot be constructed ()");
    return -1;
}


PyObject *
_wrap_PyTasksQpInequality_bInEq(PyTasksQpInequality *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd retval = self->obj->bInEq();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}


PyObject *
_wrap_PyTasksQpInequality_nrInEq(PyTasksQpInequality *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->nrInEq();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyTasksQpInequality_maxInEq(PyTasksQpInequality *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->maxInEq();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyTasksQpInequality_AInEq(PyTasksQpInequality *self)
{
    PyObject *py_retval;
    PyEigenMatrixXd *py_MatrixXd;

    Eigen::MatrixXd retval = self->obj->AInEq();
    py_MatrixXd = PyObject_New(PyEigenMatrixXd, &PyEigenMatrixXd_Type);
    py_MatrixXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MatrixXd->obj = new Eigen::MatrixXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_MatrixXd);
    return py_retval;
}

static PyMethodDef PyTasksQpInequality_methods[] = {
    {(char *) "bInEq", (PyCFunction) _wrap_PyTasksQpInequality_bInEq, METH_NOARGS, NULL },
    {(char *) "nrInEq", (PyCFunction) _wrap_PyTasksQpInequality_nrInEq, METH_NOARGS, NULL },
    {(char *) "maxInEq", (PyCFunction) _wrap_PyTasksQpInequality_maxInEq, METH_NOARGS, NULL },
    {(char *) "AInEq", (PyCFunction) _wrap_PyTasksQpInequality_AInEq, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpInequality__tp_dealloc(PyTasksQpInequality *self)
{
        tasks::qp::Inequality *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpInequality__tp_richcompare (PyTasksQpInequality *PYBINDGEN_UNUSED(self), PyTasksQpInequality *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpInequality_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpInequality_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.Inequality",            /* tp_name */
    sizeof(PyTasksQpInequality),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpInequality__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpInequality__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpInequality_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpInequality__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyTasksQpGenInequality__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'GenInequality' cannot be constructed ()");
    return -1;
}


PyObject *
_wrap_PyTasksQpGenInequality_nrGenInEq(PyTasksQpGenInequality *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->nrGenInEq();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyTasksQpGenInequality_maxGenInEq(PyTasksQpGenInequality *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->maxGenInEq();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyTasksQpGenInequality_AGenInEq(PyTasksQpGenInequality *self)
{
    PyObject *py_retval;
    PyEigenMatrixXd *py_MatrixXd;

    Eigen::MatrixXd retval = self->obj->AGenInEq();
    py_MatrixXd = PyObject_New(PyEigenMatrixXd, &PyEigenMatrixXd_Type);
    py_MatrixXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MatrixXd->obj = new Eigen::MatrixXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_MatrixXd);
    return py_retval;
}


PyObject *
_wrap_PyTasksQpGenInequality_LowerGenInEq(PyTasksQpGenInequality *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd retval = self->obj->LowerGenInEq();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}


PyObject *
_wrap_PyTasksQpGenInequality_UpperGenInEq(PyTasksQpGenInequality *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd retval = self->obj->UpperGenInEq();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}

static PyMethodDef PyTasksQpGenInequality_methods[] = {
    {(char *) "nrGenInEq", (PyCFunction) _wrap_PyTasksQpGenInequality_nrGenInEq, METH_NOARGS, NULL },
    {(char *) "maxGenInEq", (PyCFunction) _wrap_PyTasksQpGenInequality_maxGenInEq, METH_NOARGS, NULL },
    {(char *) "AGenInEq", (PyCFunction) _wrap_PyTasksQpGenInequality_AGenInEq, METH_NOARGS, NULL },
    {(char *) "LowerGenInEq", (PyCFunction) _wrap_PyTasksQpGenInequality_LowerGenInEq, METH_NOARGS, NULL },
    {(char *) "UpperGenInEq", (PyCFunction) _wrap_PyTasksQpGenInequality_UpperGenInEq, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpGenInequality__tp_dealloc(PyTasksQpGenInequality *self)
{
        tasks::qp::GenInequality *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpGenInequality__tp_richcompare (PyTasksQpGenInequality *PYBINDGEN_UNUSED(self), PyTasksQpGenInequality *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpGenInequality_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpGenInequality_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.GenInequality",            /* tp_name */
    sizeof(PyTasksQpGenInequality),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpGenInequality__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpGenInequality__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpGenInequality_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpGenInequality__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyTasksQpBound__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'Bound' cannot be constructed ()");
    return -1;
}


PyObject *
_wrap_PyTasksQpBound_Upper(PyTasksQpBound *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd retval = self->obj->Upper();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}


PyObject *
_wrap_PyTasksQpBound_beginVar(PyTasksQpBound *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->beginVar();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyTasksQpBound_Lower(PyTasksQpBound *self)
{
    PyObject *py_retval;
    PyEigenMatrixXd *py_MatrixXd;

    Eigen::MatrixXd retval = self->obj->Lower();
    py_MatrixXd = PyObject_New(PyEigenMatrixXd, &PyEigenMatrixXd_Type);
    py_MatrixXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MatrixXd->obj = new Eigen::MatrixXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_MatrixXd);
    return py_retval;
}

static PyMethodDef PyTasksQpBound_methods[] = {
    {(char *) "Upper", (PyCFunction) _wrap_PyTasksQpBound_Upper, METH_NOARGS, NULL },
    {(char *) "beginVar", (PyCFunction) _wrap_PyTasksQpBound_beginVar, METH_NOARGS, NULL },
    {(char *) "Lower", (PyCFunction) _wrap_PyTasksQpBound_Lower, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpBound__tp_dealloc(PyTasksQpBound *self)
{
        tasks::qp::Bound *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpBound__tp_richcompare (PyTasksQpBound *PYBINDGEN_UNUSED(self), PyTasksQpBound *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpBound_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpBound_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.Bound",            /* tp_name */
    sizeof(PyTasksQpBound),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpBound__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpBound__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpBound_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpBound__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyTasksQpTask__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'Task' cannot be constructed ()");
    return -1;
}



PyObject *
_wrap_PyTasksQpTask_weight__0(PyTasksQpTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    double retval;
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->weight();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpTask_weight__1(PyTasksQpTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    double weight;
    const char *keywords[] = {"weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->weight(weight);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyTasksQpTask_weight(PyTasksQpTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpTask_weight__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpTask_weight__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}

static PyMethodDef PyTasksQpTask_methods[] = {
    {(char *) "weight", (PyCFunction) _wrap_PyTasksQpTask_weight, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpTask__tp_dealloc(PyTasksQpTask *self)
{
        tasks::qp::Task *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpTask__tp_richcompare (PyTasksQpTask *PYBINDGEN_UNUSED(self), PyTasksQpTask *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpTask_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpTask_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.Task",            /* tp_name */
    sizeof(PyTasksQpTask),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpTask__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpTask__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpTask_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpTask__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyTasksQpHighLevelTask__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'HighLevelTask' cannot be constructed ()");
    return -1;
}


PyObject *
_wrap_PyTasksQpHighLevelTask_dim(PyTasksQpHighLevelTask *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->dim();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyTasksQpHighLevelTask_normalAcc(PyTasksQpHighLevelTask *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd retval = self->obj->normalAcc();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}


PyObject *
_wrap_PyTasksQpHighLevelTask_update(PyTasksQpHighLevelTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mb_value;
    std::vector<rbd::MultiBodyConfig> mbc_value;
    PyTasksQpSolverData *data;
    const char *keywords[] = {"mb", "mbc", "data", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mb_value, _wrap_convert_py2c__std__vector__lt___rbd__MultiBodyConfig___gt__, &mbc_value, &PyTasksQpSolverData_Type, &data)) {
        return NULL;
    }
    self->obj->update(mb_value, mbc_value, *((PyTasksQpSolverData *) data)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksQpHighLevelTask_eval(PyTasksQpHighLevelTask *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd retval = self->obj->eval();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}


PyObject *
_wrap_PyTasksQpHighLevelTask_speed(PyTasksQpHighLevelTask *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd retval = self->obj->speed();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}


PyObject *
_wrap_PyTasksQpHighLevelTask_jac(PyTasksQpHighLevelTask *self)
{
    PyObject *py_retval;
    PyEigenMatrixXd *py_MatrixXd;

    Eigen::MatrixXd retval = self->obj->jac();
    py_MatrixXd = PyObject_New(PyEigenMatrixXd, &PyEigenMatrixXd_Type);
    py_MatrixXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MatrixXd->obj = new Eigen::MatrixXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_MatrixXd);
    return py_retval;
}

static PyMethodDef PyTasksQpHighLevelTask_methods[] = {
    {(char *) "dim", (PyCFunction) _wrap_PyTasksQpHighLevelTask_dim, METH_NOARGS, NULL },
    {(char *) "normalAcc", (PyCFunction) _wrap_PyTasksQpHighLevelTask_normalAcc, METH_NOARGS, NULL },
    {(char *) "update", (PyCFunction) _wrap_PyTasksQpHighLevelTask_update, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "eval", (PyCFunction) _wrap_PyTasksQpHighLevelTask_eval, METH_NOARGS, NULL },
    {(char *) "speed", (PyCFunction) _wrap_PyTasksQpHighLevelTask_speed, METH_NOARGS, NULL },
    {(char *) "jac", (PyCFunction) _wrap_PyTasksQpHighLevelTask_jac, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpHighLevelTask__tp_dealloc(PyTasksQpHighLevelTask *self)
{
        tasks::qp::HighLevelTask *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpHighLevelTask__tp_richcompare (PyTasksQpHighLevelTask *PYBINDGEN_UNUSED(self), PyTasksQpHighLevelTask *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpHighLevelTask_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpHighLevelTask_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.HighLevelTask",            /* tp_name */
    sizeof(PyTasksQpHighLevelTask),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpHighLevelTask__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpHighLevelTask__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpHighLevelTask_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpHighLevelTask__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyTasksQpSetPointTask__tp_init__0(PyTasksQpSetPointTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpPositionTask *hlTask;
    tasks::qp::PositionTask *hlTask_ptr;
    double stiffness;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "stiffness", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpPositionTask_Type, &hlTask, &stiffness, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::SetPointTask(mbs_value, robotIndex, hlTask_ptr, stiffness, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpSetPointTask__tp_init__1(PyTasksQpSetPointTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpPositionTask *hlTask;
    tasks::qp::PositionTask *hlTask_ptr;
    double stiffness;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "stiffness", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpPositionTask_Type, &hlTask, &stiffness, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::SetPointTask(mbs_value, robotIndex, hlTask_ptr, stiffness, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpSetPointTask__tp_init__2(PyTasksQpSetPointTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpOrientationTask *hlTask;
    tasks::qp::OrientationTask *hlTask_ptr;
    double stiffness;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "stiffness", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpOrientationTask_Type, &hlTask, &stiffness, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::SetPointTask(mbs_value, robotIndex, hlTask_ptr, stiffness, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpSetPointTask__tp_init__3(PyTasksQpSetPointTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpOrientationTask *hlTask;
    tasks::qp::OrientationTask *hlTask_ptr;
    double stiffness;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "stiffness", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpOrientationTask_Type, &hlTask, &stiffness, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::SetPointTask(mbs_value, robotIndex, hlTask_ptr, stiffness, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpSetPointTask__tp_init__4(PyTasksQpSetPointTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpSurfaceOrientationTask *hlTask;
    tasks::qp::SurfaceOrientationTask *hlTask_ptr;
    double stiffness;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "stiffness", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpSurfaceOrientationTask_Type, &hlTask, &stiffness, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::SetPointTask(mbs_value, robotIndex, hlTask_ptr, stiffness, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpSetPointTask__tp_init__5(PyTasksQpSetPointTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpSurfaceOrientationTask *hlTask;
    tasks::qp::SurfaceOrientationTask *hlTask_ptr;
    double stiffness;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "stiffness", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpSurfaceOrientationTask_Type, &hlTask, &stiffness, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::SetPointTask(mbs_value, robotIndex, hlTask_ptr, stiffness, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpSetPointTask__tp_init__6(PyTasksQpSetPointTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpGazeTask *hlTask;
    tasks::qp::GazeTask *hlTask_ptr;
    double stiffness;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "stiffness", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpGazeTask_Type, &hlTask, &stiffness, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::SetPointTask(mbs_value, robotIndex, hlTask_ptr, stiffness, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpSetPointTask__tp_init__7(PyTasksQpSetPointTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpGazeTask *hlTask;
    tasks::qp::GazeTask *hlTask_ptr;
    double stiffness;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "stiffness", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpGazeTask_Type, &hlTask, &stiffness, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::SetPointTask(mbs_value, robotIndex, hlTask_ptr, stiffness, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpSetPointTask__tp_init__8(PyTasksQpSetPointTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpPositionBasedVisServoTask *hlTask;
    tasks::qp::PositionBasedVisServoTask *hlTask_ptr;
    double stiffness;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "stiffness", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpPositionBasedVisServoTask_Type, &hlTask, &stiffness, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::SetPointTask(mbs_value, robotIndex, hlTask_ptr, stiffness, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpSetPointTask__tp_init__9(PyTasksQpSetPointTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpPositionBasedVisServoTask *hlTask;
    tasks::qp::PositionBasedVisServoTask *hlTask_ptr;
    double stiffness;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "stiffness", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpPositionBasedVisServoTask_Type, &hlTask, &stiffness, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::SetPointTask(mbs_value, robotIndex, hlTask_ptr, stiffness, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpSetPointTask__tp_init__10(PyTasksQpSetPointTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpCoMTask *hlTask;
    tasks::qp::CoMTask *hlTask_ptr;
    double stiffness;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "stiffness", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpCoMTask_Type, &hlTask, &stiffness, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::SetPointTask(mbs_value, robotIndex, hlTask_ptr, stiffness, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpSetPointTask__tp_init__11(PyTasksQpSetPointTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpCoMTask *hlTask;
    tasks::qp::CoMTask *hlTask_ptr;
    double stiffness;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "stiffness", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpCoMTask_Type, &hlTask, &stiffness, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::SetPointTask(mbs_value, robotIndex, hlTask_ptr, stiffness, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpSetPointTask__tp_init__12(PyTasksQpSetPointTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpLinVelocityTask *hlTask;
    tasks::qp::LinVelocityTask *hlTask_ptr;
    double stiffness;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "stiffness", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpLinVelocityTask_Type, &hlTask, &stiffness, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::SetPointTask(mbs_value, robotIndex, hlTask_ptr, stiffness, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpSetPointTask__tp_init__13(PyTasksQpSetPointTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpLinVelocityTask *hlTask;
    tasks::qp::LinVelocityTask *hlTask_ptr;
    double stiffness;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "stiffness", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpLinVelocityTask_Type, &hlTask, &stiffness, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::SetPointTask(mbs_value, robotIndex, hlTask_ptr, stiffness, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpSetPointTask__tp_init__14(PyTasksQpSetPointTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpOrientationTrackingTask *hlTask;
    tasks::qp::OrientationTrackingTask *hlTask_ptr;
    double stiffness;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "stiffness", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpOrientationTrackingTask_Type, &hlTask, &stiffness, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::SetPointTask(mbs_value, robotIndex, hlTask_ptr, stiffness, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpSetPointTask__tp_init__15(PyTasksQpSetPointTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpOrientationTrackingTask *hlTask;
    tasks::qp::OrientationTrackingTask *hlTask_ptr;
    double stiffness;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "stiffness", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpOrientationTrackingTask_Type, &hlTask, &stiffness, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::SetPointTask(mbs_value, robotIndex, hlTask_ptr, stiffness, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpSetPointTask__tp_init__16(PyTasksQpSetPointTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpMomentumTask *hlTask;
    tasks::qp::MomentumTask *hlTask_ptr;
    double stiffness;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "stiffness", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpMomentumTask_Type, &hlTask, &stiffness, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::SetPointTask(mbs_value, robotIndex, hlTask_ptr, stiffness, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpSetPointTask__tp_init__17(PyTasksQpSetPointTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpMomentumTask *hlTask;
    tasks::qp::MomentumTask *hlTask_ptr;
    double stiffness;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "stiffness", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpMomentumTask_Type, &hlTask, &stiffness, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::SetPointTask(mbs_value, robotIndex, hlTask_ptr, stiffness, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpSetPointTask__tp_init__18(PyTasksQpSetPointTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpJointsSelector *hlTask;
    tasks::qp::JointsSelector *hlTask_ptr;
    double stiffness;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "stiffness", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpJointsSelector_Type, &hlTask, &stiffness, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::SetPointTask(mbs_value, robotIndex, hlTask_ptr, stiffness, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpSetPointTask__tp_init__19(PyTasksQpSetPointTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpJointsSelector *hlTask;
    tasks::qp::JointsSelector *hlTask_ptr;
    double stiffness;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "stiffness", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpJointsSelector_Type, &hlTask, &stiffness, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::SetPointTask(mbs_value, robotIndex, hlTask_ptr, stiffness, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpSetPointTask__tp_init__20(PyTasksQpSetPointTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpTransformTask *hlTask;
    tasks::qp::TransformTask *hlTask_ptr;
    double stiffness;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "stiffness", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpTransformTask_Type, &hlTask, &stiffness, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::SetPointTask(mbs_value, robotIndex, hlTask_ptr, stiffness, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpSetPointTask__tp_init__21(PyTasksQpSetPointTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpTransformTask *hlTask;
    tasks::qp::TransformTask *hlTask_ptr;
    double stiffness;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "stiffness", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpTransformTask_Type, &hlTask, &stiffness, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::SetPointTask(mbs_value, robotIndex, hlTask_ptr, stiffness, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpSetPointTask__tp_init__22(PyTasksQpSetPointTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpSurfaceTransformTask *hlTask;
    tasks::qp::SurfaceTransformTask *hlTask_ptr;
    double stiffness;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "stiffness", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpSurfaceTransformTask_Type, &hlTask, &stiffness, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::SetPointTask(mbs_value, robotIndex, hlTask_ptr, stiffness, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpSetPointTask__tp_init__23(PyTasksQpSetPointTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpSurfaceTransformTask *hlTask;
    tasks::qp::SurfaceTransformTask *hlTask_ptr;
    double stiffness;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "stiffness", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpSurfaceTransformTask_Type, &hlTask, &stiffness, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::SetPointTask(mbs_value, robotIndex, hlTask_ptr, stiffness, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpSetPointTask__tp_init__24(PyTasksQpSetPointTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpRelativeDistTask *hlTask;
    tasks::qp::RelativeDistTask *hlTask_ptr;
    double stiffness;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "stiffness", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpRelativeDistTask_Type, &hlTask, &stiffness, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::SetPointTask(mbs_value, robotIndex, hlTask_ptr, stiffness, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpSetPointTask__tp_init__25(PyTasksQpSetPointTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpRelativeDistTask *hlTask;
    tasks::qp::RelativeDistTask *hlTask_ptr;
    double stiffness;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "stiffness", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpRelativeDistTask_Type, &hlTask, &stiffness, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::SetPointTask(mbs_value, robotIndex, hlTask_ptr, stiffness, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpSetPointTask__tp_init__26(PyTasksQpSetPointTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpVectorOrientationTask *hlTask;
    tasks::qp::VectorOrientationTask *hlTask_ptr;
    double stiffness;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "stiffness", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpVectorOrientationTask_Type, &hlTask, &stiffness, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::SetPointTask(mbs_value, robotIndex, hlTask_ptr, stiffness, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpSetPointTask__tp_init__27(PyTasksQpSetPointTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpVectorOrientationTask *hlTask;
    tasks::qp::VectorOrientationTask *hlTask_ptr;
    double stiffness;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "stiffness", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpVectorOrientationTask_Type, &hlTask, &stiffness, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::SetPointTask(mbs_value, robotIndex, hlTask_ptr, stiffness, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyTasksQpSetPointTask__tp_init(PyTasksQpSetPointTask *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[28] = {0,};
    retval = _wrap_PyTasksQpSetPointTask__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpSetPointTask__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyTasksQpSetPointTask__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    retval = _wrap_PyTasksQpSetPointTask__tp_init__3(self, args, kwargs, &exceptions[3]);
    if (!exceptions[3]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        return retval;
    }
    retval = _wrap_PyTasksQpSetPointTask__tp_init__4(self, args, kwargs, &exceptions[4]);
    if (!exceptions[4]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        return retval;
    }
    retval = _wrap_PyTasksQpSetPointTask__tp_init__5(self, args, kwargs, &exceptions[5]);
    if (!exceptions[5]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        return retval;
    }
    retval = _wrap_PyTasksQpSetPointTask__tp_init__6(self, args, kwargs, &exceptions[6]);
    if (!exceptions[6]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        return retval;
    }
    retval = _wrap_PyTasksQpSetPointTask__tp_init__7(self, args, kwargs, &exceptions[7]);
    if (!exceptions[7]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        return retval;
    }
    retval = _wrap_PyTasksQpSetPointTask__tp_init__8(self, args, kwargs, &exceptions[8]);
    if (!exceptions[8]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        return retval;
    }
    retval = _wrap_PyTasksQpSetPointTask__tp_init__9(self, args, kwargs, &exceptions[9]);
    if (!exceptions[9]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        return retval;
    }
    retval = _wrap_PyTasksQpSetPointTask__tp_init__10(self, args, kwargs, &exceptions[10]);
    if (!exceptions[10]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        return retval;
    }
    retval = _wrap_PyTasksQpSetPointTask__tp_init__11(self, args, kwargs, &exceptions[11]);
    if (!exceptions[11]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        return retval;
    }
    retval = _wrap_PyTasksQpSetPointTask__tp_init__12(self, args, kwargs, &exceptions[12]);
    if (!exceptions[12]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        return retval;
    }
    retval = _wrap_PyTasksQpSetPointTask__tp_init__13(self, args, kwargs, &exceptions[13]);
    if (!exceptions[13]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        return retval;
    }
    retval = _wrap_PyTasksQpSetPointTask__tp_init__14(self, args, kwargs, &exceptions[14]);
    if (!exceptions[14]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        return retval;
    }
    retval = _wrap_PyTasksQpSetPointTask__tp_init__15(self, args, kwargs, &exceptions[15]);
    if (!exceptions[15]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        return retval;
    }
    retval = _wrap_PyTasksQpSetPointTask__tp_init__16(self, args, kwargs, &exceptions[16]);
    if (!exceptions[16]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        return retval;
    }
    retval = _wrap_PyTasksQpSetPointTask__tp_init__17(self, args, kwargs, &exceptions[17]);
    if (!exceptions[17]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        return retval;
    }
    retval = _wrap_PyTasksQpSetPointTask__tp_init__18(self, args, kwargs, &exceptions[18]);
    if (!exceptions[18]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        Py_DECREF(exceptions[17]);
        return retval;
    }
    retval = _wrap_PyTasksQpSetPointTask__tp_init__19(self, args, kwargs, &exceptions[19]);
    if (!exceptions[19]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        Py_DECREF(exceptions[17]);
        Py_DECREF(exceptions[18]);
        return retval;
    }
    retval = _wrap_PyTasksQpSetPointTask__tp_init__20(self, args, kwargs, &exceptions[20]);
    if (!exceptions[20]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        Py_DECREF(exceptions[17]);
        Py_DECREF(exceptions[18]);
        Py_DECREF(exceptions[19]);
        return retval;
    }
    retval = _wrap_PyTasksQpSetPointTask__tp_init__21(self, args, kwargs, &exceptions[21]);
    if (!exceptions[21]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        Py_DECREF(exceptions[17]);
        Py_DECREF(exceptions[18]);
        Py_DECREF(exceptions[19]);
        Py_DECREF(exceptions[20]);
        return retval;
    }
    retval = _wrap_PyTasksQpSetPointTask__tp_init__22(self, args, kwargs, &exceptions[22]);
    if (!exceptions[22]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        Py_DECREF(exceptions[17]);
        Py_DECREF(exceptions[18]);
        Py_DECREF(exceptions[19]);
        Py_DECREF(exceptions[20]);
        Py_DECREF(exceptions[21]);
        return retval;
    }
    retval = _wrap_PyTasksQpSetPointTask__tp_init__23(self, args, kwargs, &exceptions[23]);
    if (!exceptions[23]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        Py_DECREF(exceptions[17]);
        Py_DECREF(exceptions[18]);
        Py_DECREF(exceptions[19]);
        Py_DECREF(exceptions[20]);
        Py_DECREF(exceptions[21]);
        Py_DECREF(exceptions[22]);
        return retval;
    }
    retval = _wrap_PyTasksQpSetPointTask__tp_init__24(self, args, kwargs, &exceptions[24]);
    if (!exceptions[24]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        Py_DECREF(exceptions[17]);
        Py_DECREF(exceptions[18]);
        Py_DECREF(exceptions[19]);
        Py_DECREF(exceptions[20]);
        Py_DECREF(exceptions[21]);
        Py_DECREF(exceptions[22]);
        Py_DECREF(exceptions[23]);
        return retval;
    }
    retval = _wrap_PyTasksQpSetPointTask__tp_init__25(self, args, kwargs, &exceptions[25]);
    if (!exceptions[25]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        Py_DECREF(exceptions[17]);
        Py_DECREF(exceptions[18]);
        Py_DECREF(exceptions[19]);
        Py_DECREF(exceptions[20]);
        Py_DECREF(exceptions[21]);
        Py_DECREF(exceptions[22]);
        Py_DECREF(exceptions[23]);
        Py_DECREF(exceptions[24]);
        return retval;
    }
    retval = _wrap_PyTasksQpSetPointTask__tp_init__26(self, args, kwargs, &exceptions[26]);
    if (!exceptions[26]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        Py_DECREF(exceptions[17]);
        Py_DECREF(exceptions[18]);
        Py_DECREF(exceptions[19]);
        Py_DECREF(exceptions[20]);
        Py_DECREF(exceptions[21]);
        Py_DECREF(exceptions[22]);
        Py_DECREF(exceptions[23]);
        Py_DECREF(exceptions[24]);
        Py_DECREF(exceptions[25]);
        return retval;
    }
    retval = _wrap_PyTasksQpSetPointTask__tp_init__27(self, args, kwargs, &exceptions[27]);
    if (!exceptions[27]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        Py_DECREF(exceptions[17]);
        Py_DECREF(exceptions[18]);
        Py_DECREF(exceptions[19]);
        Py_DECREF(exceptions[20]);
        Py_DECREF(exceptions[21]);
        Py_DECREF(exceptions[22]);
        Py_DECREF(exceptions[23]);
        Py_DECREF(exceptions[24]);
        Py_DECREF(exceptions[25]);
        Py_DECREF(exceptions[26]);
        return retval;
    }
    error_list = PyList_New(28);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyList_SET_ITEM(error_list, 3, PyObject_Str(exceptions[3]));
    Py_DECREF(exceptions[3]);
    PyList_SET_ITEM(error_list, 4, PyObject_Str(exceptions[4]));
    Py_DECREF(exceptions[4]);
    PyList_SET_ITEM(error_list, 5, PyObject_Str(exceptions[5]));
    Py_DECREF(exceptions[5]);
    PyList_SET_ITEM(error_list, 6, PyObject_Str(exceptions[6]));
    Py_DECREF(exceptions[6]);
    PyList_SET_ITEM(error_list, 7, PyObject_Str(exceptions[7]));
    Py_DECREF(exceptions[7]);
    PyList_SET_ITEM(error_list, 8, PyObject_Str(exceptions[8]));
    Py_DECREF(exceptions[8]);
    PyList_SET_ITEM(error_list, 9, PyObject_Str(exceptions[9]));
    Py_DECREF(exceptions[9]);
    PyList_SET_ITEM(error_list, 10, PyObject_Str(exceptions[10]));
    Py_DECREF(exceptions[10]);
    PyList_SET_ITEM(error_list, 11, PyObject_Str(exceptions[11]));
    Py_DECREF(exceptions[11]);
    PyList_SET_ITEM(error_list, 12, PyObject_Str(exceptions[12]));
    Py_DECREF(exceptions[12]);
    PyList_SET_ITEM(error_list, 13, PyObject_Str(exceptions[13]));
    Py_DECREF(exceptions[13]);
    PyList_SET_ITEM(error_list, 14, PyObject_Str(exceptions[14]));
    Py_DECREF(exceptions[14]);
    PyList_SET_ITEM(error_list, 15, PyObject_Str(exceptions[15]));
    Py_DECREF(exceptions[15]);
    PyList_SET_ITEM(error_list, 16, PyObject_Str(exceptions[16]));
    Py_DECREF(exceptions[16]);
    PyList_SET_ITEM(error_list, 17, PyObject_Str(exceptions[17]));
    Py_DECREF(exceptions[17]);
    PyList_SET_ITEM(error_list, 18, PyObject_Str(exceptions[18]));
    Py_DECREF(exceptions[18]);
    PyList_SET_ITEM(error_list, 19, PyObject_Str(exceptions[19]));
    Py_DECREF(exceptions[19]);
    PyList_SET_ITEM(error_list, 20, PyObject_Str(exceptions[20]));
    Py_DECREF(exceptions[20]);
    PyList_SET_ITEM(error_list, 21, PyObject_Str(exceptions[21]));
    Py_DECREF(exceptions[21]);
    PyList_SET_ITEM(error_list, 22, PyObject_Str(exceptions[22]));
    Py_DECREF(exceptions[22]);
    PyList_SET_ITEM(error_list, 23, PyObject_Str(exceptions[23]));
    Py_DECREF(exceptions[23]);
    PyList_SET_ITEM(error_list, 24, PyObject_Str(exceptions[24]));
    Py_DECREF(exceptions[24]);
    PyList_SET_ITEM(error_list, 25, PyObject_Str(exceptions[25]));
    Py_DECREF(exceptions[25]);
    PyList_SET_ITEM(error_list, 26, PyObject_Str(exceptions[26]));
    Py_DECREF(exceptions[26]);
    PyList_SET_ITEM(error_list, 27, PyObject_Str(exceptions[27]));
    Py_DECREF(exceptions[27]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyTasksQpSetPointTask_Q(PyTasksQpSetPointTask *self)
{
    PyObject *py_retval;
    PyEigenMatrixXd *py_MatrixXd;

    Eigen::MatrixXd retval = self->obj->Q();
    py_MatrixXd = PyObject_New(PyEigenMatrixXd, &PyEigenMatrixXd_Type);
    py_MatrixXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MatrixXd->obj = new Eigen::MatrixXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_MatrixXd);
    return py_retval;
}


PyObject *
_wrap_PyTasksQpSetPointTask_C(PyTasksQpSetPointTask *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd retval = self->obj->C();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}



PyObject *
_wrap_PyTasksQpSetPointTask_dimWeight__0(PyTasksQpSetPointTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PyEigenVectorXd *py_VectorXd;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    Eigen::VectorXd const & retval = self->obj->dimWeight();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpSetPointTask_dimWeight__1(PyTasksQpSetPointTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyEigenVectorXd *dim;
    const char *keywords[] = {"dim", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyEigenVectorXd_Type, &dim)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->dimWeight(*((PyEigenVectorXd *) dim)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyTasksQpSetPointTask_dimWeight(PyTasksQpSetPointTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpSetPointTask_dimWeight__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpSetPointTask_dimWeight__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksQpSetPointTask_update(PyTasksQpSetPointTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mb_value;
    std::vector<rbd::MultiBodyConfig> mbc_value;
    PyTasksQpSolverData *data;
    const char *keywords[] = {"mb", "mbc", "data", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mb_value, _wrap_convert_py2c__std__vector__lt___rbd__MultiBodyConfig___gt__, &mbc_value, &PyTasksQpSolverData_Type, &data)) {
        return NULL;
    }
    self->obj->update(mb_value, mbc_value, *((PyTasksQpSolverData *) data)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyTasksQpSetPointTask_stiffness__0(PyTasksQpSetPointTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    double retval;
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->stiffness();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpSetPointTask_stiffness__1(PyTasksQpSetPointTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    double weight;
    const char *keywords[] = {"weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->stiffness(weight);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyTasksQpSetPointTask_stiffness(PyTasksQpSetPointTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpSetPointTask_stiffness__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpSetPointTask_stiffness__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}

static PyMethodDef PyTasksQpSetPointTask_methods[] = {
    {(char *) "Q", (PyCFunction) _wrap_PyTasksQpSetPointTask_Q, METH_NOARGS, NULL },
    {(char *) "C", (PyCFunction) _wrap_PyTasksQpSetPointTask_C, METH_NOARGS, NULL },
    {(char *) "dimWeight", (PyCFunction) _wrap_PyTasksQpSetPointTask_dimWeight, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "update", (PyCFunction) _wrap_PyTasksQpSetPointTask_update, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "stiffness", (PyCFunction) _wrap_PyTasksQpSetPointTask_stiffness, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpSetPointTask__tp_dealloc(PyTasksQpSetPointTask *self)
{
        tasks::qp::SetPointTask *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpSetPointTask__tp_richcompare (PyTasksQpSetPointTask *PYBINDGEN_UNUSED(self), PyTasksQpSetPointTask *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpSetPointTask_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpSetPointTask_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.SetPointTask",            /* tp_name */
    sizeof(PyTasksQpSetPointTask),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpSetPointTask__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpSetPointTask__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpSetPointTask_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpSetPointTask__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyTasksQpTrackingTask__tp_init__0(PyTasksQpTrackingTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpPositionTask *hlTask;
    tasks::qp::PositionTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpPositionTask_Type, &hlTask, &gainPos, &gainVel, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrackingTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrackingTask__tp_init__1(PyTasksQpTrackingTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpPositionTask *hlTask;
    tasks::qp::PositionTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpPositionTask_Type, &hlTask, &gainPos, &gainVel, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrackingTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrackingTask__tp_init__2(PyTasksQpTrackingTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpOrientationTask *hlTask;
    tasks::qp::OrientationTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpOrientationTask_Type, &hlTask, &gainPos, &gainVel, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrackingTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrackingTask__tp_init__3(PyTasksQpTrackingTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpOrientationTask *hlTask;
    tasks::qp::OrientationTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpOrientationTask_Type, &hlTask, &gainPos, &gainVel, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrackingTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrackingTask__tp_init__4(PyTasksQpTrackingTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpSurfaceOrientationTask *hlTask;
    tasks::qp::SurfaceOrientationTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpSurfaceOrientationTask_Type, &hlTask, &gainPos, &gainVel, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrackingTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrackingTask__tp_init__5(PyTasksQpTrackingTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpSurfaceOrientationTask *hlTask;
    tasks::qp::SurfaceOrientationTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpSurfaceOrientationTask_Type, &hlTask, &gainPos, &gainVel, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrackingTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrackingTask__tp_init__6(PyTasksQpTrackingTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpGazeTask *hlTask;
    tasks::qp::GazeTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpGazeTask_Type, &hlTask, &gainPos, &gainVel, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrackingTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrackingTask__tp_init__7(PyTasksQpTrackingTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpGazeTask *hlTask;
    tasks::qp::GazeTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpGazeTask_Type, &hlTask, &gainPos, &gainVel, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrackingTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrackingTask__tp_init__8(PyTasksQpTrackingTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpPositionBasedVisServoTask *hlTask;
    tasks::qp::PositionBasedVisServoTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpPositionBasedVisServoTask_Type, &hlTask, &gainPos, &gainVel, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrackingTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrackingTask__tp_init__9(PyTasksQpTrackingTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpPositionBasedVisServoTask *hlTask;
    tasks::qp::PositionBasedVisServoTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpPositionBasedVisServoTask_Type, &hlTask, &gainPos, &gainVel, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrackingTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrackingTask__tp_init__10(PyTasksQpTrackingTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpCoMTask *hlTask;
    tasks::qp::CoMTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpCoMTask_Type, &hlTask, &gainPos, &gainVel, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrackingTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrackingTask__tp_init__11(PyTasksQpTrackingTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpCoMTask *hlTask;
    tasks::qp::CoMTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpCoMTask_Type, &hlTask, &gainPos, &gainVel, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrackingTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrackingTask__tp_init__12(PyTasksQpTrackingTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpLinVelocityTask *hlTask;
    tasks::qp::LinVelocityTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpLinVelocityTask_Type, &hlTask, &gainPos, &gainVel, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrackingTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrackingTask__tp_init__13(PyTasksQpTrackingTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpLinVelocityTask *hlTask;
    tasks::qp::LinVelocityTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpLinVelocityTask_Type, &hlTask, &gainPos, &gainVel, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrackingTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrackingTask__tp_init__14(PyTasksQpTrackingTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpOrientationTrackingTask *hlTask;
    tasks::qp::OrientationTrackingTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpOrientationTrackingTask_Type, &hlTask, &gainPos, &gainVel, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrackingTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrackingTask__tp_init__15(PyTasksQpTrackingTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpOrientationTrackingTask *hlTask;
    tasks::qp::OrientationTrackingTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpOrientationTrackingTask_Type, &hlTask, &gainPos, &gainVel, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrackingTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrackingTask__tp_init__16(PyTasksQpTrackingTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpMomentumTask *hlTask;
    tasks::qp::MomentumTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpMomentumTask_Type, &hlTask, &gainPos, &gainVel, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrackingTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrackingTask__tp_init__17(PyTasksQpTrackingTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpMomentumTask *hlTask;
    tasks::qp::MomentumTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpMomentumTask_Type, &hlTask, &gainPos, &gainVel, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrackingTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrackingTask__tp_init__18(PyTasksQpTrackingTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpJointsSelector *hlTask;
    tasks::qp::JointsSelector *hlTask_ptr;
    double gainPos;
    double gainVel;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpJointsSelector_Type, &hlTask, &gainPos, &gainVel, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrackingTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrackingTask__tp_init__19(PyTasksQpTrackingTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpJointsSelector *hlTask;
    tasks::qp::JointsSelector *hlTask_ptr;
    double gainPos;
    double gainVel;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpJointsSelector_Type, &hlTask, &gainPos, &gainVel, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrackingTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrackingTask__tp_init__20(PyTasksQpTrackingTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpTransformTask *hlTask;
    tasks::qp::TransformTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpTransformTask_Type, &hlTask, &gainPos, &gainVel, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrackingTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrackingTask__tp_init__21(PyTasksQpTrackingTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpTransformTask *hlTask;
    tasks::qp::TransformTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpTransformTask_Type, &hlTask, &gainPos, &gainVel, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrackingTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrackingTask__tp_init__22(PyTasksQpTrackingTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpSurfaceTransformTask *hlTask;
    tasks::qp::SurfaceTransformTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpSurfaceTransformTask_Type, &hlTask, &gainPos, &gainVel, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrackingTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrackingTask__tp_init__23(PyTasksQpTrackingTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpSurfaceTransformTask *hlTask;
    tasks::qp::SurfaceTransformTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpSurfaceTransformTask_Type, &hlTask, &gainPos, &gainVel, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrackingTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrackingTask__tp_init__24(PyTasksQpTrackingTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpRelativeDistTask *hlTask;
    tasks::qp::RelativeDistTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpRelativeDistTask_Type, &hlTask, &gainPos, &gainVel, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrackingTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrackingTask__tp_init__25(PyTasksQpTrackingTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpRelativeDistTask *hlTask;
    tasks::qp::RelativeDistTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpRelativeDistTask_Type, &hlTask, &gainPos, &gainVel, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrackingTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrackingTask__tp_init__26(PyTasksQpTrackingTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpVectorOrientationTask *hlTask;
    tasks::qp::VectorOrientationTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpVectorOrientationTask_Type, &hlTask, &gainPos, &gainVel, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrackingTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrackingTask__tp_init__27(PyTasksQpTrackingTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpVectorOrientationTask *hlTask;
    tasks::qp::VectorOrientationTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpVectorOrientationTask_Type, &hlTask, &gainPos, &gainVel, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrackingTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyTasksQpTrackingTask__tp_init(PyTasksQpTrackingTask *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[28] = {0,};
    retval = _wrap_PyTasksQpTrackingTask__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpTrackingTask__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrackingTask__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrackingTask__tp_init__3(self, args, kwargs, &exceptions[3]);
    if (!exceptions[3]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrackingTask__tp_init__4(self, args, kwargs, &exceptions[4]);
    if (!exceptions[4]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrackingTask__tp_init__5(self, args, kwargs, &exceptions[5]);
    if (!exceptions[5]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrackingTask__tp_init__6(self, args, kwargs, &exceptions[6]);
    if (!exceptions[6]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrackingTask__tp_init__7(self, args, kwargs, &exceptions[7]);
    if (!exceptions[7]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrackingTask__tp_init__8(self, args, kwargs, &exceptions[8]);
    if (!exceptions[8]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrackingTask__tp_init__9(self, args, kwargs, &exceptions[9]);
    if (!exceptions[9]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrackingTask__tp_init__10(self, args, kwargs, &exceptions[10]);
    if (!exceptions[10]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrackingTask__tp_init__11(self, args, kwargs, &exceptions[11]);
    if (!exceptions[11]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrackingTask__tp_init__12(self, args, kwargs, &exceptions[12]);
    if (!exceptions[12]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrackingTask__tp_init__13(self, args, kwargs, &exceptions[13]);
    if (!exceptions[13]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrackingTask__tp_init__14(self, args, kwargs, &exceptions[14]);
    if (!exceptions[14]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrackingTask__tp_init__15(self, args, kwargs, &exceptions[15]);
    if (!exceptions[15]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrackingTask__tp_init__16(self, args, kwargs, &exceptions[16]);
    if (!exceptions[16]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrackingTask__tp_init__17(self, args, kwargs, &exceptions[17]);
    if (!exceptions[17]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrackingTask__tp_init__18(self, args, kwargs, &exceptions[18]);
    if (!exceptions[18]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        Py_DECREF(exceptions[17]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrackingTask__tp_init__19(self, args, kwargs, &exceptions[19]);
    if (!exceptions[19]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        Py_DECREF(exceptions[17]);
        Py_DECREF(exceptions[18]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrackingTask__tp_init__20(self, args, kwargs, &exceptions[20]);
    if (!exceptions[20]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        Py_DECREF(exceptions[17]);
        Py_DECREF(exceptions[18]);
        Py_DECREF(exceptions[19]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrackingTask__tp_init__21(self, args, kwargs, &exceptions[21]);
    if (!exceptions[21]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        Py_DECREF(exceptions[17]);
        Py_DECREF(exceptions[18]);
        Py_DECREF(exceptions[19]);
        Py_DECREF(exceptions[20]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrackingTask__tp_init__22(self, args, kwargs, &exceptions[22]);
    if (!exceptions[22]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        Py_DECREF(exceptions[17]);
        Py_DECREF(exceptions[18]);
        Py_DECREF(exceptions[19]);
        Py_DECREF(exceptions[20]);
        Py_DECREF(exceptions[21]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrackingTask__tp_init__23(self, args, kwargs, &exceptions[23]);
    if (!exceptions[23]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        Py_DECREF(exceptions[17]);
        Py_DECREF(exceptions[18]);
        Py_DECREF(exceptions[19]);
        Py_DECREF(exceptions[20]);
        Py_DECREF(exceptions[21]);
        Py_DECREF(exceptions[22]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrackingTask__tp_init__24(self, args, kwargs, &exceptions[24]);
    if (!exceptions[24]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        Py_DECREF(exceptions[17]);
        Py_DECREF(exceptions[18]);
        Py_DECREF(exceptions[19]);
        Py_DECREF(exceptions[20]);
        Py_DECREF(exceptions[21]);
        Py_DECREF(exceptions[22]);
        Py_DECREF(exceptions[23]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrackingTask__tp_init__25(self, args, kwargs, &exceptions[25]);
    if (!exceptions[25]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        Py_DECREF(exceptions[17]);
        Py_DECREF(exceptions[18]);
        Py_DECREF(exceptions[19]);
        Py_DECREF(exceptions[20]);
        Py_DECREF(exceptions[21]);
        Py_DECREF(exceptions[22]);
        Py_DECREF(exceptions[23]);
        Py_DECREF(exceptions[24]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrackingTask__tp_init__26(self, args, kwargs, &exceptions[26]);
    if (!exceptions[26]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        Py_DECREF(exceptions[17]);
        Py_DECREF(exceptions[18]);
        Py_DECREF(exceptions[19]);
        Py_DECREF(exceptions[20]);
        Py_DECREF(exceptions[21]);
        Py_DECREF(exceptions[22]);
        Py_DECREF(exceptions[23]);
        Py_DECREF(exceptions[24]);
        Py_DECREF(exceptions[25]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrackingTask__tp_init__27(self, args, kwargs, &exceptions[27]);
    if (!exceptions[27]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        Py_DECREF(exceptions[17]);
        Py_DECREF(exceptions[18]);
        Py_DECREF(exceptions[19]);
        Py_DECREF(exceptions[20]);
        Py_DECREF(exceptions[21]);
        Py_DECREF(exceptions[22]);
        Py_DECREF(exceptions[23]);
        Py_DECREF(exceptions[24]);
        Py_DECREF(exceptions[25]);
        Py_DECREF(exceptions[26]);
        return retval;
    }
    error_list = PyList_New(28);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyList_SET_ITEM(error_list, 3, PyObject_Str(exceptions[3]));
    Py_DECREF(exceptions[3]);
    PyList_SET_ITEM(error_list, 4, PyObject_Str(exceptions[4]));
    Py_DECREF(exceptions[4]);
    PyList_SET_ITEM(error_list, 5, PyObject_Str(exceptions[5]));
    Py_DECREF(exceptions[5]);
    PyList_SET_ITEM(error_list, 6, PyObject_Str(exceptions[6]));
    Py_DECREF(exceptions[6]);
    PyList_SET_ITEM(error_list, 7, PyObject_Str(exceptions[7]));
    Py_DECREF(exceptions[7]);
    PyList_SET_ITEM(error_list, 8, PyObject_Str(exceptions[8]));
    Py_DECREF(exceptions[8]);
    PyList_SET_ITEM(error_list, 9, PyObject_Str(exceptions[9]));
    Py_DECREF(exceptions[9]);
    PyList_SET_ITEM(error_list, 10, PyObject_Str(exceptions[10]));
    Py_DECREF(exceptions[10]);
    PyList_SET_ITEM(error_list, 11, PyObject_Str(exceptions[11]));
    Py_DECREF(exceptions[11]);
    PyList_SET_ITEM(error_list, 12, PyObject_Str(exceptions[12]));
    Py_DECREF(exceptions[12]);
    PyList_SET_ITEM(error_list, 13, PyObject_Str(exceptions[13]));
    Py_DECREF(exceptions[13]);
    PyList_SET_ITEM(error_list, 14, PyObject_Str(exceptions[14]));
    Py_DECREF(exceptions[14]);
    PyList_SET_ITEM(error_list, 15, PyObject_Str(exceptions[15]));
    Py_DECREF(exceptions[15]);
    PyList_SET_ITEM(error_list, 16, PyObject_Str(exceptions[16]));
    Py_DECREF(exceptions[16]);
    PyList_SET_ITEM(error_list, 17, PyObject_Str(exceptions[17]));
    Py_DECREF(exceptions[17]);
    PyList_SET_ITEM(error_list, 18, PyObject_Str(exceptions[18]));
    Py_DECREF(exceptions[18]);
    PyList_SET_ITEM(error_list, 19, PyObject_Str(exceptions[19]));
    Py_DECREF(exceptions[19]);
    PyList_SET_ITEM(error_list, 20, PyObject_Str(exceptions[20]));
    Py_DECREF(exceptions[20]);
    PyList_SET_ITEM(error_list, 21, PyObject_Str(exceptions[21]));
    Py_DECREF(exceptions[21]);
    PyList_SET_ITEM(error_list, 22, PyObject_Str(exceptions[22]));
    Py_DECREF(exceptions[22]);
    PyList_SET_ITEM(error_list, 23, PyObject_Str(exceptions[23]));
    Py_DECREF(exceptions[23]);
    PyList_SET_ITEM(error_list, 24, PyObject_Str(exceptions[24]));
    Py_DECREF(exceptions[24]);
    PyList_SET_ITEM(error_list, 25, PyObject_Str(exceptions[25]));
    Py_DECREF(exceptions[25]);
    PyList_SET_ITEM(error_list, 26, PyObject_Str(exceptions[26]));
    Py_DECREF(exceptions[26]);
    PyList_SET_ITEM(error_list, 27, PyObject_Str(exceptions[27]));
    Py_DECREF(exceptions[27]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyTasksQpTrackingTask_refAccel(PyTasksQpTrackingTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyEigenVectorXd *refAccel;
    const char *keywords[] = {"refAccel", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyEigenVectorXd_Type, &refAccel)) {
        return NULL;
    }
    self->obj->refAccel(*((PyEigenVectorXd *) refAccel)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksQpTrackingTask_C(PyTasksQpTrackingTask *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd retval = self->obj->C();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}


PyObject *
_wrap_PyTasksQpTrackingTask_setGains(PyTasksQpTrackingTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double gainPos;
    double gainVel;
    const char *keywords[] = {"gainPos", "gainVel", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "dd", (char **) keywords, &gainPos, &gainVel)) {
        return NULL;
    }
    self->obj->setGains(gainPos, gainVel);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksQpTrackingTask_errorVel(PyTasksQpTrackingTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyEigenVectorXd *errorVel;
    const char *keywords[] = {"errorVel", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyEigenVectorXd_Type, &errorVel)) {
        return NULL;
    }
    self->obj->errorVel(*((PyEigenVectorXd *) errorVel)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksQpTrackingTask_errorPos(PyTasksQpTrackingTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyEigenVectorXd *errorPos;
    const char *keywords[] = {"errorPos", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyEigenVectorXd_Type, &errorPos)) {
        return NULL;
    }
    self->obj->errorPos(*((PyEigenVectorXd *) errorPos)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksQpTrackingTask_update(PyTasksQpTrackingTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mb_value;
    std::vector<rbd::MultiBodyConfig> mbc_value;
    PyTasksQpSolverData *data;
    const char *keywords[] = {"mb", "mbc", "data", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mb_value, _wrap_convert_py2c__std__vector__lt___rbd__MultiBodyConfig___gt__, &mbc_value, &PyTasksQpSolverData_Type, &data)) {
        return NULL;
    }
    self->obj->update(mb_value, mbc_value, *((PyTasksQpSolverData *) data)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksQpTrackingTask_Q(PyTasksQpTrackingTask *self)
{
    PyObject *py_retval;
    PyEigenMatrixXd *py_MatrixXd;

    Eigen::MatrixXd retval = self->obj->Q();
    py_MatrixXd = PyObject_New(PyEigenMatrixXd, &PyEigenMatrixXd_Type);
    py_MatrixXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MatrixXd->obj = new Eigen::MatrixXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_MatrixXd);
    return py_retval;
}



PyObject *
_wrap_PyTasksQpTrackingTask_dimWeight__0(PyTasksQpTrackingTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PyEigenVectorXd *py_VectorXd;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    Eigen::VectorXd const & retval = self->obj->dimWeight();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpTrackingTask_dimWeight__1(PyTasksQpTrackingTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyEigenVectorXd *dim;
    const char *keywords[] = {"dim", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyEigenVectorXd_Type, &dim)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->dimWeight(*((PyEigenVectorXd *) dim)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyTasksQpTrackingTask_dimWeight(PyTasksQpTrackingTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpTrackingTask_dimWeight__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpTrackingTask_dimWeight__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}

static PyMethodDef PyTasksQpTrackingTask_methods[] = {
    {(char *) "refAccel", (PyCFunction) _wrap_PyTasksQpTrackingTask_refAccel, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "C", (PyCFunction) _wrap_PyTasksQpTrackingTask_C, METH_NOARGS, NULL },
    {(char *) "setGains", (PyCFunction) _wrap_PyTasksQpTrackingTask_setGains, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "errorVel", (PyCFunction) _wrap_PyTasksQpTrackingTask_errorVel, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "errorPos", (PyCFunction) _wrap_PyTasksQpTrackingTask_errorPos, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "update", (PyCFunction) _wrap_PyTasksQpTrackingTask_update, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Q", (PyCFunction) _wrap_PyTasksQpTrackingTask_Q, METH_NOARGS, NULL },
    {(char *) "dimWeight", (PyCFunction) _wrap_PyTasksQpTrackingTask_dimWeight, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpTrackingTask__tp_dealloc(PyTasksQpTrackingTask *self)
{
        tasks::qp::TrackingTask *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpTrackingTask__tp_richcompare (PyTasksQpTrackingTask *PYBINDGEN_UNUSED(self), PyTasksQpTrackingTask *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpTrackingTask_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpTrackingTask_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.TrackingTask",            /* tp_name */
    sizeof(PyTasksQpTrackingTask),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpTrackingTask__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpTrackingTask__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpTrackingTask_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpTrackingTask__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyTasksQpTrajectoryTask__tp_init__0(PyTasksQpTrajectoryTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpPositionTask *hlTask;
    tasks::qp::PositionTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpPositionTask_Type, &hlTask, &gainPos, &gainVel, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrajectoryTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrajectoryTask__tp_init__1(PyTasksQpTrajectoryTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpPositionTask *hlTask;
    tasks::qp::PositionTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpPositionTask_Type, &hlTask, &gainPos, &gainVel, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrajectoryTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrajectoryTask__tp_init__2(PyTasksQpTrajectoryTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpOrientationTask *hlTask;
    tasks::qp::OrientationTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpOrientationTask_Type, &hlTask, &gainPos, &gainVel, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrajectoryTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrajectoryTask__tp_init__3(PyTasksQpTrajectoryTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpOrientationTask *hlTask;
    tasks::qp::OrientationTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpOrientationTask_Type, &hlTask, &gainPos, &gainVel, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrajectoryTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrajectoryTask__tp_init__4(PyTasksQpTrajectoryTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpSurfaceOrientationTask *hlTask;
    tasks::qp::SurfaceOrientationTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpSurfaceOrientationTask_Type, &hlTask, &gainPos, &gainVel, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrajectoryTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrajectoryTask__tp_init__5(PyTasksQpTrajectoryTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpSurfaceOrientationTask *hlTask;
    tasks::qp::SurfaceOrientationTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpSurfaceOrientationTask_Type, &hlTask, &gainPos, &gainVel, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrajectoryTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrajectoryTask__tp_init__6(PyTasksQpTrajectoryTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpGazeTask *hlTask;
    tasks::qp::GazeTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpGazeTask_Type, &hlTask, &gainPos, &gainVel, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrajectoryTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrajectoryTask__tp_init__7(PyTasksQpTrajectoryTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpGazeTask *hlTask;
    tasks::qp::GazeTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpGazeTask_Type, &hlTask, &gainPos, &gainVel, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrajectoryTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrajectoryTask__tp_init__8(PyTasksQpTrajectoryTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpPositionBasedVisServoTask *hlTask;
    tasks::qp::PositionBasedVisServoTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpPositionBasedVisServoTask_Type, &hlTask, &gainPos, &gainVel, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrajectoryTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrajectoryTask__tp_init__9(PyTasksQpTrajectoryTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpPositionBasedVisServoTask *hlTask;
    tasks::qp::PositionBasedVisServoTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpPositionBasedVisServoTask_Type, &hlTask, &gainPos, &gainVel, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrajectoryTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrajectoryTask__tp_init__10(PyTasksQpTrajectoryTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpCoMTask *hlTask;
    tasks::qp::CoMTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpCoMTask_Type, &hlTask, &gainPos, &gainVel, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrajectoryTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrajectoryTask__tp_init__11(PyTasksQpTrajectoryTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpCoMTask *hlTask;
    tasks::qp::CoMTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpCoMTask_Type, &hlTask, &gainPos, &gainVel, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrajectoryTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrajectoryTask__tp_init__12(PyTasksQpTrajectoryTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpLinVelocityTask *hlTask;
    tasks::qp::LinVelocityTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpLinVelocityTask_Type, &hlTask, &gainPos, &gainVel, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrajectoryTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrajectoryTask__tp_init__13(PyTasksQpTrajectoryTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpLinVelocityTask *hlTask;
    tasks::qp::LinVelocityTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpLinVelocityTask_Type, &hlTask, &gainPos, &gainVel, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrajectoryTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrajectoryTask__tp_init__14(PyTasksQpTrajectoryTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpOrientationTrackingTask *hlTask;
    tasks::qp::OrientationTrackingTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpOrientationTrackingTask_Type, &hlTask, &gainPos, &gainVel, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrajectoryTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrajectoryTask__tp_init__15(PyTasksQpTrajectoryTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpOrientationTrackingTask *hlTask;
    tasks::qp::OrientationTrackingTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpOrientationTrackingTask_Type, &hlTask, &gainPos, &gainVel, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrajectoryTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrajectoryTask__tp_init__16(PyTasksQpTrajectoryTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpMomentumTask *hlTask;
    tasks::qp::MomentumTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpMomentumTask_Type, &hlTask, &gainPos, &gainVel, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrajectoryTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrajectoryTask__tp_init__17(PyTasksQpTrajectoryTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpMomentumTask *hlTask;
    tasks::qp::MomentumTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpMomentumTask_Type, &hlTask, &gainPos, &gainVel, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrajectoryTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrajectoryTask__tp_init__18(PyTasksQpTrajectoryTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpJointsSelector *hlTask;
    tasks::qp::JointsSelector *hlTask_ptr;
    double gainPos;
    double gainVel;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpJointsSelector_Type, &hlTask, &gainPos, &gainVel, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrajectoryTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrajectoryTask__tp_init__19(PyTasksQpTrajectoryTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpJointsSelector *hlTask;
    tasks::qp::JointsSelector *hlTask_ptr;
    double gainPos;
    double gainVel;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpJointsSelector_Type, &hlTask, &gainPos, &gainVel, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrajectoryTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrajectoryTask__tp_init__20(PyTasksQpTrajectoryTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpTransformTask *hlTask;
    tasks::qp::TransformTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpTransformTask_Type, &hlTask, &gainPos, &gainVel, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrajectoryTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrajectoryTask__tp_init__21(PyTasksQpTrajectoryTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpTransformTask *hlTask;
    tasks::qp::TransformTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpTransformTask_Type, &hlTask, &gainPos, &gainVel, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrajectoryTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrajectoryTask__tp_init__22(PyTasksQpTrajectoryTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpSurfaceTransformTask *hlTask;
    tasks::qp::SurfaceTransformTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpSurfaceTransformTask_Type, &hlTask, &gainPos, &gainVel, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrajectoryTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrajectoryTask__tp_init__23(PyTasksQpTrajectoryTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpSurfaceTransformTask *hlTask;
    tasks::qp::SurfaceTransformTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpSurfaceTransformTask_Type, &hlTask, &gainPos, &gainVel, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrajectoryTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrajectoryTask__tp_init__24(PyTasksQpTrajectoryTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpRelativeDistTask *hlTask;
    tasks::qp::RelativeDistTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpRelativeDistTask_Type, &hlTask, &gainPos, &gainVel, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrajectoryTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrajectoryTask__tp_init__25(PyTasksQpTrajectoryTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpRelativeDistTask *hlTask;
    tasks::qp::RelativeDistTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpRelativeDistTask_Type, &hlTask, &gainPos, &gainVel, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrajectoryTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrajectoryTask__tp_init__26(PyTasksQpTrajectoryTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpVectorOrientationTask *hlTask;
    tasks::qp::VectorOrientationTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpVectorOrientationTask_Type, &hlTask, &gainPos, &gainVel, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrajectoryTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTrajectoryTask__tp_init__27(PyTasksQpTrajectoryTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpVectorOrientationTask *hlTask;
    tasks::qp::VectorOrientationTask *hlTask_ptr;
    double gainPos;
    double gainVel;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "gainPos", "gainVel", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpVectorOrientationTask_Type, &hlTask, &gainPos, &gainVel, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TrajectoryTask(mbs_value, robotIndex, hlTask_ptr, gainPos, gainVel, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyTasksQpTrajectoryTask__tp_init(PyTasksQpTrajectoryTask *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[28] = {0,};
    retval = _wrap_PyTasksQpTrajectoryTask__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpTrajectoryTask__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrajectoryTask__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrajectoryTask__tp_init__3(self, args, kwargs, &exceptions[3]);
    if (!exceptions[3]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrajectoryTask__tp_init__4(self, args, kwargs, &exceptions[4]);
    if (!exceptions[4]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrajectoryTask__tp_init__5(self, args, kwargs, &exceptions[5]);
    if (!exceptions[5]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrajectoryTask__tp_init__6(self, args, kwargs, &exceptions[6]);
    if (!exceptions[6]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrajectoryTask__tp_init__7(self, args, kwargs, &exceptions[7]);
    if (!exceptions[7]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrajectoryTask__tp_init__8(self, args, kwargs, &exceptions[8]);
    if (!exceptions[8]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrajectoryTask__tp_init__9(self, args, kwargs, &exceptions[9]);
    if (!exceptions[9]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrajectoryTask__tp_init__10(self, args, kwargs, &exceptions[10]);
    if (!exceptions[10]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrajectoryTask__tp_init__11(self, args, kwargs, &exceptions[11]);
    if (!exceptions[11]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrajectoryTask__tp_init__12(self, args, kwargs, &exceptions[12]);
    if (!exceptions[12]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrajectoryTask__tp_init__13(self, args, kwargs, &exceptions[13]);
    if (!exceptions[13]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrajectoryTask__tp_init__14(self, args, kwargs, &exceptions[14]);
    if (!exceptions[14]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrajectoryTask__tp_init__15(self, args, kwargs, &exceptions[15]);
    if (!exceptions[15]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrajectoryTask__tp_init__16(self, args, kwargs, &exceptions[16]);
    if (!exceptions[16]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrajectoryTask__tp_init__17(self, args, kwargs, &exceptions[17]);
    if (!exceptions[17]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrajectoryTask__tp_init__18(self, args, kwargs, &exceptions[18]);
    if (!exceptions[18]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        Py_DECREF(exceptions[17]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrajectoryTask__tp_init__19(self, args, kwargs, &exceptions[19]);
    if (!exceptions[19]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        Py_DECREF(exceptions[17]);
        Py_DECREF(exceptions[18]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrajectoryTask__tp_init__20(self, args, kwargs, &exceptions[20]);
    if (!exceptions[20]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        Py_DECREF(exceptions[17]);
        Py_DECREF(exceptions[18]);
        Py_DECREF(exceptions[19]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrajectoryTask__tp_init__21(self, args, kwargs, &exceptions[21]);
    if (!exceptions[21]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        Py_DECREF(exceptions[17]);
        Py_DECREF(exceptions[18]);
        Py_DECREF(exceptions[19]);
        Py_DECREF(exceptions[20]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrajectoryTask__tp_init__22(self, args, kwargs, &exceptions[22]);
    if (!exceptions[22]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        Py_DECREF(exceptions[17]);
        Py_DECREF(exceptions[18]);
        Py_DECREF(exceptions[19]);
        Py_DECREF(exceptions[20]);
        Py_DECREF(exceptions[21]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrajectoryTask__tp_init__23(self, args, kwargs, &exceptions[23]);
    if (!exceptions[23]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        Py_DECREF(exceptions[17]);
        Py_DECREF(exceptions[18]);
        Py_DECREF(exceptions[19]);
        Py_DECREF(exceptions[20]);
        Py_DECREF(exceptions[21]);
        Py_DECREF(exceptions[22]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrajectoryTask__tp_init__24(self, args, kwargs, &exceptions[24]);
    if (!exceptions[24]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        Py_DECREF(exceptions[17]);
        Py_DECREF(exceptions[18]);
        Py_DECREF(exceptions[19]);
        Py_DECREF(exceptions[20]);
        Py_DECREF(exceptions[21]);
        Py_DECREF(exceptions[22]);
        Py_DECREF(exceptions[23]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrajectoryTask__tp_init__25(self, args, kwargs, &exceptions[25]);
    if (!exceptions[25]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        Py_DECREF(exceptions[17]);
        Py_DECREF(exceptions[18]);
        Py_DECREF(exceptions[19]);
        Py_DECREF(exceptions[20]);
        Py_DECREF(exceptions[21]);
        Py_DECREF(exceptions[22]);
        Py_DECREF(exceptions[23]);
        Py_DECREF(exceptions[24]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrajectoryTask__tp_init__26(self, args, kwargs, &exceptions[26]);
    if (!exceptions[26]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        Py_DECREF(exceptions[17]);
        Py_DECREF(exceptions[18]);
        Py_DECREF(exceptions[19]);
        Py_DECREF(exceptions[20]);
        Py_DECREF(exceptions[21]);
        Py_DECREF(exceptions[22]);
        Py_DECREF(exceptions[23]);
        Py_DECREF(exceptions[24]);
        Py_DECREF(exceptions[25]);
        return retval;
    }
    retval = _wrap_PyTasksQpTrajectoryTask__tp_init__27(self, args, kwargs, &exceptions[27]);
    if (!exceptions[27]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        Py_DECREF(exceptions[17]);
        Py_DECREF(exceptions[18]);
        Py_DECREF(exceptions[19]);
        Py_DECREF(exceptions[20]);
        Py_DECREF(exceptions[21]);
        Py_DECREF(exceptions[22]);
        Py_DECREF(exceptions[23]);
        Py_DECREF(exceptions[24]);
        Py_DECREF(exceptions[25]);
        Py_DECREF(exceptions[26]);
        return retval;
    }
    error_list = PyList_New(28);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyList_SET_ITEM(error_list, 3, PyObject_Str(exceptions[3]));
    Py_DECREF(exceptions[3]);
    PyList_SET_ITEM(error_list, 4, PyObject_Str(exceptions[4]));
    Py_DECREF(exceptions[4]);
    PyList_SET_ITEM(error_list, 5, PyObject_Str(exceptions[5]));
    Py_DECREF(exceptions[5]);
    PyList_SET_ITEM(error_list, 6, PyObject_Str(exceptions[6]));
    Py_DECREF(exceptions[6]);
    PyList_SET_ITEM(error_list, 7, PyObject_Str(exceptions[7]));
    Py_DECREF(exceptions[7]);
    PyList_SET_ITEM(error_list, 8, PyObject_Str(exceptions[8]));
    Py_DECREF(exceptions[8]);
    PyList_SET_ITEM(error_list, 9, PyObject_Str(exceptions[9]));
    Py_DECREF(exceptions[9]);
    PyList_SET_ITEM(error_list, 10, PyObject_Str(exceptions[10]));
    Py_DECREF(exceptions[10]);
    PyList_SET_ITEM(error_list, 11, PyObject_Str(exceptions[11]));
    Py_DECREF(exceptions[11]);
    PyList_SET_ITEM(error_list, 12, PyObject_Str(exceptions[12]));
    Py_DECREF(exceptions[12]);
    PyList_SET_ITEM(error_list, 13, PyObject_Str(exceptions[13]));
    Py_DECREF(exceptions[13]);
    PyList_SET_ITEM(error_list, 14, PyObject_Str(exceptions[14]));
    Py_DECREF(exceptions[14]);
    PyList_SET_ITEM(error_list, 15, PyObject_Str(exceptions[15]));
    Py_DECREF(exceptions[15]);
    PyList_SET_ITEM(error_list, 16, PyObject_Str(exceptions[16]));
    Py_DECREF(exceptions[16]);
    PyList_SET_ITEM(error_list, 17, PyObject_Str(exceptions[17]));
    Py_DECREF(exceptions[17]);
    PyList_SET_ITEM(error_list, 18, PyObject_Str(exceptions[18]));
    Py_DECREF(exceptions[18]);
    PyList_SET_ITEM(error_list, 19, PyObject_Str(exceptions[19]));
    Py_DECREF(exceptions[19]);
    PyList_SET_ITEM(error_list, 20, PyObject_Str(exceptions[20]));
    Py_DECREF(exceptions[20]);
    PyList_SET_ITEM(error_list, 21, PyObject_Str(exceptions[21]));
    Py_DECREF(exceptions[21]);
    PyList_SET_ITEM(error_list, 22, PyObject_Str(exceptions[22]));
    Py_DECREF(exceptions[22]);
    PyList_SET_ITEM(error_list, 23, PyObject_Str(exceptions[23]));
    Py_DECREF(exceptions[23]);
    PyList_SET_ITEM(error_list, 24, PyObject_Str(exceptions[24]));
    Py_DECREF(exceptions[24]);
    PyList_SET_ITEM(error_list, 25, PyObject_Str(exceptions[25]));
    Py_DECREF(exceptions[25]);
    PyList_SET_ITEM(error_list, 26, PyObject_Str(exceptions[26]));
    Py_DECREF(exceptions[26]);
    PyList_SET_ITEM(error_list, 27, PyObject_Str(exceptions[27]));
    Py_DECREF(exceptions[27]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyTasksQpTrajectoryTask_refAccel(PyTasksQpTrajectoryTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyEigenVectorXd *refAccel;
    const char *keywords[] = {"refAccel", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyEigenVectorXd_Type, &refAccel)) {
        return NULL;
    }
    self->obj->refAccel(*((PyEigenVectorXd *) refAccel)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksQpTrajectoryTask_C(PyTasksQpTrajectoryTask *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd retval = self->obj->C();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}


PyObject *
_wrap_PyTasksQpTrajectoryTask_refVel(PyTasksQpTrajectoryTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyEigenVectorXd *refVel;
    const char *keywords[] = {"refVel", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyEigenVectorXd_Type, &refVel)) {
        return NULL;
    }
    self->obj->refVel(*((PyEigenVectorXd *) refVel)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksQpTrajectoryTask_setGains(PyTasksQpTrajectoryTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double gainPos;
    double gainVel;
    const char *keywords[] = {"gainPos", "gainVel", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "dd", (char **) keywords, &gainPos, &gainVel)) {
        return NULL;
    }
    self->obj->setGains(gainPos, gainVel);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksQpTrajectoryTask_update(PyTasksQpTrajectoryTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mb_value;
    std::vector<rbd::MultiBodyConfig> mbc_value;
    PyTasksQpSolverData *data;
    const char *keywords[] = {"mb", "mbc", "data", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mb_value, _wrap_convert_py2c__std__vector__lt___rbd__MultiBodyConfig___gt__, &mbc_value, &PyTasksQpSolverData_Type, &data)) {
        return NULL;
    }
    self->obj->update(mb_value, mbc_value, *((PyTasksQpSolverData *) data)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksQpTrajectoryTask_Q(PyTasksQpTrajectoryTask *self)
{
    PyObject *py_retval;
    PyEigenMatrixXd *py_MatrixXd;

    Eigen::MatrixXd retval = self->obj->Q();
    py_MatrixXd = PyObject_New(PyEigenMatrixXd, &PyEigenMatrixXd_Type);
    py_MatrixXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MatrixXd->obj = new Eigen::MatrixXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_MatrixXd);
    return py_retval;
}



PyObject *
_wrap_PyTasksQpTrajectoryTask_dimWeight__0(PyTasksQpTrajectoryTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PyEigenVectorXd *py_VectorXd;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    Eigen::VectorXd const & retval = self->obj->dimWeight();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpTrajectoryTask_dimWeight__1(PyTasksQpTrajectoryTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyEigenVectorXd *dim;
    const char *keywords[] = {"dim", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyEigenVectorXd_Type, &dim)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->dimWeight(*((PyEigenVectorXd *) dim)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyTasksQpTrajectoryTask_dimWeight(PyTasksQpTrajectoryTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpTrajectoryTask_dimWeight__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpTrajectoryTask_dimWeight__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}

static PyMethodDef PyTasksQpTrajectoryTask_methods[] = {
    {(char *) "refAccel", (PyCFunction) _wrap_PyTasksQpTrajectoryTask_refAccel, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "C", (PyCFunction) _wrap_PyTasksQpTrajectoryTask_C, METH_NOARGS, NULL },
    {(char *) "refVel", (PyCFunction) _wrap_PyTasksQpTrajectoryTask_refVel, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "setGains", (PyCFunction) _wrap_PyTasksQpTrajectoryTask_setGains, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "update", (PyCFunction) _wrap_PyTasksQpTrajectoryTask_update, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Q", (PyCFunction) _wrap_PyTasksQpTrajectoryTask_Q, METH_NOARGS, NULL },
    {(char *) "dimWeight", (PyCFunction) _wrap_PyTasksQpTrajectoryTask_dimWeight, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpTrajectoryTask__tp_dealloc(PyTasksQpTrajectoryTask *self)
{
        tasks::qp::TrajectoryTask *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpTrajectoryTask__tp_richcompare (PyTasksQpTrajectoryTask *PYBINDGEN_UNUSED(self), PyTasksQpTrajectoryTask *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpTrajectoryTask_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpTrajectoryTask_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.TrajectoryTask",            /* tp_name */
    sizeof(PyTasksQpTrajectoryTask),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpTrajectoryTask__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpTrajectoryTask__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpTrajectoryTask_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpTrajectoryTask__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyTasksQpPIDTask__tp_init__0(PyTasksQpPIDTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpPositionTask *hlTask;
    tasks::qp::PositionTask *hlTask_ptr;
    double P;
    double I;
    double D;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "P", "I", "D", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dddd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpPositionTask_Type, &hlTask, &P, &I, &D, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::PIDTask(mbs_value, robotIndex, hlTask_ptr, P, I, D, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpPIDTask__tp_init__1(PyTasksQpPIDTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpPositionTask *hlTask;
    tasks::qp::PositionTask *hlTask_ptr;
    double P;
    double I;
    double D;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "P", "I", "D", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpPositionTask_Type, &hlTask, &P, &I, &D, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::PIDTask(mbs_value, robotIndex, hlTask_ptr, P, I, D, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpPIDTask__tp_init__2(PyTasksQpPIDTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpOrientationTask *hlTask;
    tasks::qp::OrientationTask *hlTask_ptr;
    double P;
    double I;
    double D;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "P", "I", "D", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dddd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpOrientationTask_Type, &hlTask, &P, &I, &D, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::PIDTask(mbs_value, robotIndex, hlTask_ptr, P, I, D, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpPIDTask__tp_init__3(PyTasksQpPIDTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpOrientationTask *hlTask;
    tasks::qp::OrientationTask *hlTask_ptr;
    double P;
    double I;
    double D;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "P", "I", "D", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpOrientationTask_Type, &hlTask, &P, &I, &D, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::PIDTask(mbs_value, robotIndex, hlTask_ptr, P, I, D, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpPIDTask__tp_init__4(PyTasksQpPIDTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpSurfaceOrientationTask *hlTask;
    tasks::qp::SurfaceOrientationTask *hlTask_ptr;
    double P;
    double I;
    double D;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "P", "I", "D", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dddd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpSurfaceOrientationTask_Type, &hlTask, &P, &I, &D, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::PIDTask(mbs_value, robotIndex, hlTask_ptr, P, I, D, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpPIDTask__tp_init__5(PyTasksQpPIDTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpSurfaceOrientationTask *hlTask;
    tasks::qp::SurfaceOrientationTask *hlTask_ptr;
    double P;
    double I;
    double D;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "P", "I", "D", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpSurfaceOrientationTask_Type, &hlTask, &P, &I, &D, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::PIDTask(mbs_value, robotIndex, hlTask_ptr, P, I, D, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpPIDTask__tp_init__6(PyTasksQpPIDTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpGazeTask *hlTask;
    tasks::qp::GazeTask *hlTask_ptr;
    double P;
    double I;
    double D;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "P", "I", "D", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dddd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpGazeTask_Type, &hlTask, &P, &I, &D, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::PIDTask(mbs_value, robotIndex, hlTask_ptr, P, I, D, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpPIDTask__tp_init__7(PyTasksQpPIDTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpGazeTask *hlTask;
    tasks::qp::GazeTask *hlTask_ptr;
    double P;
    double I;
    double D;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "P", "I", "D", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpGazeTask_Type, &hlTask, &P, &I, &D, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::PIDTask(mbs_value, robotIndex, hlTask_ptr, P, I, D, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpPIDTask__tp_init__8(PyTasksQpPIDTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpPositionBasedVisServoTask *hlTask;
    tasks::qp::PositionBasedVisServoTask *hlTask_ptr;
    double P;
    double I;
    double D;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "P", "I", "D", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dddd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpPositionBasedVisServoTask_Type, &hlTask, &P, &I, &D, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::PIDTask(mbs_value, robotIndex, hlTask_ptr, P, I, D, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpPIDTask__tp_init__9(PyTasksQpPIDTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpPositionBasedVisServoTask *hlTask;
    tasks::qp::PositionBasedVisServoTask *hlTask_ptr;
    double P;
    double I;
    double D;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "P", "I", "D", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpPositionBasedVisServoTask_Type, &hlTask, &P, &I, &D, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::PIDTask(mbs_value, robotIndex, hlTask_ptr, P, I, D, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpPIDTask__tp_init__10(PyTasksQpPIDTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpCoMTask *hlTask;
    tasks::qp::CoMTask *hlTask_ptr;
    double P;
    double I;
    double D;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "P", "I", "D", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dddd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpCoMTask_Type, &hlTask, &P, &I, &D, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::PIDTask(mbs_value, robotIndex, hlTask_ptr, P, I, D, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpPIDTask__tp_init__11(PyTasksQpPIDTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpCoMTask *hlTask;
    tasks::qp::CoMTask *hlTask_ptr;
    double P;
    double I;
    double D;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "P", "I", "D", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpCoMTask_Type, &hlTask, &P, &I, &D, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::PIDTask(mbs_value, robotIndex, hlTask_ptr, P, I, D, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpPIDTask__tp_init__12(PyTasksQpPIDTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpLinVelocityTask *hlTask;
    tasks::qp::LinVelocityTask *hlTask_ptr;
    double P;
    double I;
    double D;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "P", "I", "D", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dddd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpLinVelocityTask_Type, &hlTask, &P, &I, &D, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::PIDTask(mbs_value, robotIndex, hlTask_ptr, P, I, D, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpPIDTask__tp_init__13(PyTasksQpPIDTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpLinVelocityTask *hlTask;
    tasks::qp::LinVelocityTask *hlTask_ptr;
    double P;
    double I;
    double D;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "P", "I", "D", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpLinVelocityTask_Type, &hlTask, &P, &I, &D, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::PIDTask(mbs_value, robotIndex, hlTask_ptr, P, I, D, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpPIDTask__tp_init__14(PyTasksQpPIDTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpOrientationTrackingTask *hlTask;
    tasks::qp::OrientationTrackingTask *hlTask_ptr;
    double P;
    double I;
    double D;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "P", "I", "D", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dddd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpOrientationTrackingTask_Type, &hlTask, &P, &I, &D, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::PIDTask(mbs_value, robotIndex, hlTask_ptr, P, I, D, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpPIDTask__tp_init__15(PyTasksQpPIDTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpOrientationTrackingTask *hlTask;
    tasks::qp::OrientationTrackingTask *hlTask_ptr;
    double P;
    double I;
    double D;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "P", "I", "D", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpOrientationTrackingTask_Type, &hlTask, &P, &I, &D, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::PIDTask(mbs_value, robotIndex, hlTask_ptr, P, I, D, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpPIDTask__tp_init__16(PyTasksQpPIDTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpMomentumTask *hlTask;
    tasks::qp::MomentumTask *hlTask_ptr;
    double P;
    double I;
    double D;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "P", "I", "D", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dddd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpMomentumTask_Type, &hlTask, &P, &I, &D, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::PIDTask(mbs_value, robotIndex, hlTask_ptr, P, I, D, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpPIDTask__tp_init__17(PyTasksQpPIDTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpMomentumTask *hlTask;
    tasks::qp::MomentumTask *hlTask_ptr;
    double P;
    double I;
    double D;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "P", "I", "D", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpMomentumTask_Type, &hlTask, &P, &I, &D, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::PIDTask(mbs_value, robotIndex, hlTask_ptr, P, I, D, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpPIDTask__tp_init__18(PyTasksQpPIDTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpJointsSelector *hlTask;
    tasks::qp::JointsSelector *hlTask_ptr;
    double P;
    double I;
    double D;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "P", "I", "D", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dddd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpJointsSelector_Type, &hlTask, &P, &I, &D, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::PIDTask(mbs_value, robotIndex, hlTask_ptr, P, I, D, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpPIDTask__tp_init__19(PyTasksQpPIDTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpJointsSelector *hlTask;
    tasks::qp::JointsSelector *hlTask_ptr;
    double P;
    double I;
    double D;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "P", "I", "D", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpJointsSelector_Type, &hlTask, &P, &I, &D, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::PIDTask(mbs_value, robotIndex, hlTask_ptr, P, I, D, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpPIDTask__tp_init__20(PyTasksQpPIDTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpTransformTask *hlTask;
    tasks::qp::TransformTask *hlTask_ptr;
    double P;
    double I;
    double D;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "P", "I", "D", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dddd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpTransformTask_Type, &hlTask, &P, &I, &D, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::PIDTask(mbs_value, robotIndex, hlTask_ptr, P, I, D, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpPIDTask__tp_init__21(PyTasksQpPIDTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpTransformTask *hlTask;
    tasks::qp::TransformTask *hlTask_ptr;
    double P;
    double I;
    double D;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "P", "I", "D", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpTransformTask_Type, &hlTask, &P, &I, &D, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::PIDTask(mbs_value, robotIndex, hlTask_ptr, P, I, D, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpPIDTask__tp_init__22(PyTasksQpPIDTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpSurfaceTransformTask *hlTask;
    tasks::qp::SurfaceTransformTask *hlTask_ptr;
    double P;
    double I;
    double D;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "P", "I", "D", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dddd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpSurfaceTransformTask_Type, &hlTask, &P, &I, &D, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::PIDTask(mbs_value, robotIndex, hlTask_ptr, P, I, D, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpPIDTask__tp_init__23(PyTasksQpPIDTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpSurfaceTransformTask *hlTask;
    tasks::qp::SurfaceTransformTask *hlTask_ptr;
    double P;
    double I;
    double D;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "P", "I", "D", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpSurfaceTransformTask_Type, &hlTask, &P, &I, &D, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::PIDTask(mbs_value, robotIndex, hlTask_ptr, P, I, D, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpPIDTask__tp_init__24(PyTasksQpPIDTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpRelativeDistTask *hlTask;
    tasks::qp::RelativeDistTask *hlTask_ptr;
    double P;
    double I;
    double D;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "P", "I", "D", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dddd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpRelativeDistTask_Type, &hlTask, &P, &I, &D, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::PIDTask(mbs_value, robotIndex, hlTask_ptr, P, I, D, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpPIDTask__tp_init__25(PyTasksQpPIDTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpRelativeDistTask *hlTask;
    tasks::qp::RelativeDistTask *hlTask_ptr;
    double P;
    double I;
    double D;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "P", "I", "D", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpRelativeDistTask_Type, &hlTask, &P, &I, &D, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::PIDTask(mbs_value, robotIndex, hlTask_ptr, P, I, D, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpPIDTask__tp_init__26(PyTasksQpPIDTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpVectorOrientationTask *hlTask;
    tasks::qp::VectorOrientationTask *hlTask_ptr;
    double P;
    double I;
    double D;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "P", "I", "D", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dddd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpVectorOrientationTask_Type, &hlTask, &P, &I, &D, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::PIDTask(mbs_value, robotIndex, hlTask_ptr, P, I, D, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpPIDTask__tp_init__27(PyTasksQpPIDTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpVectorOrientationTask *hlTask;
    tasks::qp::VectorOrientationTask *hlTask_ptr;
    double P;
    double I;
    double D;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "P", "I", "D", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!dddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpVectorOrientationTask_Type, &hlTask, &P, &I, &D, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::PIDTask(mbs_value, robotIndex, hlTask_ptr, P, I, D, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyTasksQpPIDTask__tp_init(PyTasksQpPIDTask *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[28] = {0,};
    retval = _wrap_PyTasksQpPIDTask__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpPIDTask__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyTasksQpPIDTask__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    retval = _wrap_PyTasksQpPIDTask__tp_init__3(self, args, kwargs, &exceptions[3]);
    if (!exceptions[3]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        return retval;
    }
    retval = _wrap_PyTasksQpPIDTask__tp_init__4(self, args, kwargs, &exceptions[4]);
    if (!exceptions[4]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        return retval;
    }
    retval = _wrap_PyTasksQpPIDTask__tp_init__5(self, args, kwargs, &exceptions[5]);
    if (!exceptions[5]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        return retval;
    }
    retval = _wrap_PyTasksQpPIDTask__tp_init__6(self, args, kwargs, &exceptions[6]);
    if (!exceptions[6]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        return retval;
    }
    retval = _wrap_PyTasksQpPIDTask__tp_init__7(self, args, kwargs, &exceptions[7]);
    if (!exceptions[7]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        return retval;
    }
    retval = _wrap_PyTasksQpPIDTask__tp_init__8(self, args, kwargs, &exceptions[8]);
    if (!exceptions[8]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        return retval;
    }
    retval = _wrap_PyTasksQpPIDTask__tp_init__9(self, args, kwargs, &exceptions[9]);
    if (!exceptions[9]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        return retval;
    }
    retval = _wrap_PyTasksQpPIDTask__tp_init__10(self, args, kwargs, &exceptions[10]);
    if (!exceptions[10]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        return retval;
    }
    retval = _wrap_PyTasksQpPIDTask__tp_init__11(self, args, kwargs, &exceptions[11]);
    if (!exceptions[11]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        return retval;
    }
    retval = _wrap_PyTasksQpPIDTask__tp_init__12(self, args, kwargs, &exceptions[12]);
    if (!exceptions[12]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        return retval;
    }
    retval = _wrap_PyTasksQpPIDTask__tp_init__13(self, args, kwargs, &exceptions[13]);
    if (!exceptions[13]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        return retval;
    }
    retval = _wrap_PyTasksQpPIDTask__tp_init__14(self, args, kwargs, &exceptions[14]);
    if (!exceptions[14]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        return retval;
    }
    retval = _wrap_PyTasksQpPIDTask__tp_init__15(self, args, kwargs, &exceptions[15]);
    if (!exceptions[15]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        return retval;
    }
    retval = _wrap_PyTasksQpPIDTask__tp_init__16(self, args, kwargs, &exceptions[16]);
    if (!exceptions[16]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        return retval;
    }
    retval = _wrap_PyTasksQpPIDTask__tp_init__17(self, args, kwargs, &exceptions[17]);
    if (!exceptions[17]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        return retval;
    }
    retval = _wrap_PyTasksQpPIDTask__tp_init__18(self, args, kwargs, &exceptions[18]);
    if (!exceptions[18]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        Py_DECREF(exceptions[17]);
        return retval;
    }
    retval = _wrap_PyTasksQpPIDTask__tp_init__19(self, args, kwargs, &exceptions[19]);
    if (!exceptions[19]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        Py_DECREF(exceptions[17]);
        Py_DECREF(exceptions[18]);
        return retval;
    }
    retval = _wrap_PyTasksQpPIDTask__tp_init__20(self, args, kwargs, &exceptions[20]);
    if (!exceptions[20]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        Py_DECREF(exceptions[17]);
        Py_DECREF(exceptions[18]);
        Py_DECREF(exceptions[19]);
        return retval;
    }
    retval = _wrap_PyTasksQpPIDTask__tp_init__21(self, args, kwargs, &exceptions[21]);
    if (!exceptions[21]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        Py_DECREF(exceptions[17]);
        Py_DECREF(exceptions[18]);
        Py_DECREF(exceptions[19]);
        Py_DECREF(exceptions[20]);
        return retval;
    }
    retval = _wrap_PyTasksQpPIDTask__tp_init__22(self, args, kwargs, &exceptions[22]);
    if (!exceptions[22]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        Py_DECREF(exceptions[17]);
        Py_DECREF(exceptions[18]);
        Py_DECREF(exceptions[19]);
        Py_DECREF(exceptions[20]);
        Py_DECREF(exceptions[21]);
        return retval;
    }
    retval = _wrap_PyTasksQpPIDTask__tp_init__23(self, args, kwargs, &exceptions[23]);
    if (!exceptions[23]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        Py_DECREF(exceptions[17]);
        Py_DECREF(exceptions[18]);
        Py_DECREF(exceptions[19]);
        Py_DECREF(exceptions[20]);
        Py_DECREF(exceptions[21]);
        Py_DECREF(exceptions[22]);
        return retval;
    }
    retval = _wrap_PyTasksQpPIDTask__tp_init__24(self, args, kwargs, &exceptions[24]);
    if (!exceptions[24]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        Py_DECREF(exceptions[17]);
        Py_DECREF(exceptions[18]);
        Py_DECREF(exceptions[19]);
        Py_DECREF(exceptions[20]);
        Py_DECREF(exceptions[21]);
        Py_DECREF(exceptions[22]);
        Py_DECREF(exceptions[23]);
        return retval;
    }
    retval = _wrap_PyTasksQpPIDTask__tp_init__25(self, args, kwargs, &exceptions[25]);
    if (!exceptions[25]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        Py_DECREF(exceptions[17]);
        Py_DECREF(exceptions[18]);
        Py_DECREF(exceptions[19]);
        Py_DECREF(exceptions[20]);
        Py_DECREF(exceptions[21]);
        Py_DECREF(exceptions[22]);
        Py_DECREF(exceptions[23]);
        Py_DECREF(exceptions[24]);
        return retval;
    }
    retval = _wrap_PyTasksQpPIDTask__tp_init__26(self, args, kwargs, &exceptions[26]);
    if (!exceptions[26]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        Py_DECREF(exceptions[17]);
        Py_DECREF(exceptions[18]);
        Py_DECREF(exceptions[19]);
        Py_DECREF(exceptions[20]);
        Py_DECREF(exceptions[21]);
        Py_DECREF(exceptions[22]);
        Py_DECREF(exceptions[23]);
        Py_DECREF(exceptions[24]);
        Py_DECREF(exceptions[25]);
        return retval;
    }
    retval = _wrap_PyTasksQpPIDTask__tp_init__27(self, args, kwargs, &exceptions[27]);
    if (!exceptions[27]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        Py_DECREF(exceptions[17]);
        Py_DECREF(exceptions[18]);
        Py_DECREF(exceptions[19]);
        Py_DECREF(exceptions[20]);
        Py_DECREF(exceptions[21]);
        Py_DECREF(exceptions[22]);
        Py_DECREF(exceptions[23]);
        Py_DECREF(exceptions[24]);
        Py_DECREF(exceptions[25]);
        Py_DECREF(exceptions[26]);
        return retval;
    }
    error_list = PyList_New(28);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyList_SET_ITEM(error_list, 3, PyObject_Str(exceptions[3]));
    Py_DECREF(exceptions[3]);
    PyList_SET_ITEM(error_list, 4, PyObject_Str(exceptions[4]));
    Py_DECREF(exceptions[4]);
    PyList_SET_ITEM(error_list, 5, PyObject_Str(exceptions[5]));
    Py_DECREF(exceptions[5]);
    PyList_SET_ITEM(error_list, 6, PyObject_Str(exceptions[6]));
    Py_DECREF(exceptions[6]);
    PyList_SET_ITEM(error_list, 7, PyObject_Str(exceptions[7]));
    Py_DECREF(exceptions[7]);
    PyList_SET_ITEM(error_list, 8, PyObject_Str(exceptions[8]));
    Py_DECREF(exceptions[8]);
    PyList_SET_ITEM(error_list, 9, PyObject_Str(exceptions[9]));
    Py_DECREF(exceptions[9]);
    PyList_SET_ITEM(error_list, 10, PyObject_Str(exceptions[10]));
    Py_DECREF(exceptions[10]);
    PyList_SET_ITEM(error_list, 11, PyObject_Str(exceptions[11]));
    Py_DECREF(exceptions[11]);
    PyList_SET_ITEM(error_list, 12, PyObject_Str(exceptions[12]));
    Py_DECREF(exceptions[12]);
    PyList_SET_ITEM(error_list, 13, PyObject_Str(exceptions[13]));
    Py_DECREF(exceptions[13]);
    PyList_SET_ITEM(error_list, 14, PyObject_Str(exceptions[14]));
    Py_DECREF(exceptions[14]);
    PyList_SET_ITEM(error_list, 15, PyObject_Str(exceptions[15]));
    Py_DECREF(exceptions[15]);
    PyList_SET_ITEM(error_list, 16, PyObject_Str(exceptions[16]));
    Py_DECREF(exceptions[16]);
    PyList_SET_ITEM(error_list, 17, PyObject_Str(exceptions[17]));
    Py_DECREF(exceptions[17]);
    PyList_SET_ITEM(error_list, 18, PyObject_Str(exceptions[18]));
    Py_DECREF(exceptions[18]);
    PyList_SET_ITEM(error_list, 19, PyObject_Str(exceptions[19]));
    Py_DECREF(exceptions[19]);
    PyList_SET_ITEM(error_list, 20, PyObject_Str(exceptions[20]));
    Py_DECREF(exceptions[20]);
    PyList_SET_ITEM(error_list, 21, PyObject_Str(exceptions[21]));
    Py_DECREF(exceptions[21]);
    PyList_SET_ITEM(error_list, 22, PyObject_Str(exceptions[22]));
    Py_DECREF(exceptions[22]);
    PyList_SET_ITEM(error_list, 23, PyObject_Str(exceptions[23]));
    Py_DECREF(exceptions[23]);
    PyList_SET_ITEM(error_list, 24, PyObject_Str(exceptions[24]));
    Py_DECREF(exceptions[24]);
    PyList_SET_ITEM(error_list, 25, PyObject_Str(exceptions[25]));
    Py_DECREF(exceptions[25]);
    PyList_SET_ITEM(error_list, 26, PyObject_Str(exceptions[26]));
    Py_DECREF(exceptions[26]);
    PyList_SET_ITEM(error_list, 27, PyObject_Str(exceptions[27]));
    Py_DECREF(exceptions[27]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyTasksQpPIDTask_C(PyTasksQpPIDTask *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd retval = self->obj->C();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}



PyObject *
_wrap_PyTasksQpPIDTask_D__0(PyTasksQpPIDTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    double retval;
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->D();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpPIDTask_D__1(PyTasksQpPIDTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    double weight;
    const char *keywords[] = {"weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->D(weight);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyTasksQpPIDTask_D(PyTasksQpPIDTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpPIDTask_D__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpPIDTask_D__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}



PyObject *
_wrap_PyTasksQpPIDTask_I__0(PyTasksQpPIDTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    double retval;
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->I();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpPIDTask_I__1(PyTasksQpPIDTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    double weight;
    const char *keywords[] = {"weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->I(weight);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyTasksQpPIDTask_I(PyTasksQpPIDTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpPIDTask_I__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpPIDTask_I__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksQpPIDTask_update(PyTasksQpPIDTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mb_value;
    std::vector<rbd::MultiBodyConfig> mbc_value;
    PyTasksQpSolverData *data;
    const char *keywords[] = {"mb", "mbc", "data", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mb_value, _wrap_convert_py2c__std__vector__lt___rbd__MultiBodyConfig___gt__, &mbc_value, &PyTasksQpSolverData_Type, &data)) {
        return NULL;
    }
    self->obj->update(mb_value, mbc_value, *((PyTasksQpSolverData *) data)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksQpPIDTask_Q(PyTasksQpPIDTask *self)
{
    PyObject *py_retval;
    PyEigenMatrixXd *py_MatrixXd;

    Eigen::MatrixXd retval = self->obj->Q();
    py_MatrixXd = PyObject_New(PyEigenMatrixXd, &PyEigenMatrixXd_Type);
    py_MatrixXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MatrixXd->obj = new Eigen::MatrixXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_MatrixXd);
    return py_retval;
}



PyObject *
_wrap_PyTasksQpPIDTask_P__0(PyTasksQpPIDTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    double retval;
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->P();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpPIDTask_P__1(PyTasksQpPIDTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    double weight;
    const char *keywords[] = {"weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->P(weight);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyTasksQpPIDTask_P(PyTasksQpPIDTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpPIDTask_P__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpPIDTask_P__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}



PyObject *
_wrap_PyTasksQpPIDTask_dimWeight__0(PyTasksQpPIDTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PyEigenVectorXd *py_VectorXd;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    Eigen::VectorXd const & retval = self->obj->dimWeight();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpPIDTask_dimWeight__1(PyTasksQpPIDTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyEigenVectorXd *dim;
    const char *keywords[] = {"dim", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyEigenVectorXd_Type, &dim)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->dimWeight(*((PyEigenVectorXd *) dim)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyTasksQpPIDTask_dimWeight(PyTasksQpPIDTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpPIDTask_dimWeight__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpPIDTask_dimWeight__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksQpPIDTask_errorD(PyTasksQpPIDTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyEigenVectorXd *errorD;
    const char *keywords[] = {"errorD", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyEigenVectorXd_Type, &errorD)) {
        return NULL;
    }
    self->obj->errorD(*((PyEigenVectorXd *) errorD)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksQpPIDTask_error(PyTasksQpPIDTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyEigenVectorXd *error;
    const char *keywords[] = {"error", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyEigenVectorXd_Type, &error)) {
        return NULL;
    }
    self->obj->error(*((PyEigenVectorXd *) error)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksQpPIDTask_errorI(PyTasksQpPIDTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyEigenVectorXd *errorI;
    const char *keywords[] = {"errorI", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyEigenVectorXd_Type, &errorI)) {
        return NULL;
    }
    self->obj->errorI(*((PyEigenVectorXd *) errorI)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyTasksQpPIDTask_methods[] = {
    {(char *) "C", (PyCFunction) _wrap_PyTasksQpPIDTask_C, METH_NOARGS, NULL },
    {(char *) "D", (PyCFunction) _wrap_PyTasksQpPIDTask_D, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "I", (PyCFunction) _wrap_PyTasksQpPIDTask_I, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "update", (PyCFunction) _wrap_PyTasksQpPIDTask_update, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Q", (PyCFunction) _wrap_PyTasksQpPIDTask_Q, METH_NOARGS, NULL },
    {(char *) "P", (PyCFunction) _wrap_PyTasksQpPIDTask_P, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "dimWeight", (PyCFunction) _wrap_PyTasksQpPIDTask_dimWeight, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "errorD", (PyCFunction) _wrap_PyTasksQpPIDTask_errorD, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "error", (PyCFunction) _wrap_PyTasksQpPIDTask_error, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "errorI", (PyCFunction) _wrap_PyTasksQpPIDTask_errorI, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpPIDTask__tp_dealloc(PyTasksQpPIDTask *self)
{
        tasks::qp::PIDTask *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpPIDTask__tp_richcompare (PyTasksQpPIDTask *PYBINDGEN_UNUSED(self), PyTasksQpPIDTask *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpPIDTask_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpPIDTask_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.PIDTask",            /* tp_name */
    sizeof(PyTasksQpPIDTask),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpPIDTask__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpPIDTask__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpPIDTask_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpPIDTask__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyTasksQpTargetObjectiveTask__tp_init__0(PyTasksQpTargetObjectiveTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpPositionTask *hlTask;
    tasks::qp::PositionTask *hlTask_ptr;
    double timeStep;
    double duration;
    PyEigenVectorXd *objDot;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "timeStep", "duration", "objDot", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpPositionTask_Type, &hlTask, &timeStep, &duration, &PyEigenVectorXd_Type, &objDot, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TargetObjectiveTask(mbs_value, robotIndex, hlTask_ptr, timeStep, duration, *((PyEigenVectorXd *) objDot)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTargetObjectiveTask__tp_init__1(PyTasksQpTargetObjectiveTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpPositionTask *hlTask;
    tasks::qp::PositionTask *hlTask_ptr;
    double timeStep;
    double duration;
    PyEigenVectorXd *objDot;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "timeStep", "duration", "objDot", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!O!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpPositionTask_Type, &hlTask, &timeStep, &duration, &PyEigenVectorXd_Type, &objDot, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TargetObjectiveTask(mbs_value, robotIndex, hlTask_ptr, timeStep, duration, *((PyEigenVectorXd *) objDot)->obj, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTargetObjectiveTask__tp_init__2(PyTasksQpTargetObjectiveTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpOrientationTask *hlTask;
    tasks::qp::OrientationTask *hlTask_ptr;
    double timeStep;
    double duration;
    PyEigenVectorXd *objDot;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "timeStep", "duration", "objDot", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpOrientationTask_Type, &hlTask, &timeStep, &duration, &PyEigenVectorXd_Type, &objDot, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TargetObjectiveTask(mbs_value, robotIndex, hlTask_ptr, timeStep, duration, *((PyEigenVectorXd *) objDot)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTargetObjectiveTask__tp_init__3(PyTasksQpTargetObjectiveTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpOrientationTask *hlTask;
    tasks::qp::OrientationTask *hlTask_ptr;
    double timeStep;
    double duration;
    PyEigenVectorXd *objDot;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "timeStep", "duration", "objDot", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!O!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpOrientationTask_Type, &hlTask, &timeStep, &duration, &PyEigenVectorXd_Type, &objDot, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TargetObjectiveTask(mbs_value, robotIndex, hlTask_ptr, timeStep, duration, *((PyEigenVectorXd *) objDot)->obj, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTargetObjectiveTask__tp_init__4(PyTasksQpTargetObjectiveTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpSurfaceOrientationTask *hlTask;
    tasks::qp::SurfaceOrientationTask *hlTask_ptr;
    double timeStep;
    double duration;
    PyEigenVectorXd *objDot;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "timeStep", "duration", "objDot", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpSurfaceOrientationTask_Type, &hlTask, &timeStep, &duration, &PyEigenVectorXd_Type, &objDot, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TargetObjectiveTask(mbs_value, robotIndex, hlTask_ptr, timeStep, duration, *((PyEigenVectorXd *) objDot)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTargetObjectiveTask__tp_init__5(PyTasksQpTargetObjectiveTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpSurfaceOrientationTask *hlTask;
    tasks::qp::SurfaceOrientationTask *hlTask_ptr;
    double timeStep;
    double duration;
    PyEigenVectorXd *objDot;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "timeStep", "duration", "objDot", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!O!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpSurfaceOrientationTask_Type, &hlTask, &timeStep, &duration, &PyEigenVectorXd_Type, &objDot, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TargetObjectiveTask(mbs_value, robotIndex, hlTask_ptr, timeStep, duration, *((PyEigenVectorXd *) objDot)->obj, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTargetObjectiveTask__tp_init__6(PyTasksQpTargetObjectiveTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpGazeTask *hlTask;
    tasks::qp::GazeTask *hlTask_ptr;
    double timeStep;
    double duration;
    PyEigenVectorXd *objDot;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "timeStep", "duration", "objDot", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpGazeTask_Type, &hlTask, &timeStep, &duration, &PyEigenVectorXd_Type, &objDot, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TargetObjectiveTask(mbs_value, robotIndex, hlTask_ptr, timeStep, duration, *((PyEigenVectorXd *) objDot)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTargetObjectiveTask__tp_init__7(PyTasksQpTargetObjectiveTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpGazeTask *hlTask;
    tasks::qp::GazeTask *hlTask_ptr;
    double timeStep;
    double duration;
    PyEigenVectorXd *objDot;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "timeStep", "duration", "objDot", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!O!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpGazeTask_Type, &hlTask, &timeStep, &duration, &PyEigenVectorXd_Type, &objDot, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TargetObjectiveTask(mbs_value, robotIndex, hlTask_ptr, timeStep, duration, *((PyEigenVectorXd *) objDot)->obj, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTargetObjectiveTask__tp_init__8(PyTasksQpTargetObjectiveTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpPositionBasedVisServoTask *hlTask;
    tasks::qp::PositionBasedVisServoTask *hlTask_ptr;
    double timeStep;
    double duration;
    PyEigenVectorXd *objDot;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "timeStep", "duration", "objDot", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpPositionBasedVisServoTask_Type, &hlTask, &timeStep, &duration, &PyEigenVectorXd_Type, &objDot, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TargetObjectiveTask(mbs_value, robotIndex, hlTask_ptr, timeStep, duration, *((PyEigenVectorXd *) objDot)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTargetObjectiveTask__tp_init__9(PyTasksQpTargetObjectiveTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpPositionBasedVisServoTask *hlTask;
    tasks::qp::PositionBasedVisServoTask *hlTask_ptr;
    double timeStep;
    double duration;
    PyEigenVectorXd *objDot;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "timeStep", "duration", "objDot", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!O!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpPositionBasedVisServoTask_Type, &hlTask, &timeStep, &duration, &PyEigenVectorXd_Type, &objDot, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TargetObjectiveTask(mbs_value, robotIndex, hlTask_ptr, timeStep, duration, *((PyEigenVectorXd *) objDot)->obj, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTargetObjectiveTask__tp_init__10(PyTasksQpTargetObjectiveTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpCoMTask *hlTask;
    tasks::qp::CoMTask *hlTask_ptr;
    double timeStep;
    double duration;
    PyEigenVectorXd *objDot;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "timeStep", "duration", "objDot", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpCoMTask_Type, &hlTask, &timeStep, &duration, &PyEigenVectorXd_Type, &objDot, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TargetObjectiveTask(mbs_value, robotIndex, hlTask_ptr, timeStep, duration, *((PyEigenVectorXd *) objDot)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTargetObjectiveTask__tp_init__11(PyTasksQpTargetObjectiveTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpCoMTask *hlTask;
    tasks::qp::CoMTask *hlTask_ptr;
    double timeStep;
    double duration;
    PyEigenVectorXd *objDot;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "timeStep", "duration", "objDot", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!O!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpCoMTask_Type, &hlTask, &timeStep, &duration, &PyEigenVectorXd_Type, &objDot, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TargetObjectiveTask(mbs_value, robotIndex, hlTask_ptr, timeStep, duration, *((PyEigenVectorXd *) objDot)->obj, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTargetObjectiveTask__tp_init__12(PyTasksQpTargetObjectiveTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpLinVelocityTask *hlTask;
    tasks::qp::LinVelocityTask *hlTask_ptr;
    double timeStep;
    double duration;
    PyEigenVectorXd *objDot;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "timeStep", "duration", "objDot", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpLinVelocityTask_Type, &hlTask, &timeStep, &duration, &PyEigenVectorXd_Type, &objDot, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TargetObjectiveTask(mbs_value, robotIndex, hlTask_ptr, timeStep, duration, *((PyEigenVectorXd *) objDot)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTargetObjectiveTask__tp_init__13(PyTasksQpTargetObjectiveTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpLinVelocityTask *hlTask;
    tasks::qp::LinVelocityTask *hlTask_ptr;
    double timeStep;
    double duration;
    PyEigenVectorXd *objDot;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "timeStep", "duration", "objDot", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!O!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpLinVelocityTask_Type, &hlTask, &timeStep, &duration, &PyEigenVectorXd_Type, &objDot, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TargetObjectiveTask(mbs_value, robotIndex, hlTask_ptr, timeStep, duration, *((PyEigenVectorXd *) objDot)->obj, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTargetObjectiveTask__tp_init__14(PyTasksQpTargetObjectiveTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpOrientationTrackingTask *hlTask;
    tasks::qp::OrientationTrackingTask *hlTask_ptr;
    double timeStep;
    double duration;
    PyEigenVectorXd *objDot;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "timeStep", "duration", "objDot", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpOrientationTrackingTask_Type, &hlTask, &timeStep, &duration, &PyEigenVectorXd_Type, &objDot, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TargetObjectiveTask(mbs_value, robotIndex, hlTask_ptr, timeStep, duration, *((PyEigenVectorXd *) objDot)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTargetObjectiveTask__tp_init__15(PyTasksQpTargetObjectiveTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpOrientationTrackingTask *hlTask;
    tasks::qp::OrientationTrackingTask *hlTask_ptr;
    double timeStep;
    double duration;
    PyEigenVectorXd *objDot;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "timeStep", "duration", "objDot", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!O!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpOrientationTrackingTask_Type, &hlTask, &timeStep, &duration, &PyEigenVectorXd_Type, &objDot, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TargetObjectiveTask(mbs_value, robotIndex, hlTask_ptr, timeStep, duration, *((PyEigenVectorXd *) objDot)->obj, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTargetObjectiveTask__tp_init__16(PyTasksQpTargetObjectiveTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpMomentumTask *hlTask;
    tasks::qp::MomentumTask *hlTask_ptr;
    double timeStep;
    double duration;
    PyEigenVectorXd *objDot;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "timeStep", "duration", "objDot", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpMomentumTask_Type, &hlTask, &timeStep, &duration, &PyEigenVectorXd_Type, &objDot, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TargetObjectiveTask(mbs_value, robotIndex, hlTask_ptr, timeStep, duration, *((PyEigenVectorXd *) objDot)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTargetObjectiveTask__tp_init__17(PyTasksQpTargetObjectiveTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpMomentumTask *hlTask;
    tasks::qp::MomentumTask *hlTask_ptr;
    double timeStep;
    double duration;
    PyEigenVectorXd *objDot;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "timeStep", "duration", "objDot", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!O!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpMomentumTask_Type, &hlTask, &timeStep, &duration, &PyEigenVectorXd_Type, &objDot, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TargetObjectiveTask(mbs_value, robotIndex, hlTask_ptr, timeStep, duration, *((PyEigenVectorXd *) objDot)->obj, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTargetObjectiveTask__tp_init__18(PyTasksQpTargetObjectiveTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpJointsSelector *hlTask;
    tasks::qp::JointsSelector *hlTask_ptr;
    double timeStep;
    double duration;
    PyEigenVectorXd *objDot;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "timeStep", "duration", "objDot", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpJointsSelector_Type, &hlTask, &timeStep, &duration, &PyEigenVectorXd_Type, &objDot, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TargetObjectiveTask(mbs_value, robotIndex, hlTask_ptr, timeStep, duration, *((PyEigenVectorXd *) objDot)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTargetObjectiveTask__tp_init__19(PyTasksQpTargetObjectiveTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpJointsSelector *hlTask;
    tasks::qp::JointsSelector *hlTask_ptr;
    double timeStep;
    double duration;
    PyEigenVectorXd *objDot;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "timeStep", "duration", "objDot", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!O!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpJointsSelector_Type, &hlTask, &timeStep, &duration, &PyEigenVectorXd_Type, &objDot, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TargetObjectiveTask(mbs_value, robotIndex, hlTask_ptr, timeStep, duration, *((PyEigenVectorXd *) objDot)->obj, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTargetObjectiveTask__tp_init__20(PyTasksQpTargetObjectiveTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpTransformTask *hlTask;
    tasks::qp::TransformTask *hlTask_ptr;
    double timeStep;
    double duration;
    PyEigenVectorXd *objDot;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "timeStep", "duration", "objDot", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpTransformTask_Type, &hlTask, &timeStep, &duration, &PyEigenVectorXd_Type, &objDot, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TargetObjectiveTask(mbs_value, robotIndex, hlTask_ptr, timeStep, duration, *((PyEigenVectorXd *) objDot)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTargetObjectiveTask__tp_init__21(PyTasksQpTargetObjectiveTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpTransformTask *hlTask;
    tasks::qp::TransformTask *hlTask_ptr;
    double timeStep;
    double duration;
    PyEigenVectorXd *objDot;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "timeStep", "duration", "objDot", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!O!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpTransformTask_Type, &hlTask, &timeStep, &duration, &PyEigenVectorXd_Type, &objDot, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TargetObjectiveTask(mbs_value, robotIndex, hlTask_ptr, timeStep, duration, *((PyEigenVectorXd *) objDot)->obj, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTargetObjectiveTask__tp_init__22(PyTasksQpTargetObjectiveTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpSurfaceTransformTask *hlTask;
    tasks::qp::SurfaceTransformTask *hlTask_ptr;
    double timeStep;
    double duration;
    PyEigenVectorXd *objDot;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "timeStep", "duration", "objDot", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpSurfaceTransformTask_Type, &hlTask, &timeStep, &duration, &PyEigenVectorXd_Type, &objDot, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TargetObjectiveTask(mbs_value, robotIndex, hlTask_ptr, timeStep, duration, *((PyEigenVectorXd *) objDot)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTargetObjectiveTask__tp_init__23(PyTasksQpTargetObjectiveTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpSurfaceTransformTask *hlTask;
    tasks::qp::SurfaceTransformTask *hlTask_ptr;
    double timeStep;
    double duration;
    PyEigenVectorXd *objDot;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "timeStep", "duration", "objDot", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!O!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpSurfaceTransformTask_Type, &hlTask, &timeStep, &duration, &PyEigenVectorXd_Type, &objDot, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TargetObjectiveTask(mbs_value, robotIndex, hlTask_ptr, timeStep, duration, *((PyEigenVectorXd *) objDot)->obj, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTargetObjectiveTask__tp_init__24(PyTasksQpTargetObjectiveTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpRelativeDistTask *hlTask;
    tasks::qp::RelativeDistTask *hlTask_ptr;
    double timeStep;
    double duration;
    PyEigenVectorXd *objDot;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "timeStep", "duration", "objDot", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpRelativeDistTask_Type, &hlTask, &timeStep, &duration, &PyEigenVectorXd_Type, &objDot, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TargetObjectiveTask(mbs_value, robotIndex, hlTask_ptr, timeStep, duration, *((PyEigenVectorXd *) objDot)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTargetObjectiveTask__tp_init__25(PyTasksQpTargetObjectiveTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpRelativeDistTask *hlTask;
    tasks::qp::RelativeDistTask *hlTask_ptr;
    double timeStep;
    double duration;
    PyEigenVectorXd *objDot;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "timeStep", "duration", "objDot", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!O!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpRelativeDistTask_Type, &hlTask, &timeStep, &duration, &PyEigenVectorXd_Type, &objDot, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TargetObjectiveTask(mbs_value, robotIndex, hlTask_ptr, timeStep, duration, *((PyEigenVectorXd *) objDot)->obj, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTargetObjectiveTask__tp_init__26(PyTasksQpTargetObjectiveTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpVectorOrientationTask *hlTask;
    tasks::qp::VectorOrientationTask *hlTask_ptr;
    double timeStep;
    double duration;
    PyEigenVectorXd *objDot;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "timeStep", "duration", "objDot", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpVectorOrientationTask_Type, &hlTask, &timeStep, &duration, &PyEigenVectorXd_Type, &objDot, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TargetObjectiveTask(mbs_value, robotIndex, hlTask_ptr, timeStep, duration, *((PyEigenVectorXd *) objDot)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTargetObjectiveTask__tp_init__27(PyTasksQpTargetObjectiveTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpVectorOrientationTask *hlTask;
    tasks::qp::VectorOrientationTask *hlTask_ptr;
    double timeStep;
    double duration;
    PyEigenVectorXd *objDot;
    PyEigenVectorXd *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "hlTask", "timeStep", "duration", "objDot", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!ddO!O!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpVectorOrientationTask_Type, &hlTask, &timeStep, &duration, &PyEigenVectorXd_Type, &objDot, &PyEigenVectorXd_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    hlTask_ptr = (hlTask ? hlTask->obj : NULL);
    self->obj = new tasks::qp::TargetObjectiveTask(mbs_value, robotIndex, hlTask_ptr, timeStep, duration, *((PyEigenVectorXd *) objDot)->obj, *((PyEigenVectorXd *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyTasksQpTargetObjectiveTask__tp_init(PyTasksQpTargetObjectiveTask *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[28] = {0,};
    retval = _wrap_PyTasksQpTargetObjectiveTask__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpTargetObjectiveTask__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyTasksQpTargetObjectiveTask__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    retval = _wrap_PyTasksQpTargetObjectiveTask__tp_init__3(self, args, kwargs, &exceptions[3]);
    if (!exceptions[3]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        return retval;
    }
    retval = _wrap_PyTasksQpTargetObjectiveTask__tp_init__4(self, args, kwargs, &exceptions[4]);
    if (!exceptions[4]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        return retval;
    }
    retval = _wrap_PyTasksQpTargetObjectiveTask__tp_init__5(self, args, kwargs, &exceptions[5]);
    if (!exceptions[5]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        return retval;
    }
    retval = _wrap_PyTasksQpTargetObjectiveTask__tp_init__6(self, args, kwargs, &exceptions[6]);
    if (!exceptions[6]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        return retval;
    }
    retval = _wrap_PyTasksQpTargetObjectiveTask__tp_init__7(self, args, kwargs, &exceptions[7]);
    if (!exceptions[7]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        return retval;
    }
    retval = _wrap_PyTasksQpTargetObjectiveTask__tp_init__8(self, args, kwargs, &exceptions[8]);
    if (!exceptions[8]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        return retval;
    }
    retval = _wrap_PyTasksQpTargetObjectiveTask__tp_init__9(self, args, kwargs, &exceptions[9]);
    if (!exceptions[9]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        return retval;
    }
    retval = _wrap_PyTasksQpTargetObjectiveTask__tp_init__10(self, args, kwargs, &exceptions[10]);
    if (!exceptions[10]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        return retval;
    }
    retval = _wrap_PyTasksQpTargetObjectiveTask__tp_init__11(self, args, kwargs, &exceptions[11]);
    if (!exceptions[11]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        return retval;
    }
    retval = _wrap_PyTasksQpTargetObjectiveTask__tp_init__12(self, args, kwargs, &exceptions[12]);
    if (!exceptions[12]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        return retval;
    }
    retval = _wrap_PyTasksQpTargetObjectiveTask__tp_init__13(self, args, kwargs, &exceptions[13]);
    if (!exceptions[13]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        return retval;
    }
    retval = _wrap_PyTasksQpTargetObjectiveTask__tp_init__14(self, args, kwargs, &exceptions[14]);
    if (!exceptions[14]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        return retval;
    }
    retval = _wrap_PyTasksQpTargetObjectiveTask__tp_init__15(self, args, kwargs, &exceptions[15]);
    if (!exceptions[15]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        return retval;
    }
    retval = _wrap_PyTasksQpTargetObjectiveTask__tp_init__16(self, args, kwargs, &exceptions[16]);
    if (!exceptions[16]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        return retval;
    }
    retval = _wrap_PyTasksQpTargetObjectiveTask__tp_init__17(self, args, kwargs, &exceptions[17]);
    if (!exceptions[17]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        return retval;
    }
    retval = _wrap_PyTasksQpTargetObjectiveTask__tp_init__18(self, args, kwargs, &exceptions[18]);
    if (!exceptions[18]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        Py_DECREF(exceptions[17]);
        return retval;
    }
    retval = _wrap_PyTasksQpTargetObjectiveTask__tp_init__19(self, args, kwargs, &exceptions[19]);
    if (!exceptions[19]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        Py_DECREF(exceptions[17]);
        Py_DECREF(exceptions[18]);
        return retval;
    }
    retval = _wrap_PyTasksQpTargetObjectiveTask__tp_init__20(self, args, kwargs, &exceptions[20]);
    if (!exceptions[20]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        Py_DECREF(exceptions[17]);
        Py_DECREF(exceptions[18]);
        Py_DECREF(exceptions[19]);
        return retval;
    }
    retval = _wrap_PyTasksQpTargetObjectiveTask__tp_init__21(self, args, kwargs, &exceptions[21]);
    if (!exceptions[21]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        Py_DECREF(exceptions[17]);
        Py_DECREF(exceptions[18]);
        Py_DECREF(exceptions[19]);
        Py_DECREF(exceptions[20]);
        return retval;
    }
    retval = _wrap_PyTasksQpTargetObjectiveTask__tp_init__22(self, args, kwargs, &exceptions[22]);
    if (!exceptions[22]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        Py_DECREF(exceptions[17]);
        Py_DECREF(exceptions[18]);
        Py_DECREF(exceptions[19]);
        Py_DECREF(exceptions[20]);
        Py_DECREF(exceptions[21]);
        return retval;
    }
    retval = _wrap_PyTasksQpTargetObjectiveTask__tp_init__23(self, args, kwargs, &exceptions[23]);
    if (!exceptions[23]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        Py_DECREF(exceptions[17]);
        Py_DECREF(exceptions[18]);
        Py_DECREF(exceptions[19]);
        Py_DECREF(exceptions[20]);
        Py_DECREF(exceptions[21]);
        Py_DECREF(exceptions[22]);
        return retval;
    }
    retval = _wrap_PyTasksQpTargetObjectiveTask__tp_init__24(self, args, kwargs, &exceptions[24]);
    if (!exceptions[24]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        Py_DECREF(exceptions[17]);
        Py_DECREF(exceptions[18]);
        Py_DECREF(exceptions[19]);
        Py_DECREF(exceptions[20]);
        Py_DECREF(exceptions[21]);
        Py_DECREF(exceptions[22]);
        Py_DECREF(exceptions[23]);
        return retval;
    }
    retval = _wrap_PyTasksQpTargetObjectiveTask__tp_init__25(self, args, kwargs, &exceptions[25]);
    if (!exceptions[25]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        Py_DECREF(exceptions[17]);
        Py_DECREF(exceptions[18]);
        Py_DECREF(exceptions[19]);
        Py_DECREF(exceptions[20]);
        Py_DECREF(exceptions[21]);
        Py_DECREF(exceptions[22]);
        Py_DECREF(exceptions[23]);
        Py_DECREF(exceptions[24]);
        return retval;
    }
    retval = _wrap_PyTasksQpTargetObjectiveTask__tp_init__26(self, args, kwargs, &exceptions[26]);
    if (!exceptions[26]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        Py_DECREF(exceptions[17]);
        Py_DECREF(exceptions[18]);
        Py_DECREF(exceptions[19]);
        Py_DECREF(exceptions[20]);
        Py_DECREF(exceptions[21]);
        Py_DECREF(exceptions[22]);
        Py_DECREF(exceptions[23]);
        Py_DECREF(exceptions[24]);
        Py_DECREF(exceptions[25]);
        return retval;
    }
    retval = _wrap_PyTasksQpTargetObjectiveTask__tp_init__27(self, args, kwargs, &exceptions[27]);
    if (!exceptions[27]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        Py_DECREF(exceptions[9]);
        Py_DECREF(exceptions[10]);
        Py_DECREF(exceptions[11]);
        Py_DECREF(exceptions[12]);
        Py_DECREF(exceptions[13]);
        Py_DECREF(exceptions[14]);
        Py_DECREF(exceptions[15]);
        Py_DECREF(exceptions[16]);
        Py_DECREF(exceptions[17]);
        Py_DECREF(exceptions[18]);
        Py_DECREF(exceptions[19]);
        Py_DECREF(exceptions[20]);
        Py_DECREF(exceptions[21]);
        Py_DECREF(exceptions[22]);
        Py_DECREF(exceptions[23]);
        Py_DECREF(exceptions[24]);
        Py_DECREF(exceptions[25]);
        Py_DECREF(exceptions[26]);
        return retval;
    }
    error_list = PyList_New(28);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyList_SET_ITEM(error_list, 3, PyObject_Str(exceptions[3]));
    Py_DECREF(exceptions[3]);
    PyList_SET_ITEM(error_list, 4, PyObject_Str(exceptions[4]));
    Py_DECREF(exceptions[4]);
    PyList_SET_ITEM(error_list, 5, PyObject_Str(exceptions[5]));
    Py_DECREF(exceptions[5]);
    PyList_SET_ITEM(error_list, 6, PyObject_Str(exceptions[6]));
    Py_DECREF(exceptions[6]);
    PyList_SET_ITEM(error_list, 7, PyObject_Str(exceptions[7]));
    Py_DECREF(exceptions[7]);
    PyList_SET_ITEM(error_list, 8, PyObject_Str(exceptions[8]));
    Py_DECREF(exceptions[8]);
    PyList_SET_ITEM(error_list, 9, PyObject_Str(exceptions[9]));
    Py_DECREF(exceptions[9]);
    PyList_SET_ITEM(error_list, 10, PyObject_Str(exceptions[10]));
    Py_DECREF(exceptions[10]);
    PyList_SET_ITEM(error_list, 11, PyObject_Str(exceptions[11]));
    Py_DECREF(exceptions[11]);
    PyList_SET_ITEM(error_list, 12, PyObject_Str(exceptions[12]));
    Py_DECREF(exceptions[12]);
    PyList_SET_ITEM(error_list, 13, PyObject_Str(exceptions[13]));
    Py_DECREF(exceptions[13]);
    PyList_SET_ITEM(error_list, 14, PyObject_Str(exceptions[14]));
    Py_DECREF(exceptions[14]);
    PyList_SET_ITEM(error_list, 15, PyObject_Str(exceptions[15]));
    Py_DECREF(exceptions[15]);
    PyList_SET_ITEM(error_list, 16, PyObject_Str(exceptions[16]));
    Py_DECREF(exceptions[16]);
    PyList_SET_ITEM(error_list, 17, PyObject_Str(exceptions[17]));
    Py_DECREF(exceptions[17]);
    PyList_SET_ITEM(error_list, 18, PyObject_Str(exceptions[18]));
    Py_DECREF(exceptions[18]);
    PyList_SET_ITEM(error_list, 19, PyObject_Str(exceptions[19]));
    Py_DECREF(exceptions[19]);
    PyList_SET_ITEM(error_list, 20, PyObject_Str(exceptions[20]));
    Py_DECREF(exceptions[20]);
    PyList_SET_ITEM(error_list, 21, PyObject_Str(exceptions[21]));
    Py_DECREF(exceptions[21]);
    PyList_SET_ITEM(error_list, 22, PyObject_Str(exceptions[22]));
    Py_DECREF(exceptions[22]);
    PyList_SET_ITEM(error_list, 23, PyObject_Str(exceptions[23]));
    Py_DECREF(exceptions[23]);
    PyList_SET_ITEM(error_list, 24, PyObject_Str(exceptions[24]));
    Py_DECREF(exceptions[24]);
    PyList_SET_ITEM(error_list, 25, PyObject_Str(exceptions[25]));
    Py_DECREF(exceptions[25]);
    PyList_SET_ITEM(error_list, 26, PyObject_Str(exceptions[26]));
    Py_DECREF(exceptions[26]);
    PyList_SET_ITEM(error_list, 27, PyObject_Str(exceptions[27]));
    Py_DECREF(exceptions[27]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyTasksQpTargetObjectiveTask_phi(PyTasksQpTargetObjectiveTask *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd const & retval = self->obj->phi();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}


PyObject *
_wrap_PyTasksQpTargetObjectiveTask_psi(PyTasksQpTargetObjectiveTask *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd const & retval = self->obj->psi();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}



PyObject *
_wrap_PyTasksQpTargetObjectiveTask_objDot__0(PyTasksQpTargetObjectiveTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PyEigenVectorXd *py_VectorXd;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    Eigen::VectorXd const & retval = self->obj->objDot();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpTargetObjectiveTask_objDot__1(PyTasksQpTargetObjectiveTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyEigenVectorXd *obj;
    const char *keywords[] = {"obj", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyEigenVectorXd_Type, &obj)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->objDot(*((PyEigenVectorXd *) obj)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyTasksQpTargetObjectiveTask_objDot(PyTasksQpTargetObjectiveTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpTargetObjectiveTask_objDot__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpTargetObjectiveTask_objDot__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksQpTargetObjectiveTask_C(PyTasksQpTargetObjectiveTask *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd retval = self->obj->C();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}


PyObject *
_wrap_PyTasksQpTargetObjectiveTask_update(PyTasksQpTargetObjectiveTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mb_value;
    std::vector<rbd::MultiBodyConfig> mbc_value;
    PyTasksQpSolverData *data;
    const char *keywords[] = {"mb", "mbc", "data", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mb_value, _wrap_convert_py2c__std__vector__lt___rbd__MultiBodyConfig___gt__, &mbc_value, &PyTasksQpSolverData_Type, &data)) {
        return NULL;
    }
    self->obj->update(mb_value, mbc_value, *((PyTasksQpSolverData *) data)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyTasksQpTargetObjectiveTask_iter__0(PyTasksQpTargetObjectiveTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    int retval;
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->iter();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpTargetObjectiveTask_iter__1(PyTasksQpTargetObjectiveTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    int i;
    const char *keywords[] = {"i", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &i)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->iter(i);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyTasksQpTargetObjectiveTask_iter(PyTasksQpTargetObjectiveTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpTargetObjectiveTask_iter__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpTargetObjectiveTask_iter__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksQpTargetObjectiveTask_Q(PyTasksQpTargetObjectiveTask *self)
{
    PyObject *py_retval;
    PyEigenMatrixXd *py_MatrixXd;

    Eigen::MatrixXd retval = self->obj->Q();
    py_MatrixXd = PyObject_New(PyEigenMatrixXd, &PyEigenMatrixXd_Type);
    py_MatrixXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MatrixXd->obj = new Eigen::MatrixXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_MatrixXd);
    return py_retval;
}



PyObject *
_wrap_PyTasksQpTargetObjectiveTask_dimWeight__0(PyTasksQpTargetObjectiveTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PyEigenVectorXd *py_VectorXd;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    Eigen::VectorXd const & retval = self->obj->dimWeight();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpTargetObjectiveTask_dimWeight__1(PyTasksQpTargetObjectiveTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyEigenVectorXd *w;
    const char *keywords[] = {"w", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyEigenVectorXd_Type, &w)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->dimWeight(*((PyEigenVectorXd *) w)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyTasksQpTargetObjectiveTask_dimWeight(PyTasksQpTargetObjectiveTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpTargetObjectiveTask_dimWeight__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpTargetObjectiveTask_dimWeight__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}



PyObject *
_wrap_PyTasksQpTargetObjectiveTask_nrIter__0(PyTasksQpTargetObjectiveTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    int retval;
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->nrIter();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpTargetObjectiveTask_nrIter__1(PyTasksQpTargetObjectiveTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    int i;
    const char *keywords[] = {"i", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &i)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->nrIter(i);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyTasksQpTargetObjectiveTask_nrIter(PyTasksQpTargetObjectiveTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpTargetObjectiveTask_nrIter__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpTargetObjectiveTask_nrIter__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}



PyObject *
_wrap_PyTasksQpTargetObjectiveTask_duration__0(PyTasksQpTargetObjectiveTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    double retval;
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->duration();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpTargetObjectiveTask_duration__1(PyTasksQpTargetObjectiveTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    double d;
    const char *keywords[] = {"d", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &d)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->duration(d);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyTasksQpTargetObjectiveTask_duration(PyTasksQpTargetObjectiveTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpTargetObjectiveTask_duration__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpTargetObjectiveTask_duration__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}

static PyMethodDef PyTasksQpTargetObjectiveTask_methods[] = {
    {(char *) "phi", (PyCFunction) _wrap_PyTasksQpTargetObjectiveTask_phi, METH_NOARGS, NULL },
    {(char *) "psi", (PyCFunction) _wrap_PyTasksQpTargetObjectiveTask_psi, METH_NOARGS, NULL },
    {(char *) "objDot", (PyCFunction) _wrap_PyTasksQpTargetObjectiveTask_objDot, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "C", (PyCFunction) _wrap_PyTasksQpTargetObjectiveTask_C, METH_NOARGS, NULL },
    {(char *) "update", (PyCFunction) _wrap_PyTasksQpTargetObjectiveTask_update, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "iter", (PyCFunction) _wrap_PyTasksQpTargetObjectiveTask_iter, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Q", (PyCFunction) _wrap_PyTasksQpTargetObjectiveTask_Q, METH_NOARGS, NULL },
    {(char *) "dimWeight", (PyCFunction) _wrap_PyTasksQpTargetObjectiveTask_dimWeight, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "nrIter", (PyCFunction) _wrap_PyTasksQpTargetObjectiveTask_nrIter, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "duration", (PyCFunction) _wrap_PyTasksQpTargetObjectiveTask_duration, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpTargetObjectiveTask__tp_dealloc(PyTasksQpTargetObjectiveTask *self)
{
        tasks::qp::TargetObjectiveTask *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpTargetObjectiveTask__tp_richcompare (PyTasksQpTargetObjectiveTask *PYBINDGEN_UNUSED(self), PyTasksQpTargetObjectiveTask *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpTargetObjectiveTask_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpTargetObjectiveTask_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.TargetObjectiveTask",            /* tp_name */
    sizeof(PyTasksQpTargetObjectiveTask),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpTargetObjectiveTask__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpTargetObjectiveTask__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpTargetObjectiveTask_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpTargetObjectiveTask__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyTasksQpPositionTask__tp_init(PyTasksQpPositionTask *self, PyObject *args, PyObject *kwargs)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    const char *bodyName;
    Py_ssize_t bodyName_len;
    std::string bodyName_std;
    PyEigenVector3d *pos;
    PyEigenVector3d *bodyPoint = NULL;
    const char *keywords[] = {"mbs", "robotIndex", "bodyName", "pos", "bodyPoint", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&is#O!|O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &bodyName, &bodyName_len, &PyEigenVector3d_Type, &pos, &PyEigenVector3d_Type, &bodyPoint)) {
        return -1;
    }
    bodyName_std = std::string(bodyName, bodyName_len);
    self->obj = new tasks::qp::PositionTask(mbs_value, robotIndex, bodyName_std, *((PyEigenVector3d *) pos)->obj, (bodyPoint ? (*((PyEigenVector3d *) bodyPoint)->obj) : Eigen::Vector3d::Zero()));
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}



PyObject *
_wrap_PyTasksQpPositionTask_position__0(PyTasksQpPositionTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyEigenVector3d *pos;
    const char *keywords[] = {"pos", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyEigenVector3d_Type, &pos)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->position(*((PyEigenVector3d *) pos)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpPositionTask_position__1(PyTasksQpPositionTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PyEigenVector3d *py_Vector3d;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    Eigen::Vector3d retval = self->obj->position();
    py_Vector3d = PyObject_New(PyEigenVector3d, &PyEigenVector3d_Type);
    py_Vector3d->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Vector3d->obj = new Eigen::Vector3d(retval);
    py_retval = Py_BuildValue((char *) "N", py_Vector3d);
    return py_retval;
}

PyObject * _wrap_PyTasksQpPositionTask_position(PyTasksQpPositionTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpPositionTask_position__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpPositionTask_position__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}



PyObject *
_wrap_PyTasksQpPositionTask_bodyPoint__0(PyTasksQpPositionTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyEigenVector3d *point;
    const char *keywords[] = {"point", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyEigenVector3d_Type, &point)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->bodyPoint(*((PyEigenVector3d *) point)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpPositionTask_bodyPoint__1(PyTasksQpPositionTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PyEigenVector3d *py_Vector3d;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    Eigen::Vector3d retval = self->obj->bodyPoint();
    py_Vector3d = PyObject_New(PyEigenVector3d, &PyEigenVector3d_Type);
    py_Vector3d->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Vector3d->obj = new Eigen::Vector3d(retval);
    py_retval = Py_BuildValue((char *) "N", py_Vector3d);
    return py_retval;
}

PyObject * _wrap_PyTasksQpPositionTask_bodyPoint(PyTasksQpPositionTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpPositionTask_bodyPoint__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpPositionTask_bodyPoint__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}

static PyMethodDef PyTasksQpPositionTask_methods[] = {
    {(char *) "position", (PyCFunction) _wrap_PyTasksQpPositionTask_position, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "bodyPoint", (PyCFunction) _wrap_PyTasksQpPositionTask_bodyPoint, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpPositionTask__tp_dealloc(PyTasksQpPositionTask *self)
{
        tasks::qp::PositionTask *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpPositionTask__tp_richcompare (PyTasksQpPositionTask *PYBINDGEN_UNUSED(self), PyTasksQpPositionTask *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpPositionTask_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpPositionTask_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.PositionTask",            /* tp_name */
    sizeof(PyTasksQpPositionTask),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpPositionTask__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpPositionTask__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpPositionTask_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpPositionTask__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyTasksQpOrientationTask__tp_init__0(PyTasksQpOrientationTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    const char *bodyName;
    Py_ssize_t bodyName_len;
    std::string bodyName_std;
    PyEigenQuaterniond *ori;
    const char *keywords[] = {"mbs", "robotIndex", "bodyName", "ori", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&is#O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &bodyName, &bodyName_len, &PyEigenQuaterniond_Type, &ori)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    bodyName_std = std::string(bodyName, bodyName_len);
    self->obj = new tasks::qp::OrientationTask(mbs_value, robotIndex, bodyName_std, *((PyEigenQuaterniond *) ori)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpOrientationTask__tp_init__1(PyTasksQpOrientationTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    const char *bodyName;
    Py_ssize_t bodyName_len;
    std::string bodyName_std;
    PyEigenMatrix3d *ori;
    const char *keywords[] = {"mbs", "robotIndex", "bodyName", "ori", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&is#O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &bodyName, &bodyName_len, &PyEigenMatrix3d_Type, &ori)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    bodyName_std = std::string(bodyName, bodyName_len);
    self->obj = new tasks::qp::OrientationTask(mbs_value, robotIndex, bodyName_std, *((PyEigenMatrix3d *) ori)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyTasksQpOrientationTask__tp_init(PyTasksQpOrientationTask *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpOrientationTask__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpOrientationTask__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}



PyObject *
_wrap_PyTasksQpOrientationTask_orientation__0(PyTasksQpOrientationTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyEigenMatrix3d *ori;
    const char *keywords[] = {"ori", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyEigenMatrix3d_Type, &ori)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->orientation(*((PyEigenMatrix3d *) ori)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpOrientationTask_orientation__1(PyTasksQpOrientationTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyEigenQuaterniond *ori;
    const char *keywords[] = {"ori", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyEigenQuaterniond_Type, &ori)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->orientation(*((PyEigenQuaterniond *) ori)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpOrientationTask_orientation__2(PyTasksQpOrientationTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PyEigenMatrix3d *py_Matrix3d;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    Eigen::Matrix3d retval = self->obj->orientation();
    py_Matrix3d = PyObject_New(PyEigenMatrix3d, &PyEigenMatrix3d_Type);
    py_Matrix3d->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Matrix3d->obj = new Eigen::Matrix3d(retval);
    py_retval = Py_BuildValue((char *) "N", py_Matrix3d);
    return py_retval;
}

PyObject * _wrap_PyTasksQpOrientationTask_orientation(PyTasksQpOrientationTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyTasksQpOrientationTask_orientation__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpOrientationTask_orientation__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyTasksQpOrientationTask_orientation__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}

static PyMethodDef PyTasksQpOrientationTask_methods[] = {
    {(char *) "orientation", (PyCFunction) _wrap_PyTasksQpOrientationTask_orientation, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpOrientationTask__tp_dealloc(PyTasksQpOrientationTask *self)
{
        tasks::qp::OrientationTask *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpOrientationTask__tp_richcompare (PyTasksQpOrientationTask *PYBINDGEN_UNUSED(self), PyTasksQpOrientationTask *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpOrientationTask_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpOrientationTask_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.OrientationTask",            /* tp_name */
    sizeof(PyTasksQpOrientationTask),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpOrientationTask__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpOrientationTask__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpOrientationTask_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpOrientationTask__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyTasksQpSurfaceOrientationTask__tp_init__0(PyTasksQpSurfaceOrientationTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    const char *bodyName;
    Py_ssize_t bodyName_len;
    std::string bodyName_std;
    PyEigenQuaterniond *ori;
    PySvaPTransformd *X_b_s;
    const char *keywords[] = {"mbs", "robotIndex", "bodyName", "ori", "X_b_s", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&is#O!O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &bodyName, &bodyName_len, &PyEigenQuaterniond_Type, &ori, &PySvaPTransformd_Type, &X_b_s)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    bodyName_std = std::string(bodyName, bodyName_len);
    self->obj = new tasks::qp::SurfaceOrientationTask(mbs_value, robotIndex, bodyName_std, *((PyEigenQuaterniond *) ori)->obj, *((PySvaPTransformd *) X_b_s)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpSurfaceOrientationTask__tp_init__1(PyTasksQpSurfaceOrientationTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    const char *bodyName;
    Py_ssize_t bodyName_len;
    std::string bodyName_std;
    PyEigenMatrix3d *ori;
    PySvaPTransformd *X_b_s;
    const char *keywords[] = {"mbs", "robotIndex", "bodyName", "ori", "X_b_s", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&is#O!O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &bodyName, &bodyName_len, &PyEigenMatrix3d_Type, &ori, &PySvaPTransformd_Type, &X_b_s)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    bodyName_std = std::string(bodyName, bodyName_len);
    self->obj = new tasks::qp::SurfaceOrientationTask(mbs_value, robotIndex, bodyName_std, *((PyEigenMatrix3d *) ori)->obj, *((PySvaPTransformd *) X_b_s)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyTasksQpSurfaceOrientationTask__tp_init(PyTasksQpSurfaceOrientationTask *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpSurfaceOrientationTask__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpSurfaceOrientationTask__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}



PyObject *
_wrap_PyTasksQpSurfaceOrientationTask_orientation__0(PyTasksQpSurfaceOrientationTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyEigenMatrix3d *ori;
    const char *keywords[] = {"ori", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyEigenMatrix3d_Type, &ori)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->orientation(*((PyEigenMatrix3d *) ori)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpSurfaceOrientationTask_orientation__1(PyTasksQpSurfaceOrientationTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyEigenQuaterniond *ori;
    const char *keywords[] = {"ori", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyEigenQuaterniond_Type, &ori)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->orientation(*((PyEigenQuaterniond *) ori)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpSurfaceOrientationTask_orientation__2(PyTasksQpSurfaceOrientationTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PyEigenMatrix3d *py_Matrix3d;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    Eigen::Matrix3d retval = self->obj->orientation();
    py_Matrix3d = PyObject_New(PyEigenMatrix3d, &PyEigenMatrix3d_Type);
    py_Matrix3d->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Matrix3d->obj = new Eigen::Matrix3d(retval);
    py_retval = Py_BuildValue((char *) "N", py_Matrix3d);
    return py_retval;
}

PyObject * _wrap_PyTasksQpSurfaceOrientationTask_orientation(PyTasksQpSurfaceOrientationTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyTasksQpSurfaceOrientationTask_orientation__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpSurfaceOrientationTask_orientation__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyTasksQpSurfaceOrientationTask_orientation__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}

static PyMethodDef PyTasksQpSurfaceOrientationTask_methods[] = {
    {(char *) "orientation", (PyCFunction) _wrap_PyTasksQpSurfaceOrientationTask_orientation, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpSurfaceOrientationTask__tp_dealloc(PyTasksQpSurfaceOrientationTask *self)
{
        tasks::qp::SurfaceOrientationTask *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpSurfaceOrientationTask__tp_richcompare (PyTasksQpSurfaceOrientationTask *PYBINDGEN_UNUSED(self), PyTasksQpSurfaceOrientationTask *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpSurfaceOrientationTask_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpSurfaceOrientationTask_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.SurfaceOrientationTask",            /* tp_name */
    sizeof(PyTasksQpSurfaceOrientationTask),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpSurfaceOrientationTask__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpSurfaceOrientationTask__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpSurfaceOrientationTask_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpSurfaceOrientationTask__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyTasksQpGazeTask__tp_init__0(PyTasksQpGazeTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    const char *bodyName;
    Py_ssize_t bodyName_len;
    std::string bodyName_std;
    PyEigenVector2d *point2d;
    double depthEstimate;
    PySvaPTransformd *X_b_gaze;
    PyEigenVector2d *point2d_ref = NULL;
    const char *keywords[] = {"mbs", "robotIndex", "bodyName", "point2d", "depthEstimate", "X_b_gaze", "point2d_ref", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&is#O!dO!|O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &bodyName, &bodyName_len, &PyEigenVector2d_Type, &point2d, &depthEstimate, &PySvaPTransformd_Type, &X_b_gaze, &PyEigenVector2d_Type, &point2d_ref)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    bodyName_std = std::string(bodyName, bodyName_len);
    self->obj = new tasks::qp::GazeTask(mbs_value, robotIndex, bodyName_std, *((PyEigenVector2d *) point2d)->obj, depthEstimate, *((PySvaPTransformd *) X_b_gaze)->obj, (point2d_ref ? (*((PyEigenVector2d *) point2d_ref)->obj) : Eigen::Vector2d::Zero()));
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpGazeTask__tp_init__1(PyTasksQpGazeTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    const char *bodyName;
    Py_ssize_t bodyName_len;
    std::string bodyName_std;
    PyEigenVector3d *point3d;
    PySvaPTransformd *X_b_gaze;
    PyEigenVector2d *point2d_ref = NULL;
    const char *keywords[] = {"mbs", "robotIndex", "bodyName", "point3d", "X_b_gaze", "point2d_ref", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&is#O!O!|O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &bodyName, &bodyName_len, &PyEigenVector3d_Type, &point3d, &PySvaPTransformd_Type, &X_b_gaze, &PyEigenVector2d_Type, &point2d_ref)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    bodyName_std = std::string(bodyName, bodyName_len);
    self->obj = new tasks::qp::GazeTask(mbs_value, robotIndex, bodyName_std, *((PyEigenVector3d *) point3d)->obj, *((PySvaPTransformd *) X_b_gaze)->obj, (point2d_ref ? (*((PyEigenVector2d *) point2d_ref)->obj) : Eigen::Vector2d::Zero()));
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyTasksQpGazeTask__tp_init(PyTasksQpGazeTask *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpGazeTask__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpGazeTask__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}



PyObject *
_wrap_PyTasksQpGazeTask_error__0(PyTasksQpGazeTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyEigenVector2d *point2d;
    PyEigenVector2d *point2d_ref = NULL;
    const char *keywords[] = {"point2d", "point2d_ref", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!|O!", (char **) keywords, &PyEigenVector2d_Type, &point2d, &PyEigenVector2d_Type, &point2d_ref)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->error(*((PyEigenVector2d *) point2d)->obj, (point2d_ref ? (*((PyEigenVector2d *) point2d_ref)->obj) : Eigen::Vector2d::Zero()));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpGazeTask_error__1(PyTasksQpGazeTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyEigenVector3d *point3d;
    PyEigenVector2d *point2d_ref = NULL;
    const char *keywords[] = {"point3d", "point2d_ref", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!|O!", (char **) keywords, &PyEigenVector3d_Type, &point3d, &PyEigenVector2d_Type, &point2d_ref)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->error(*((PyEigenVector3d *) point3d)->obj, (point2d_ref ? (*((PyEigenVector2d *) point2d_ref)->obj) : Eigen::Vector2d::Zero()));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyTasksQpGazeTask_error(PyTasksQpGazeTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpGazeTask_error__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpGazeTask_error__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}

static PyMethodDef PyTasksQpGazeTask_methods[] = {
    {(char *) "error", (PyCFunction) _wrap_PyTasksQpGazeTask_error, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpGazeTask__tp_dealloc(PyTasksQpGazeTask *self)
{
        tasks::qp::GazeTask *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpGazeTask__tp_richcompare (PyTasksQpGazeTask *PYBINDGEN_UNUSED(self), PyTasksQpGazeTask *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpGazeTask_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpGazeTask_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.GazeTask",            /* tp_name */
    sizeof(PyTasksQpGazeTask),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpGazeTask__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpGazeTask__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpGazeTask_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpGazeTask__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyTasksQpPositionBasedVisServoTask__tp_init(PyTasksQpPositionBasedVisServoTask *self, PyObject *args, PyObject *kwargs)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    const char *bodyName;
    Py_ssize_t bodyName_len;
    std::string bodyName_std;
    PySvaPTransformd *X_t_s;
    PySvaPTransformd *X_b_s = NULL;
    const char *keywords[] = {"mbs", "robotIndex", "bodyName", "X_t_s", "X_b_s", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&is#O!|O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &bodyName, &bodyName_len, &PySvaPTransformd_Type, &X_t_s, &PySvaPTransformd_Type, &X_b_s)) {
        return -1;
    }
    bodyName_std = std::string(bodyName, bodyName_len);
    self->obj = new tasks::qp::PositionBasedVisServoTask(mbs_value, robotIndex, bodyName_std, *((PySvaPTransformd *) X_t_s)->obj, (X_b_s ? (*((PySvaPTransformd *) X_b_s)->obj) : sva::PTransformd::Identity()));
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}


PyObject *
_wrap_PyTasksQpPositionBasedVisServoTask_error(PyTasksQpPositionBasedVisServoTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PySvaPTransformd *X_t_s;
    const char *keywords[] = {"X_t_s", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PySvaPTransformd_Type, &X_t_s)) {
        return NULL;
    }
    self->obj->error(*((PySvaPTransformd *) X_t_s)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyTasksQpPositionBasedVisServoTask_methods[] = {
    {(char *) "error", (PyCFunction) _wrap_PyTasksQpPositionBasedVisServoTask_error, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpPositionBasedVisServoTask__tp_dealloc(PyTasksQpPositionBasedVisServoTask *self)
{
        tasks::qp::PositionBasedVisServoTask *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpPositionBasedVisServoTask__tp_richcompare (PyTasksQpPositionBasedVisServoTask *PYBINDGEN_UNUSED(self), PyTasksQpPositionBasedVisServoTask *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpPositionBasedVisServoTask_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpPositionBasedVisServoTask_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.PositionBasedVisServoTask",            /* tp_name */
    sizeof(PyTasksQpPositionBasedVisServoTask),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpPositionBasedVisServoTask__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpPositionBasedVisServoTask__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpPositionBasedVisServoTask_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpPositionBasedVisServoTask__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyTasksQpPostureTask__tp_init(PyTasksQpPostureTask *self, PyObject *args, PyObject *kwargs)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    std::vector<std::vector<double> > q_value;
    double stiffness;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "q", "stiffness", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO&dd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, _wrap_convert_py2c__std__vector__lt___std__vector__lt___double___gt_____gt__, &q_value, &stiffness, &weight)) {
        return -1;
    }
    self->obj = new tasks::qp::PostureTask(mbs_value, robotIndex, q_value, stiffness, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}



PyObject *
_wrap_PyTasksQpPostureTask_gains__0(PyTasksQpPostureTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    double stiffness;
    const char *keywords[] = {"stiffness", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &stiffness)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->gains(stiffness);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpPostureTask_gains__1(PyTasksQpPostureTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    double stiffness;
    double damping;
    const char *keywords[] = {"stiffness", "damping", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "dd", (char **) keywords, &stiffness, &damping)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->gains(stiffness, damping);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyTasksQpPostureTask_gains(PyTasksQpPostureTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpPostureTask_gains__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpPostureTask_gains__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksQpPostureTask_update(PyTasksQpPostureTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mbs_value;
    std::vector<rbd::MultiBodyConfig> mbcs_value;
    PyTasksQpSolverData *data;
    const char *keywords[] = {"mbs", "mbcs", "data", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, _wrap_convert_py2c__std__vector__lt___rbd__MultiBodyConfig___gt__, &mbcs_value, &PyTasksQpSolverData_Type, &data)) {
        return NULL;
    }
    self->obj->update(mbs_value, mbcs_value, *((PyTasksQpSolverData *) data)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksQpPostureTask_jointsGains(PyTasksQpPostureTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mbs_value;
    std::vector<tasks::qp::JointGains> jg_value;
    const char *keywords[] = {"mbs", "jg", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O&", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, _wrap_convert_py2c__std__vector__lt___tasks__qp__JointGains___gt__, &jg_value)) {
        return NULL;
    }
    self->obj->jointsGains(mbs_value, jg_value);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksQpPostureTask_damping(PyTasksQpPostureTask *self)
{
    PyObject *py_retval;
    double retval;

    retval = self->obj->damping();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}



PyObject *
_wrap_PyTasksQpPostureTask_stiffness__0(PyTasksQpPostureTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    double retval;
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->stiffness();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpPostureTask_stiffness__1(PyTasksQpPostureTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    double weight;
    const char *keywords[] = {"weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->stiffness(weight);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyTasksQpPostureTask_stiffness(PyTasksQpPostureTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpPostureTask_stiffness__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpPostureTask_stiffness__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksQpPostureTask_eval(PyTasksQpPostureTask *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd retval = self->obj->eval();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}


PyObject *
_wrap_PyTasksQpPostureTask_jointsStiffness(PyTasksQpPostureTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mbs_value;
    std::vector<tasks::qp::JointStiffness> js_value;
    const char *keywords[] = {"mbs", "js", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O&", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, _wrap_convert_py2c__std__vector__lt___tasks__qp__JointStiffness___gt__, &js_value)) {
        return NULL;
    }
    self->obj->jointsStiffness(mbs_value, js_value);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyTasksQpPostureTask_posture__0(PyTasksQpPostureTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    std::vector<std::vector<double> > q_value;
    const char *keywords[] = {"q", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&", (char **) keywords, _wrap_convert_py2c__std__vector__lt___std__vector__lt___double___gt_____gt__, &q_value)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->posture(q_value);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpPostureTask_posture__1(PyTasksQpPostureTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    std::vector< std::vector< double > > retval;
    const char *keywords[] = {NULL};
    Pystd__vector__lt__std__vector__lt__double__gt_____gt__ *py_std__vector__lt__std__vector__lt__double__gt_____gt__;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->posture();
    py_std__vector__lt__std__vector__lt__double__gt_____gt__ = PyObject_New(Pystd__vector__lt__std__vector__lt__double__gt_____gt__, &Pystd__vector__lt__std__vector__lt__double__gt_____gt___Type);
    py_std__vector__lt__std__vector__lt__double__gt_____gt__->obj = new std::vector<std::vector<double> >(retval);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt__std__vector__lt__double__gt_____gt__);
    return py_retval;
}

PyObject * _wrap_PyTasksQpPostureTask_posture(PyTasksQpPostureTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpPostureTask_posture__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpPostureTask_posture__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}

static PyMethodDef PyTasksQpPostureTask_methods[] = {
    {(char *) "gains", (PyCFunction) _wrap_PyTasksQpPostureTask_gains, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "update", (PyCFunction) _wrap_PyTasksQpPostureTask_update, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "jointsGains", (PyCFunction) _wrap_PyTasksQpPostureTask_jointsGains, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "damping", (PyCFunction) _wrap_PyTasksQpPostureTask_damping, METH_NOARGS, NULL },
    {(char *) "stiffness", (PyCFunction) _wrap_PyTasksQpPostureTask_stiffness, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "eval", (PyCFunction) _wrap_PyTasksQpPostureTask_eval, METH_NOARGS, NULL },
    {(char *) "jointsStiffness", (PyCFunction) _wrap_PyTasksQpPostureTask_jointsStiffness, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "posture", (PyCFunction) _wrap_PyTasksQpPostureTask_posture, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpPostureTask__tp_dealloc(PyTasksQpPostureTask *self)
{
        tasks::qp::PostureTask *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpPostureTask__tp_richcompare (PyTasksQpPostureTask *PYBINDGEN_UNUSED(self), PyTasksQpPostureTask *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpPostureTask_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpPostureTask_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.PostureTask",            /* tp_name */
    sizeof(PyTasksQpPostureTask),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpPostureTask__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpPostureTask__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpPostureTask_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpPostureTask__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyTasksQpTorqueTask__tp_init__0(PyTasksQpTorqueTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksTorqueBound *tb;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "tb", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksTorqueBound_Type, &tb, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new tasks::qp::TorqueTask(mbs_value, robotIndex, *((PyTasksTorqueBound *) tb)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTorqueTask__tp_init__1(PyTasksQpTorqueTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksTorqueBound *tb;
    PyEigenVectorXd *jointSelect;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "tb", "jointSelect", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!O!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksTorqueBound_Type, &tb, &PyEigenVectorXd_Type, &jointSelect, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new tasks::qp::TorqueTask(mbs_value, robotIndex, *((PyTasksTorqueBound *) tb)->obj, *((PyEigenVectorXd *) jointSelect)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpTorqueTask__tp_init__2(PyTasksQpTorqueTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksTorqueBound *tb;
    const char *efName;
    Py_ssize_t efName_len;
    std::string efName_std;
    double weight;
    const char *keywords[] = {"mbs", "robotIndex", "tb", "efName", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!s#d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksTorqueBound_Type, &tb, &efName, &efName_len, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    efName_std = std::string(efName, efName_len);
    self->obj = new tasks::qp::TorqueTask(mbs_value, robotIndex, *((PyTasksTorqueBound *) tb)->obj, efName_std, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyTasksQpTorqueTask__tp_init(PyTasksQpTorqueTask *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyTasksQpTorqueTask__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpTorqueTask__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyTasksQpTorqueTask__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyTasksQpTorqueTask_update(PyTasksQpTorqueTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mbs_value;
    std::vector<rbd::MultiBodyConfig> mbcs_value;
    PyTasksQpSolverData *data;
    const char *keywords[] = {"mbs", "mbcs", "data", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, _wrap_convert_py2c__std__vector__lt___rbd__MultiBodyConfig___gt__, &mbcs_value, &PyTasksQpSolverData_Type, &data)) {
        return NULL;
    }
    self->obj->update(mbs_value, mbcs_value, *((PyTasksQpSolverData *) data)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksQpTorqueTask_jointSelect(PyTasksQpTorqueTask *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd const retval = self->obj->jointSelect();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}

static PyMethodDef PyTasksQpTorqueTask_methods[] = {
    {(char *) "update", (PyCFunction) _wrap_PyTasksQpTorqueTask_update, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "jointSelect", (PyCFunction) _wrap_PyTasksQpTorqueTask_jointSelect, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpTorqueTask__tp_dealloc(PyTasksQpTorqueTask *self)
{
        tasks::qp::TorqueTask *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpTorqueTask__tp_richcompare (PyTasksQpTorqueTask *PYBINDGEN_UNUSED(self), PyTasksQpTorqueTask *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpTorqueTask_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpTorqueTask_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.TorqueTask",            /* tp_name */
    sizeof(PyTasksQpTorqueTask),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpTorqueTask__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpTorqueTask__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpTorqueTask_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpTorqueTask__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyTasksQpCoMTask__tp_init__0(PyTasksQpCoMTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyEigenVector3d *com;
    const char *keywords[] = {"mbs", "robotIndex", "com", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyEigenVector3d_Type, &com)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new tasks::qp::CoMTask(mbs_value, robotIndex, *((PyEigenVector3d *) com)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpCoMTask__tp_init__1(PyTasksQpCoMTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyEigenVector3d *com;
    std::vector<double> weight_value;
    const char *keywords[] = {"mbs", "robotIndex", "com", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!O&", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyEigenVector3d_Type, &com, _wrap_convert_py2c__std__vector__lt___double___gt__, &weight_value)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    try
    {
        self->obj = new tasks::qp::CoMTask(mbs_value, robotIndex, *((PyEigenVector3d *) com)->obj, weight_value);
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    } catch ( ::std::domain_error const &exc) {
        PyErr_SetString((PyObject *) Py___std__domain_error_Type, exc.what());
        return -1;
    }
    return 0;
}

int _wrap_PyTasksQpCoMTask__tp_init(PyTasksQpCoMTask *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpCoMTask__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpCoMTask__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyTasksQpCoMTask_updateInertialParameters(PyTasksQpCoMTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mbs_value;
    const char *keywords[] = {"mbs", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value)) {
        return NULL;
    }
    self->obj->updateInertialParameters(mbs_value);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyTasksQpCoMTask_com__0(PyTasksQpCoMTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyEigenVector3d *com;
    const char *keywords[] = {"com", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyEigenVector3d_Type, &com)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->com(*((PyEigenVector3d *) com)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpCoMTask_com__1(PyTasksQpCoMTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PyEigenVector3d *py_Vector3d;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    Eigen::Vector3d const & retval = self->obj->com();
    py_Vector3d = PyObject_New(PyEigenVector3d, &PyEigenVector3d_Type);
    py_Vector3d->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Vector3d->obj = new Eigen::Vector3d(retval);
    py_retval = Py_BuildValue((char *) "N", py_Vector3d);
    return py_retval;
}

PyObject * _wrap_PyTasksQpCoMTask_com(PyTasksQpCoMTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpCoMTask_com__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpCoMTask_com__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}

static PyMethodDef PyTasksQpCoMTask_methods[] = {
    {(char *) "updateInertialParameters", (PyCFunction) _wrap_PyTasksQpCoMTask_updateInertialParameters, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "com", (PyCFunction) _wrap_PyTasksQpCoMTask_com, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpCoMTask__tp_dealloc(PyTasksQpCoMTask *self)
{
        tasks::qp::CoMTask *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpCoMTask__tp_richcompare (PyTasksQpCoMTask *PYBINDGEN_UNUSED(self), PyTasksQpCoMTask *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpCoMTask_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpCoMTask_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.CoMTask",            /* tp_name */
    sizeof(PyTasksQpCoMTask),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpCoMTask__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpCoMTask__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpCoMTask_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpCoMTask__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyTasksQpMultiCoMTask__tp_init__0(PyTasksQpMultiCoMTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    std::vector<int> robotIndexex_value;
    PyEigenVector3d *com;
    double stiffness;
    double weight;
    const char *keywords[] = {"mbs", "robotIndexex", "com", "stiffness", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O&O!dd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, _wrap_convert_py2c__std__vector__lt___int___gt__, &robotIndexex_value, &PyEigenVector3d_Type, &com, &stiffness, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new tasks::qp::MultiCoMTask(mbs_value, robotIndexex_value, *((PyEigenVector3d *) com)->obj, stiffness, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQpMultiCoMTask__tp_init__1(PyTasksQpMultiCoMTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<rbd::MultiBody> mbs_value;
    std::vector<int> robotIndexex_value;
    PyEigenVector3d *com;
    double stiffness;
    PyEigenVector3d *dimWeight;
    double weight;
    const char *keywords[] = {"mbs", "robotIndexex", "com", "stiffness", "dimWeight", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O&O!dO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, _wrap_convert_py2c__std__vector__lt___int___gt__, &robotIndexex_value, &PyEigenVector3d_Type, &com, &stiffness, &PyEigenVector3d_Type, &dimWeight, &weight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new tasks::qp::MultiCoMTask(mbs_value, robotIndexex_value, *((PyEigenVector3d *) com)->obj, stiffness, *((PyEigenVector3d *) dimWeight)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyTasksQpMultiCoMTask__tp_init(PyTasksQpMultiCoMTask *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpMultiCoMTask__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpMultiCoMTask__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}



PyObject *
_wrap_PyTasksQpMultiCoMTask_stiffness__0(PyTasksQpMultiCoMTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    double stiffness;
    const char *keywords[] = {"stiffness", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &stiffness)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->stiffness(stiffness);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpMultiCoMTask_stiffness__1(PyTasksQpMultiCoMTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    double retval;
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->stiffness();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}

PyObject * _wrap_PyTasksQpMultiCoMTask_stiffness(PyTasksQpMultiCoMTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpMultiCoMTask_stiffness__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpMultiCoMTask_stiffness__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}



PyObject *
_wrap_PyTasksQpMultiCoMTask_com__0(PyTasksQpMultiCoMTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyEigenVector3d *com;
    const char *keywords[] = {"com", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyEigenVector3d_Type, &com)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->com(*((PyEigenVector3d *) com)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpMultiCoMTask_com__1(PyTasksQpMultiCoMTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PyEigenVector3d *py_Vector3d;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    Eigen::Vector3d const & retval = self->obj->com();
    py_Vector3d = PyObject_New(PyEigenVector3d, &PyEigenVector3d_Type);
    py_Vector3d->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Vector3d->obj = new Eigen::Vector3d(retval);
    py_retval = Py_BuildValue((char *) "N", py_Vector3d);
    return py_retval;
}

PyObject * _wrap_PyTasksQpMultiCoMTask_com(PyTasksQpMultiCoMTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpMultiCoMTask_com__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpMultiCoMTask_com__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksQpMultiCoMTask_update(PyTasksQpMultiCoMTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mbs_value;
    std::vector<rbd::MultiBodyConfig> mbcs_value;
    PyTasksQpSolverData *data;
    const char *keywords[] = {"mbs", "mbcs", "data", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, _wrap_convert_py2c__std__vector__lt___rbd__MultiBodyConfig___gt__, &mbcs_value, &PyTasksQpSolverData_Type, &data)) {
        return NULL;
    }
    self->obj->update(mbs_value, mbcs_value, *((PyTasksQpSolverData *) data)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksQpMultiCoMTask_updateInertialParameters(PyTasksQpMultiCoMTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mbs_value;
    const char *keywords[] = {"mbs", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value)) {
        return NULL;
    }
    self->obj->updateInertialParameters(mbs_value);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyTasksQpMultiCoMTask_dimWeight__0(PyTasksQpMultiCoMTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyEigenVector3d *dimWeight;
    const char *keywords[] = {"dimWeight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyEigenVector3d_Type, &dimWeight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->dimWeight(*((PyEigenVector3d *) dimWeight)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpMultiCoMTask_dimWeight__1(PyTasksQpMultiCoMTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PyEigenVector3d *py_Vector3d;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    Eigen::Vector3d retval = self->obj->dimWeight();
    py_Vector3d = PyObject_New(PyEigenVector3d, &PyEigenVector3d_Type);
    py_Vector3d->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Vector3d->obj = new Eigen::Vector3d(retval);
    py_retval = Py_BuildValue((char *) "N", py_Vector3d);
    return py_retval;
}

PyObject * _wrap_PyTasksQpMultiCoMTask_dimWeight(PyTasksQpMultiCoMTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpMultiCoMTask_dimWeight__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpMultiCoMTask_dimWeight__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksQpMultiCoMTask_eval(PyTasksQpMultiCoMTask *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd retval = self->obj->eval();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}


PyObject *
_wrap_PyTasksQpMultiCoMTask_speed(PyTasksQpMultiCoMTask *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd retval = self->obj->speed();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}

static PyMethodDef PyTasksQpMultiCoMTask_methods[] = {
    {(char *) "stiffness", (PyCFunction) _wrap_PyTasksQpMultiCoMTask_stiffness, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "com", (PyCFunction) _wrap_PyTasksQpMultiCoMTask_com, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "update", (PyCFunction) _wrap_PyTasksQpMultiCoMTask_update, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "updateInertialParameters", (PyCFunction) _wrap_PyTasksQpMultiCoMTask_updateInertialParameters, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "dimWeight", (PyCFunction) _wrap_PyTasksQpMultiCoMTask_dimWeight, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "eval", (PyCFunction) _wrap_PyTasksQpMultiCoMTask_eval, METH_NOARGS, NULL },
    {(char *) "speed", (PyCFunction) _wrap_PyTasksQpMultiCoMTask_speed, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpMultiCoMTask__tp_dealloc(PyTasksQpMultiCoMTask *self)
{
        tasks::qp::MultiCoMTask *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpMultiCoMTask__tp_richcompare (PyTasksQpMultiCoMTask *PYBINDGEN_UNUSED(self), PyTasksQpMultiCoMTask *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpMultiCoMTask_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpMultiCoMTask_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.MultiCoMTask",            /* tp_name */
    sizeof(PyTasksQpMultiCoMTask),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpMultiCoMTask__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpMultiCoMTask__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpMultiCoMTask_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpMultiCoMTask__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyTasksQpMultiRobotTransformTask__tp_init(PyTasksQpMultiRobotTransformTask *self, PyObject *args, PyObject *kwargs)
{
    std::vector<rbd::MultiBody> mbs_value;
    int r1Index;
    int r2Index;
    const char *r1BodyName;
    Py_ssize_t r1BodyName_len;
    std::string r1BodyName_std;
    const char *r2BodyName;
    Py_ssize_t r2BodyName_len;
    std::string r2BodyName_std;
    PySvaPTransformd *X_r1b_r1s;
    PySvaPTransformd *X_r2b_r2s;
    double stiffness;
    double weight;
    const char *keywords[] = {"mbs", "r1Index", "r2Index", "r1BodyName", "r2BodyName", "X_r1b_r1s", "X_r2b_r2s", "stiffness", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iis#s#O!O!dd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &r1Index, &r2Index, &r1BodyName, &r1BodyName_len, &r2BodyName, &r2BodyName_len, &PySvaPTransformd_Type, &X_r1b_r1s, &PySvaPTransformd_Type, &X_r2b_r2s, &stiffness, &weight)) {
        return -1;
    }
    r1BodyName_std = std::string(r1BodyName, r1BodyName_len);
    r2BodyName_std = std::string(r2BodyName, r2BodyName_len);
    self->obj = new tasks::qp::MultiRobotTransformTask(mbs_value, r1Index, r2Index, r1BodyName_std, r2BodyName_std, *((PySvaPTransformd *) X_r1b_r1s)->obj, *((PySvaPTransformd *) X_r2b_r2s)->obj, stiffness, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}


PyObject *
_wrap_PyTasksQpMultiRobotTransformTask_eval(PyTasksQpMultiRobotTransformTask *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd const & retval = self->obj->eval();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}



PyObject *
_wrap_PyTasksQpMultiRobotTransformTask_X_r1b_r1s__0(PyTasksQpMultiRobotTransformTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PySvaPTransformd *X_r1b_r1s;
    const char *keywords[] = {"X_r1b_r1s", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PySvaPTransformd_Type, &X_r1b_r1s)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->X_r1b_r1s(*((PySvaPTransformd *) X_r1b_r1s)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpMultiRobotTransformTask_X_r1b_r1s__1(PyTasksQpMultiRobotTransformTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PySvaPTransformd *py_PTransformd;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    sva::PTransformd retval = self->obj->X_r1b_r1s();
    py_PTransformd = PyObject_New(PySvaPTransformd, &PySvaPTransformd_Type);
    py_PTransformd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_PTransformd->obj = new sva::PTransformd(retval);
    py_retval = Py_BuildValue((char *) "N", py_PTransformd);
    return py_retval;
}

PyObject * _wrap_PyTasksQpMultiRobotTransformTask_X_r1b_r1s(PyTasksQpMultiRobotTransformTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpMultiRobotTransformTask_X_r1b_r1s__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpMultiRobotTransformTask_X_r1b_r1s__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksQpMultiRobotTransformTask_update(PyTasksQpMultiRobotTransformTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mbs_value;
    std::vector<rbd::MultiBodyConfig> mbcs_value;
    PyTasksQpSolverData *data;
    const char *keywords[] = {"mbs", "mbcs", "data", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, _wrap_convert_py2c__std__vector__lt___rbd__MultiBodyConfig___gt__, &mbcs_value, &PyTasksQpSolverData_Type, &data)) {
        return NULL;
    }
    self->obj->update(mbs_value, mbcs_value, *((PyTasksQpSolverData *) data)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyTasksQpMultiRobotTransformTask_dimWeight__0(PyTasksQpMultiRobotTransformTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyEigenVector6d *dimWeight;
    const char *keywords[] = {"dimWeight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyEigenVector6d_Type, &dimWeight)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->dimWeight(*((PyEigenVector6d *) dimWeight)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpMultiRobotTransformTask_dimWeight__1(PyTasksQpMultiRobotTransformTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PyEigenVector6d *py_Vector6d;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    Eigen::Vector6d retval = self->obj->dimWeight();
    py_Vector6d = PyObject_New(PyEigenVector6d, &PyEigenVector6d_Type);
    py_Vector6d->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Vector6d->obj = new Eigen::Vector6d(retval);
    py_retval = Py_BuildValue((char *) "N", py_Vector6d);
    return py_retval;
}

PyObject * _wrap_PyTasksQpMultiRobotTransformTask_dimWeight(PyTasksQpMultiRobotTransformTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpMultiRobotTransformTask_dimWeight__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpMultiRobotTransformTask_dimWeight__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}



PyObject *
_wrap_PyTasksQpMultiRobotTransformTask_stiffness__0(PyTasksQpMultiRobotTransformTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    double stiffness;
    const char *keywords[] = {"stiffness", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &stiffness)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->stiffness(stiffness);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpMultiRobotTransformTask_stiffness__1(PyTasksQpMultiRobotTransformTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    double retval;
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->stiffness();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}

PyObject * _wrap_PyTasksQpMultiRobotTransformTask_stiffness(PyTasksQpMultiRobotTransformTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpMultiRobotTransformTask_stiffness__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpMultiRobotTransformTask_stiffness__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}



PyObject *
_wrap_PyTasksQpMultiRobotTransformTask_X_r2b_r2s__0(PyTasksQpMultiRobotTransformTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PySvaPTransformd *X_r2b_r2s;
    const char *keywords[] = {"X_r2b_r2s", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PySvaPTransformd_Type, &X_r2b_r2s)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->X_r2b_r2s(*((PySvaPTransformd *) X_r2b_r2s)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpMultiRobotTransformTask_X_r2b_r2s__1(PyTasksQpMultiRobotTransformTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PySvaPTransformd *py_PTransformd;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    sva::PTransformd retval = self->obj->X_r2b_r2s();
    py_PTransformd = PyObject_New(PySvaPTransformd, &PySvaPTransformd_Type);
    py_PTransformd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_PTransformd->obj = new sva::PTransformd(retval);
    py_retval = Py_BuildValue((char *) "N", py_PTransformd);
    return py_retval;
}

PyObject * _wrap_PyTasksQpMultiRobotTransformTask_X_r2b_r2s(PyTasksQpMultiRobotTransformTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpMultiRobotTransformTask_X_r2b_r2s__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpMultiRobotTransformTask_X_r2b_r2s__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksQpMultiRobotTransformTask_speed(PyTasksQpMultiRobotTransformTask *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd const & retval = self->obj->speed();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}

static PyMethodDef PyTasksQpMultiRobotTransformTask_methods[] = {
    {(char *) "eval", (PyCFunction) _wrap_PyTasksQpMultiRobotTransformTask_eval, METH_NOARGS, NULL },
    {(char *) "X_r1b_r1s", (PyCFunction) _wrap_PyTasksQpMultiRobotTransformTask_X_r1b_r1s, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "update", (PyCFunction) _wrap_PyTasksQpMultiRobotTransformTask_update, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "dimWeight", (PyCFunction) _wrap_PyTasksQpMultiRobotTransformTask_dimWeight, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "stiffness", (PyCFunction) _wrap_PyTasksQpMultiRobotTransformTask_stiffness, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "X_r2b_r2s", (PyCFunction) _wrap_PyTasksQpMultiRobotTransformTask_X_r2b_r2s, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "speed", (PyCFunction) _wrap_PyTasksQpMultiRobotTransformTask_speed, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpMultiRobotTransformTask__tp_dealloc(PyTasksQpMultiRobotTransformTask *self)
{
        tasks::qp::MultiRobotTransformTask *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpMultiRobotTransformTask__tp_richcompare (PyTasksQpMultiRobotTransformTask *PYBINDGEN_UNUSED(self), PyTasksQpMultiRobotTransformTask *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpMultiRobotTransformTask_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpMultiRobotTransformTask_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.MultiRobotTransformTask",            /* tp_name */
    sizeof(PyTasksQpMultiRobotTransformTask),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpMultiRobotTransformTask__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpMultiRobotTransformTask__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpMultiRobotTransformTask_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpMultiRobotTransformTask__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyTasksQpMomentumTask__tp_init(PyTasksQpMomentumTask *self, PyObject *args, PyObject *kwargs)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PySvaForceVecd *mom;
    const char *keywords[] = {"mbs", "robotIndex", "mom", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PySvaForceVecd_Type, &mom)) {
        return -1;
    }
    self->obj = new tasks::qp::MomentumTask(mbs_value, robotIndex, *((PySvaForceVecd *) mom)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}



PyObject *
_wrap_PyTasksQpMomentumTask_momentum__0(PyTasksQpMomentumTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PySvaForceVecd *mom;
    const char *keywords[] = {"mom", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PySvaForceVecd_Type, &mom)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->momentum(*((PySvaForceVecd *) mom)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpMomentumTask_momentum__1(PyTasksQpMomentumTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PySvaForceVecd *py_ForceVecd;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    sva::ForceVecd const & retval = self->obj->momentum();
    py_ForceVecd = PyObject_New(PySvaForceVecd, &PySvaForceVecd_Type);
    py_ForceVecd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_ForceVecd->obj = new sva::ForceVecd(retval);
    py_retval = Py_BuildValue((char *) "N", py_ForceVecd);
    return py_retval;
}

PyObject * _wrap_PyTasksQpMomentumTask_momentum(PyTasksQpMomentumTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpMomentumTask_momentum__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpMomentumTask_momentum__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}

static PyMethodDef PyTasksQpMomentumTask_methods[] = {
    {(char *) "momentum", (PyCFunction) _wrap_PyTasksQpMomentumTask_momentum, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpMomentumTask__tp_dealloc(PyTasksQpMomentumTask *self)
{
        tasks::qp::MomentumTask *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpMomentumTask__tp_richcompare (PyTasksQpMomentumTask *PYBINDGEN_UNUSED(self), PyTasksQpMomentumTask *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpMomentumTask_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpMomentumTask_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.MomentumTask",            /* tp_name */
    sizeof(PyTasksQpMomentumTask),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpMomentumTask__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpMomentumTask__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpMomentumTask_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpMomentumTask__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyTasksQpContactTask__tp_init(PyTasksQpContactTask *self, PyObject *args, PyObject *kwargs)
{
    PyTasksQpContactId *contactId;
    double stiffness;
    double weight;
    const char *keywords[] = {"contactId", "stiffness", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!dd", (char **) keywords, &PyTasksQpContactId_Type, &contactId, &stiffness, &weight)) {
        return -1;
    }
    self->obj = new tasks::qp::ContactTask(*((PyTasksQpContactId *) contactId)->obj, stiffness, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}


PyObject *
_wrap_PyTasksQpContactTask_errorD(PyTasksQpContactTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyEigenVector3d *errorD;
    const char *keywords[] = {"errorD", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyEigenVector3d_Type, &errorD)) {
        return NULL;
    }
    self->obj->errorD(*((PyEigenVector3d *) errorD)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksQpContactTask_error(PyTasksQpContactTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyEigenVector3d *error;
    const char *keywords[] = {"error", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyEigenVector3d_Type, &error)) {
        return NULL;
    }
    self->obj->error(*((PyEigenVector3d *) error)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyTasksQpContactTask_methods[] = {
    {(char *) "errorD", (PyCFunction) _wrap_PyTasksQpContactTask_errorD, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "error", (PyCFunction) _wrap_PyTasksQpContactTask_error, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpContactTask__tp_dealloc(PyTasksQpContactTask *self)
{
        tasks::qp::ContactTask *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpContactTask__tp_richcompare (PyTasksQpContactTask *PYBINDGEN_UNUSED(self), PyTasksQpContactTask *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpContactTask_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpContactTask_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.ContactTask",            /* tp_name */
    sizeof(PyTasksQpContactTask),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpContactTask__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpContactTask__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpContactTask_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpContactTask__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyTasksQpGripperTorqueTask__tp_init(PyTasksQpGripperTorqueTask *self, PyObject *args, PyObject *kwargs)
{
    PyTasksQpContactId *contactId;
    PyEigenVector3d *origin;
    PyEigenVector3d *axis;
    double weight;
    const char *keywords[] = {"contactId", "origin", "axis", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!d", (char **) keywords, &PyTasksQpContactId_Type, &contactId, &PyEigenVector3d_Type, &origin, &PyEigenVector3d_Type, &axis, &weight)) {
        return -1;
    }
    self->obj = new tasks::qp::GripperTorqueTask(*((PyTasksQpContactId *) contactId)->obj, *((PyEigenVector3d *) origin)->obj, *((PyEigenVector3d *) axis)->obj, weight);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static PyMethodDef PyTasksQpGripperTorqueTask_methods[] = {
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpGripperTorqueTask__tp_dealloc(PyTasksQpGripperTorqueTask *self)
{
        tasks::qp::GripperTorqueTask *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpGripperTorqueTask__tp_richcompare (PyTasksQpGripperTorqueTask *PYBINDGEN_UNUSED(self), PyTasksQpGripperTorqueTask *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpGripperTorqueTask_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpGripperTorqueTask_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.GripperTorqueTask",            /* tp_name */
    sizeof(PyTasksQpGripperTorqueTask),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpGripperTorqueTask__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpGripperTorqueTask__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpGripperTorqueTask_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpGripperTorqueTask__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyTasksQpLinVelocityTask__tp_init(PyTasksQpLinVelocityTask *self, PyObject *args, PyObject *kwargs)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    const char *bodyName;
    Py_ssize_t bodyName_len;
    std::string bodyName_std;
    PyEigenVector3d *pos;
    PyEigenVector3d *bodyPoint = NULL;
    const char *keywords[] = {"mbs", "robotIndex", "bodyName", "pos", "bodyPoint", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&is#O!|O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &bodyName, &bodyName_len, &PyEigenVector3d_Type, &pos, &PyEigenVector3d_Type, &bodyPoint)) {
        return -1;
    }
    bodyName_std = std::string(bodyName, bodyName_len);
    self->obj = new tasks::qp::LinVelocityTask(mbs_value, robotIndex, bodyName_std, *((PyEigenVector3d *) pos)->obj, (bodyPoint ? (*((PyEigenVector3d *) bodyPoint)->obj) : Eigen::Vector3d::Zero()));
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}



PyObject *
_wrap_PyTasksQpLinVelocityTask_velocity__0(PyTasksQpLinVelocityTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyEigenVector3d *pos;
    const char *keywords[] = {"pos", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyEigenVector3d_Type, &pos)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->velocity(*((PyEigenVector3d *) pos)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpLinVelocityTask_velocity__1(PyTasksQpLinVelocityTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PyEigenVector3d *py_Vector3d;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    Eigen::Vector3d retval = self->obj->velocity();
    py_Vector3d = PyObject_New(PyEigenVector3d, &PyEigenVector3d_Type);
    py_Vector3d->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Vector3d->obj = new Eigen::Vector3d(retval);
    py_retval = Py_BuildValue((char *) "N", py_Vector3d);
    return py_retval;
}

PyObject * _wrap_PyTasksQpLinVelocityTask_velocity(PyTasksQpLinVelocityTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpLinVelocityTask_velocity__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpLinVelocityTask_velocity__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}



PyObject *
_wrap_PyTasksQpLinVelocityTask_bodyPoint__0(PyTasksQpLinVelocityTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyEigenVector3d *point;
    const char *keywords[] = {"point", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyEigenVector3d_Type, &point)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->bodyPoint(*((PyEigenVector3d *) point)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpLinVelocityTask_bodyPoint__1(PyTasksQpLinVelocityTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PyEigenVector3d *py_Vector3d;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    Eigen::Vector3d retval = self->obj->bodyPoint();
    py_Vector3d = PyObject_New(PyEigenVector3d, &PyEigenVector3d_Type);
    py_Vector3d->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Vector3d->obj = new Eigen::Vector3d(retval);
    py_retval = Py_BuildValue((char *) "N", py_Vector3d);
    return py_retval;
}

PyObject * _wrap_PyTasksQpLinVelocityTask_bodyPoint(PyTasksQpLinVelocityTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpLinVelocityTask_bodyPoint__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpLinVelocityTask_bodyPoint__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}

static PyMethodDef PyTasksQpLinVelocityTask_methods[] = {
    {(char *) "velocity", (PyCFunction) _wrap_PyTasksQpLinVelocityTask_velocity, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "bodyPoint", (PyCFunction) _wrap_PyTasksQpLinVelocityTask_bodyPoint, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpLinVelocityTask__tp_dealloc(PyTasksQpLinVelocityTask *self)
{
        tasks::qp::LinVelocityTask *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpLinVelocityTask__tp_richcompare (PyTasksQpLinVelocityTask *PYBINDGEN_UNUSED(self), PyTasksQpLinVelocityTask *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpLinVelocityTask_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpLinVelocityTask_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.LinVelocityTask",            /* tp_name */
    sizeof(PyTasksQpLinVelocityTask),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpLinVelocityTask__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpLinVelocityTask__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpLinVelocityTask_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpLinVelocityTask__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyTasksQpOrientationTrackingTask__tp_init(PyTasksQpOrientationTrackingTask *self, PyObject *args, PyObject *kwargs)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    const char *bodyName;
    Py_ssize_t bodyName_len;
    std::string bodyName_std;
    PyEigenVector3d *bodyPoint;
    PyEigenVector3d *bodyAxis;
    std::vector<std::string> trackingJointName_value;
    PyEigenVector3d *trackedPoint;
    const char *keywords[] = {"mbs", "robotIndex", "bodyName", "bodyPoint", "bodyAxis", "trackingJointName", "trackedPoint", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&is#O!O!O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &bodyName, &bodyName_len, &PyEigenVector3d_Type, &bodyPoint, &PyEigenVector3d_Type, &bodyAxis, _wrap_convert_py2c__std__vector__lt___std__string___gt__, &trackingJointName_value, &PyEigenVector3d_Type, &trackedPoint)) {
        return -1;
    }
    bodyName_std = std::string(bodyName, bodyName_len);
    self->obj = new tasks::qp::OrientationTrackingTask(mbs_value, robotIndex, bodyName_std, *((PyEigenVector3d *) bodyPoint)->obj, *((PyEigenVector3d *) bodyAxis)->obj, trackingJointName_value, *((PyEigenVector3d *) trackedPoint)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}



PyObject *
_wrap_PyTasksQpOrientationTrackingTask_bodyAxis__0(PyTasksQpOrientationTrackingTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyEigenVector3d *axis;
    const char *keywords[] = {"axis", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyEigenVector3d_Type, &axis)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->bodyAxis(*((PyEigenVector3d *) axis)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpOrientationTrackingTask_bodyAxis__1(PyTasksQpOrientationTrackingTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PyEigenVector3d *py_Vector3d;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    Eigen::Vector3d retval = self->obj->bodyAxis();
    py_Vector3d = PyObject_New(PyEigenVector3d, &PyEigenVector3d_Type);
    py_Vector3d->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Vector3d->obj = new Eigen::Vector3d(retval);
    py_retval = Py_BuildValue((char *) "N", py_Vector3d);
    return py_retval;
}

PyObject * _wrap_PyTasksQpOrientationTrackingTask_bodyAxis(PyTasksQpOrientationTrackingTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpOrientationTrackingTask_bodyAxis__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpOrientationTrackingTask_bodyAxis__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}



PyObject *
_wrap_PyTasksQpOrientationTrackingTask_trackedPoint__0(PyTasksQpOrientationTrackingTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyEigenVector3d *bPoint;
    const char *keywords[] = {"bPoint", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyEigenVector3d_Type, &bPoint)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->trackedPoint(*((PyEigenVector3d *) bPoint)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpOrientationTrackingTask_trackedPoint__1(PyTasksQpOrientationTrackingTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PyEigenVector3d *py_Vector3d;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    Eigen::Vector3d retval = self->obj->trackedPoint();
    py_Vector3d = PyObject_New(PyEigenVector3d, &PyEigenVector3d_Type);
    py_Vector3d->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Vector3d->obj = new Eigen::Vector3d(retval);
    py_retval = Py_BuildValue((char *) "N", py_Vector3d);
    return py_retval;
}

PyObject * _wrap_PyTasksQpOrientationTrackingTask_trackedPoint(PyTasksQpOrientationTrackingTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpOrientationTrackingTask_trackedPoint__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpOrientationTrackingTask_trackedPoint__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}



PyObject *
_wrap_PyTasksQpOrientationTrackingTask_bodyPoint__0(PyTasksQpOrientationTrackingTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyEigenVector3d *tPoint;
    const char *keywords[] = {"tPoint", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyEigenVector3d_Type, &tPoint)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->bodyPoint(*((PyEigenVector3d *) tPoint)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpOrientationTrackingTask_bodyPoint__1(PyTasksQpOrientationTrackingTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PyEigenVector3d *py_Vector3d;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    Eigen::Vector3d retval = self->obj->bodyPoint();
    py_Vector3d = PyObject_New(PyEigenVector3d, &PyEigenVector3d_Type);
    py_Vector3d->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Vector3d->obj = new Eigen::Vector3d(retval);
    py_retval = Py_BuildValue((char *) "N", py_Vector3d);
    return py_retval;
}

PyObject * _wrap_PyTasksQpOrientationTrackingTask_bodyPoint(PyTasksQpOrientationTrackingTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpOrientationTrackingTask_bodyPoint__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpOrientationTrackingTask_bodyPoint__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}

static PyMethodDef PyTasksQpOrientationTrackingTask_methods[] = {
    {(char *) "bodyAxis", (PyCFunction) _wrap_PyTasksQpOrientationTrackingTask_bodyAxis, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "trackedPoint", (PyCFunction) _wrap_PyTasksQpOrientationTrackingTask_trackedPoint, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "bodyPoint", (PyCFunction) _wrap_PyTasksQpOrientationTrackingTask_bodyPoint, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpOrientationTrackingTask__tp_dealloc(PyTasksQpOrientationTrackingTask *self)
{
        tasks::qp::OrientationTrackingTask *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpOrientationTrackingTask__tp_richcompare (PyTasksQpOrientationTrackingTask *PYBINDGEN_UNUSED(self), PyTasksQpOrientationTrackingTask *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpOrientationTrackingTask_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpOrientationTrackingTask_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.OrientationTrackingTask",            /* tp_name */
    sizeof(PyTasksQpOrientationTrackingTask),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpOrientationTrackingTask__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpOrientationTrackingTask__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpOrientationTrackingTask_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpOrientationTrackingTask__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyTasksQpTransformTask__tp_init(PyTasksQpTransformTask *self, PyObject *args, PyObject *kwargs)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    const char *bodyName;
    Py_ssize_t bodyName_len;
    std::string bodyName_std;
    PySvaPTransformd *X_0_t;
    PySvaPTransformd *X_b_p = NULL;
    PyEigenMatrix3d *X_0_c = NULL;
    const char *keywords[] = {"mbs", "robotIndex", "bodyName", "X_0_t", "X_b_p", "X_0_c", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&is#O!|O!O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &bodyName, &bodyName_len, &PySvaPTransformd_Type, &X_0_t, &PySvaPTransformd_Type, &X_b_p, &PyEigenMatrix3d_Type, &X_0_c)) {
        return -1;
    }
    bodyName_std = std::string(bodyName, bodyName_len);
    self->obj = new tasks::qp::TransformTask(mbs_value, robotIndex, bodyName_std, *((PySvaPTransformd *) X_0_t)->obj, (X_b_p ? (*((PySvaPTransformd *) X_b_p)->obj) : sva::PTransformd::Identity()), (X_0_c ? (*((PyEigenMatrix3d *) X_0_c)->obj) : Eigen::Matrix3d::Identity()));
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}



PyObject *
_wrap_PyTasksQpTransformTask_X_b_p__0(PyTasksQpTransformTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PySvaPTransformd *X_b_p;
    const char *keywords[] = {"X_b_p", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PySvaPTransformd_Type, &X_b_p)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->X_b_p(*((PySvaPTransformd *) X_b_p)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpTransformTask_X_b_p__1(PyTasksQpTransformTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PySvaPTransformd *py_PTransformd;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    sva::PTransformd retval = self->obj->X_b_p();
    py_PTransformd = PyObject_New(PySvaPTransformd, &PySvaPTransformd_Type);
    py_PTransformd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_PTransformd->obj = new sva::PTransformd(retval);
    py_retval = Py_BuildValue((char *) "N", py_PTransformd);
    return py_retval;
}

PyObject * _wrap_PyTasksQpTransformTask_X_b_p(PyTasksQpTransformTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpTransformTask_X_b_p__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpTransformTask_X_b_p__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}



PyObject *
_wrap_PyTasksQpTransformTask_E_0_c__0(PyTasksQpTransformTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyEigenMatrix3d *E_0_c;
    const char *keywords[] = {"E_0_c", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyEigenMatrix3d_Type, &E_0_c)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->E_0_c(*((PyEigenMatrix3d *) E_0_c)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpTransformTask_E_0_c__1(PyTasksQpTransformTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PyEigenMatrix3d *py_Matrix3d;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    Eigen::Matrix3d retval = self->obj->E_0_c();
    py_Matrix3d = PyObject_New(PyEigenMatrix3d, &PyEigenMatrix3d_Type);
    py_Matrix3d->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Matrix3d->obj = new Eigen::Matrix3d(retval);
    py_retval = Py_BuildValue((char *) "N", py_Matrix3d);
    return py_retval;
}

PyObject * _wrap_PyTasksQpTransformTask_E_0_c(PyTasksQpTransformTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpTransformTask_E_0_c__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpTransformTask_E_0_c__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}



PyObject *
_wrap_PyTasksQpTransformTask_target__0(PyTasksQpTransformTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PySvaPTransformd *X_0_t;
    const char *keywords[] = {"X_0_t", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PySvaPTransformd_Type, &X_0_t)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->target(*((PySvaPTransformd *) X_0_t)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpTransformTask_target__1(PyTasksQpTransformTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PySvaPTransformd *py_PTransformd;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    sva::PTransformd retval = self->obj->target();
    py_PTransformd = PyObject_New(PySvaPTransformd, &PySvaPTransformd_Type);
    py_PTransformd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_PTransformd->obj = new sva::PTransformd(retval);
    py_retval = Py_BuildValue((char *) "N", py_PTransformd);
    return py_retval;
}

PyObject * _wrap_PyTasksQpTransformTask_target(PyTasksQpTransformTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpTransformTask_target__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpTransformTask_target__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}

static PyMethodDef PyTasksQpTransformTask_methods[] = {
    {(char *) "X_b_p", (PyCFunction) _wrap_PyTasksQpTransformTask_X_b_p, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "E_0_c", (PyCFunction) _wrap_PyTasksQpTransformTask_E_0_c, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "target", (PyCFunction) _wrap_PyTasksQpTransformTask_target, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpTransformTask__tp_dealloc(PyTasksQpTransformTask *self)
{
        tasks::qp::TransformTask *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpTransformTask__tp_richcompare (PyTasksQpTransformTask *PYBINDGEN_UNUSED(self), PyTasksQpTransformTask *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpTransformTask_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpTransformTask_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.TransformTask",            /* tp_name */
    sizeof(PyTasksQpTransformTask),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpTransformTask__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpTransformTask__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpTransformTask_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpTransformTask__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyTasksQpSurfaceTransformTask__tp_init(PyTasksQpSurfaceTransformTask *self, PyObject *args, PyObject *kwargs)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    const char *bodyName;
    Py_ssize_t bodyName_len;
    std::string bodyName_std;
    PySvaPTransformd *X_0_t;
    PySvaPTransformd *X_b_p = NULL;
    const char *keywords[] = {"mbs", "robotIndex", "bodyName", "X_0_t", "X_b_p", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&is#O!|O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &bodyName, &bodyName_len, &PySvaPTransformd_Type, &X_0_t, &PySvaPTransformd_Type, &X_b_p)) {
        return -1;
    }
    bodyName_std = std::string(bodyName, bodyName_len);
    self->obj = new tasks::qp::SurfaceTransformTask(mbs_value, robotIndex, bodyName_std, *((PySvaPTransformd *) X_0_t)->obj, (X_b_p ? (*((PySvaPTransformd *) X_b_p)->obj) : sva::PTransformd::Identity()));
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}



PyObject *
_wrap_PyTasksQpSurfaceTransformTask_X_b_p__0(PyTasksQpSurfaceTransformTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PySvaPTransformd *X_b_p;
    const char *keywords[] = {"X_b_p", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PySvaPTransformd_Type, &X_b_p)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->X_b_p(*((PySvaPTransformd *) X_b_p)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpSurfaceTransformTask_X_b_p__1(PyTasksQpSurfaceTransformTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PySvaPTransformd *py_PTransformd;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    sva::PTransformd retval = self->obj->X_b_p();
    py_PTransformd = PyObject_New(PySvaPTransformd, &PySvaPTransformd_Type);
    py_PTransformd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_PTransformd->obj = new sva::PTransformd(retval);
    py_retval = Py_BuildValue((char *) "N", py_PTransformd);
    return py_retval;
}

PyObject * _wrap_PyTasksQpSurfaceTransformTask_X_b_p(PyTasksQpSurfaceTransformTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpSurfaceTransformTask_X_b_p__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpSurfaceTransformTask_X_b_p__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}



PyObject *
_wrap_PyTasksQpSurfaceTransformTask_target__0(PyTasksQpSurfaceTransformTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PySvaPTransformd *X_0_t;
    const char *keywords[] = {"X_0_t", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PySvaPTransformd_Type, &X_0_t)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->target(*((PySvaPTransformd *) X_0_t)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpSurfaceTransformTask_target__1(PyTasksQpSurfaceTransformTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PySvaPTransformd *py_PTransformd;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    sva::PTransformd retval = self->obj->target();
    py_PTransformd = PyObject_New(PySvaPTransformd, &PySvaPTransformd_Type);
    py_PTransformd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_PTransformd->obj = new sva::PTransformd(retval);
    py_retval = Py_BuildValue((char *) "N", py_PTransformd);
    return py_retval;
}

PyObject * _wrap_PyTasksQpSurfaceTransformTask_target(PyTasksQpSurfaceTransformTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpSurfaceTransformTask_target__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpSurfaceTransformTask_target__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}

static PyMethodDef PyTasksQpSurfaceTransformTask_methods[] = {
    {(char *) "X_b_p", (PyCFunction) _wrap_PyTasksQpSurfaceTransformTask_X_b_p, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "target", (PyCFunction) _wrap_PyTasksQpSurfaceTransformTask_target, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpSurfaceTransformTask__tp_dealloc(PyTasksQpSurfaceTransformTask *self)
{
        tasks::qp::SurfaceTransformTask *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpSurfaceTransformTask__tp_richcompare (PyTasksQpSurfaceTransformTask *PYBINDGEN_UNUSED(self), PyTasksQpSurfaceTransformTask *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpSurfaceTransformTask_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpSurfaceTransformTask_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.SurfaceTransformTask",            /* tp_name */
    sizeof(PyTasksQpSurfaceTransformTask),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpSurfaceTransformTask__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpSurfaceTransformTask__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpSurfaceTransformTask_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpSurfaceTransformTask__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyTasksQpJointsSelector__tp_init(PyTasksQpJointsSelector *self, PyObject *args, PyObject *kwargs)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpHighLevelTask *hl;
    tasks::qp::HighLevelTask *hl_ptr;
    std::vector<std::string> selectedJointsName_value;
    const char *keywords[] = {"mbs", "robotIndex", "hl", "selectedJointsName", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!O&", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpHighLevelTask_Type, &hl, _wrap_convert_py2c__std__vector__lt___std__string___gt__, &selectedJointsName_value)) {
        return -1;
    }
    hl_ptr = (hl ? hl->obj : NULL);
    self->obj = new tasks::qp::JointsSelector(mbs_value, robotIndex, hl_ptr, selectedJointsName_value);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}


PyObject *
_wrap_PyTasksQpJointsSelector_ActiveJoints(PyTasksQpJointsSelector *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpHighLevelTask *hl;
    tasks::qp::HighLevelTask *hl_ptr;
    std::vector<std::string> activeJointsName_value;
    const char *keywords[] = {"mbs", "robotIndex", "hl", "activeJointsName", NULL};
    PyTasksQpJointsSelector *py_JointsSelector;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!O&", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpHighLevelTask_Type, &hl, _wrap_convert_py2c__std__vector__lt___std__string___gt__, &activeJointsName_value)) {
        return NULL;
    }
    hl_ptr = (hl ? hl->obj : NULL);
    tasks::qp::JointsSelector retval = tasks::qp::JointsSelector::ActiveJoints(mbs_value, robotIndex, hl_ptr, activeJointsName_value);
    py_JointsSelector = PyObject_New(PyTasksQpJointsSelector, &PyTasksQpJointsSelector_Type);
    py_JointsSelector->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_JointsSelector->obj = new tasks::qp::JointsSelector(retval);
    py_retval = Py_BuildValue((char *) "N", py_JointsSelector);
    return py_retval;
}


PyObject *
_wrap_PyTasksQpJointsSelector_UnactiveJoints(PyTasksQpJointsSelector *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQpHighLevelTask *hl;
    tasks::qp::HighLevelTask *hl_ptr;
    std::vector<std::string> unactiveJointsName_value;
    const char *keywords[] = {"mbs", "robotIndex", "hl", "unactiveJointsName", NULL};
    PyTasksQpJointsSelector *py_JointsSelector;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!O&", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQpHighLevelTask_Type, &hl, _wrap_convert_py2c__std__vector__lt___std__string___gt__, &unactiveJointsName_value)) {
        return NULL;
    }
    hl_ptr = (hl ? hl->obj : NULL);
    tasks::qp::JointsSelector retval = tasks::qp::JointsSelector::UnactiveJoints(mbs_value, robotIndex, hl_ptr, unactiveJointsName_value);
    py_JointsSelector = PyObject_New(PyTasksQpJointsSelector, &PyTasksQpJointsSelector_Type);
    py_JointsSelector->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_JointsSelector->obj = new tasks::qp::JointsSelector(retval);
    py_retval = Py_BuildValue((char *) "N", py_JointsSelector);
    return py_retval;
}

static PyMethodDef PyTasksQpJointsSelector_methods[] = {
    {(char *) "ActiveJoints", (PyCFunction) _wrap_PyTasksQpJointsSelector_ActiveJoints, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "UnactiveJoints", (PyCFunction) _wrap_PyTasksQpJointsSelector_UnactiveJoints, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpJointsSelector__tp_dealloc(PyTasksQpJointsSelector *self)
{
        tasks::qp::JointsSelector *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpJointsSelector__tp_richcompare (PyTasksQpJointsSelector *PYBINDGEN_UNUSED(self), PyTasksQpJointsSelector *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpJointsSelector_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpJointsSelector_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.JointsSelector",            /* tp_name */
    sizeof(PyTasksQpJointsSelector),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpJointsSelector__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpJointsSelector__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpJointsSelector_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpJointsSelector__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyTasksQpRelativeDistTask__tp_init(PyTasksQpRelativeDistTask *self, PyObject *args, PyObject *kwargs)
{
    std::vector<rbd::MultiBody> mbs_value;
    int rIndex;
    double timestep;
    PyTasksRelativeDistTaskRbInfo *rbi1;
    PyTasksRelativeDistTaskRbInfo *rbi2;
    PyEigenVector3d *u1 = NULL;
    PyEigenVector3d *u2 = NULL;
    const char *keywords[] = {"mbs", "rIndex", "timestep", "rbi1", "rbi2", "u1", "u2", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&idO!O!|O!O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &rIndex, &timestep, &PyTasksRelativeDistTaskRbInfo_Type, &rbi1, &PyTasksRelativeDistTaskRbInfo_Type, &rbi2, &PyEigenVector3d_Type, &u1, &PyEigenVector3d_Type, &u2)) {
        return -1;
    }
    self->obj = new tasks::qp::RelativeDistTask(mbs_value, rIndex, timestep, *((PyTasksRelativeDistTaskRbInfo *) rbi1)->obj, *((PyTasksRelativeDistTaskRbInfo *) rbi2)->obj, (u1 ? (*((PyEigenVector3d *) u1)->obj) : Eigen::Vector3d::Zero()), (u2 ? (*((PyEigenVector3d *) u2)->obj) : Eigen::Vector3d::Zero()));
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}


PyObject *
_wrap_PyTasksQpRelativeDistTask_robotPoint(PyTasksQpRelativeDistTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyRbdMultiBody *mbs;
    const char *bName;
    Py_ssize_t bName_len;
    std::string bName_std;
    PyEigenVector3d *point;
    const char *keywords[] = {"mbs", "bName", "point", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!s#O!", (char **) keywords, &PyRbdMultiBody_Type, &mbs, &bName, &bName_len, &PyEigenVector3d_Type, &point)) {
        return NULL;
    }
    bName_std = std::string(bName, bName_len);
    self->obj->robotPoint(*((PyRbdMultiBody *) mbs)->obj, bName_std, *((PyEigenVector3d *) point)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksQpRelativeDistTask_vector(PyTasksQpRelativeDistTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyRbdMultiBody *mbs;
    const char *bName;
    Py_ssize_t bName_len;
    std::string bName_std;
    PyEigenVector3d *u;
    const char *keywords[] = {"mbs", "bName", "u", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!s#O!", (char **) keywords, &PyRbdMultiBody_Type, &mbs, &bName, &bName_len, &PyEigenVector3d_Type, &u)) {
        return NULL;
    }
    bName_std = std::string(bName, bName_len);
    self->obj->vector(*((PyRbdMultiBody *) mbs)->obj, bName_std, *((PyEigenVector3d *) u)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksQpRelativeDistTask_envPoint(PyTasksQpRelativeDistTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyRbdMultiBody *mbs;
    const char *bName;
    Py_ssize_t bName_len;
    std::string bName_std;
    PyEigenVector3d *point;
    const char *keywords[] = {"mbs", "bName", "point", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!s#O!", (char **) keywords, &PyRbdMultiBody_Type, &mbs, &bName, &bName_len, &PyEigenVector3d_Type, &point)) {
        return NULL;
    }
    bName_std = std::string(bName, bName_len);
    self->obj->envPoint(*((PyRbdMultiBody *) mbs)->obj, bName_std, *((PyEigenVector3d *) point)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyTasksQpRelativeDistTask_methods[] = {
    {(char *) "robotPoint", (PyCFunction) _wrap_PyTasksQpRelativeDistTask_robotPoint, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "vector", (PyCFunction) _wrap_PyTasksQpRelativeDistTask_vector, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "envPoint", (PyCFunction) _wrap_PyTasksQpRelativeDistTask_envPoint, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpRelativeDistTask__tp_dealloc(PyTasksQpRelativeDistTask *self)
{
        tasks::qp::RelativeDistTask *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpRelativeDistTask__tp_richcompare (PyTasksQpRelativeDistTask *PYBINDGEN_UNUSED(self), PyTasksQpRelativeDistTask *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpRelativeDistTask_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpRelativeDistTask_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.RelativeDistTask",            /* tp_name */
    sizeof(PyTasksQpRelativeDistTask),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpRelativeDistTask__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpRelativeDistTask__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpRelativeDistTask_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpRelativeDistTask__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyTasksQpVectorOrientationTask__tp_init(PyTasksQpVectorOrientationTask *self, PyObject *args, PyObject *kwargs)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    const char *bodyName;
    Py_ssize_t bodyName_len;
    std::string bodyName_std;
    PyEigenVector3d *bodyVector;
    PyEigenVector3d *targetVector;
    const char *keywords[] = {"mbs", "robotIndex", "bodyName", "bodyVector", "targetVector", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&is#O!O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &bodyName, &bodyName_len, &PyEigenVector3d_Type, &bodyVector, &PyEigenVector3d_Type, &targetVector)) {
        return -1;
    }
    bodyName_std = std::string(bodyName, bodyName_len);
    self->obj = new tasks::qp::VectorOrientationTask(mbs_value, robotIndex, bodyName_std, *((PyEigenVector3d *) bodyVector)->obj, *((PyEigenVector3d *) targetVector)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}



PyObject *
_wrap_PyTasksQpVectorOrientationTask_bodyVector__0(PyTasksQpVectorOrientationTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyEigenVector3d *vector;
    const char *keywords[] = {"vector", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyEigenVector3d_Type, &vector)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->bodyVector(*((PyEigenVector3d *) vector)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpVectorOrientationTask_bodyVector__1(PyTasksQpVectorOrientationTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PyEigenVector3d *py_Vector3d;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    Eigen::Vector3d retval = self->obj->bodyVector();
    py_Vector3d = PyObject_New(PyEigenVector3d, &PyEigenVector3d_Type);
    py_Vector3d->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Vector3d->obj = new Eigen::Vector3d(retval);
    py_retval = Py_BuildValue((char *) "N", py_Vector3d);
    return py_retval;
}

PyObject * _wrap_PyTasksQpVectorOrientationTask_bodyVector(PyTasksQpVectorOrientationTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpVectorOrientationTask_bodyVector__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpVectorOrientationTask_bodyVector__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksQpVectorOrientationTask_target(PyTasksQpVectorOrientationTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyEigenVector3d *vector;
    const char *keywords[] = {"vector", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyEigenVector3d_Type, &vector)) {
        return NULL;
    }
    self->obj->target(*((PyEigenVector3d *) vector)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyTasksQpVectorOrientationTask_methods[] = {
    {(char *) "bodyVector", (PyCFunction) _wrap_PyTasksQpVectorOrientationTask_bodyVector, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "target", (PyCFunction) _wrap_PyTasksQpVectorOrientationTask_target, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpVectorOrientationTask__tp_dealloc(PyTasksQpVectorOrientationTask *self)
{
        tasks::qp::VectorOrientationTask *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpVectorOrientationTask__tp_richcompare (PyTasksQpVectorOrientationTask *PYBINDGEN_UNUSED(self), PyTasksQpVectorOrientationTask *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpVectorOrientationTask_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpVectorOrientationTask_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.VectorOrientationTask",            /* tp_name */
    sizeof(PyTasksQpVectorOrientationTask),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpVectorOrientationTask__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpVectorOrientationTask__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpVectorOrientationTask_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpVectorOrientationTask__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyTasksQpMotionConstr__tp_init(PyTasksQpMotionConstr *self, PyObject *args, PyObject *kwargs)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksTorqueBound *tb;
    const char *keywords[] = {"mbs", "robotIndex", "tb", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksTorqueBound_Type, &tb)) {
        return -1;
    }
    self->obj = new tasks::qp::MotionConstr(mbs_value, robotIndex, *((PyTasksTorqueBound *) tb)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}


PyObject *
_wrap_PyTasksQpMotionConstr_contactMatrix(PyTasksQpMotionConstr *self)
{
    PyObject *py_retval;
    PyEigenMatrixXd *py_MatrixXd;

    Eigen::MatrixXd retval = self->obj->contactMatrix();
    py_MatrixXd = PyObject_New(PyEigenMatrixXd, &PyEigenMatrixXd_Type);
    py_MatrixXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MatrixXd->obj = new Eigen::MatrixXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_MatrixXd);
    return py_retval;
}



PyObject *
_wrap_PyTasksQpMotionConstr_torque__0(PyTasksQpMotionConstr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PyEigenVectorXd *py_VectorXd;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    Eigen::VectorXd retval = self->obj->torque();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpMotionConstr_torque__1(PyTasksQpMotionConstr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mbs_value;
    std::vector<rbd::MultiBodyConfig> mbcs_value;
    const char *keywords[] = {"mbs", "mbcs", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O&", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, _wrap_convert_py2c__std__vector__lt___rbd__MultiBodyConfig___gt__, &mbcs_value)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->torque(mbs_value, mbcs_value);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyTasksQpMotionConstr_torque(PyTasksQpMotionConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpMotionConstr_torque__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpMotionConstr_torque__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksQpMotionConstr_computeTorque(PyTasksQpMotionConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyEigenVectorXd *alphaD;
    PyEigenVectorXd *lambda;
    const char *keywords[] = {"alphaD", "lambda", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyEigenVectorXd_Type, &alphaD, &PyEigenVectorXd_Type, &lambda)) {
        return NULL;
    }
    self->obj->computeTorque(*((PyEigenVectorXd *) alphaD)->obj, *((PyEigenVectorXd *) lambda)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksQpMotionConstr_fd(PyTasksQpMotionConstr *self)
{
    PyObject *py_retval;
    PyRbdForwardDynamics *py_ForwardDynamics;

    rbd::ForwardDynamics const retval = self->obj->fd();
    py_ForwardDynamics = PyObject_New(PyRbdForwardDynamics, &PyRbdForwardDynamics_Type);
    py_ForwardDynamics->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_ForwardDynamics->obj = new rbd::ForwardDynamics(retval);
    py_retval = Py_BuildValue((char *) "N", py_ForwardDynamics);
    return py_retval;
}



PyObject *
_wrap_PyTasksQpMotionConstr_addToSolver__0(PyTasksQpMotionConstr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpQPSolver *solver;
    const char *keywords[] = {"solver", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpQPSolver_Type, &solver)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->addToSolver(*((PyTasksQpQPSolver *) solver)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpMotionConstr_addToSolver__1(PyTasksQpMotionConstr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mbs_value;
    PyTasksQpQPSolver *solver;
    const char *keywords[] = {"mbs", "solver", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &PyTasksQpQPSolver_Type, &solver)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->addToSolver(mbs_value, *((PyTasksQpQPSolver *) solver)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyTasksQpMotionConstr_addToSolver(PyTasksQpMotionConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpMotionConstr_addToSolver__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpMotionConstr_addToSolver__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksQpMotionConstr_removeFromSolver(PyTasksQpMotionConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyTasksQpQPSolver *solver;
    const char *keywords[] = {"solver", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpQPSolver_Type, &solver)) {
        return NULL;
    }
    self->obj->removeFromSolver(*((PyTasksQpQPSolver *) solver)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpMotionConstr_nrGenInEq(PyTasksQpMotionConstr *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->nrGenInEq();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpMotionConstr_maxGenInEq(PyTasksQpMotionConstr *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->maxGenInEq();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpMotionConstr_LowerGenInEq(PyTasksQpMotionConstr *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd retval = self->obj->LowerGenInEq();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpMotionConstr_update(PyTasksQpMotionConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mb_value;
    std::vector<rbd::MultiBodyConfig> mbc_value;
    PyTasksQpSolverData *data;
    const char *keywords[] = {"mb", "mbc", "data", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mb_value, _wrap_convert_py2c__std__vector__lt___rbd__MultiBodyConfig___gt__, &mbc_value, &PyTasksQpSolverData_Type, &data)) {
        return NULL;
    }
    self->obj->update(mb_value, mbc_value, *((PyTasksQpSolverData *) data)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpMotionConstr_updateNrVars(PyTasksQpMotionConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mb_value;
    PyTasksQpSolverData *data;
    const char *keywords[] = {"mb", "data", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mb_value, &PyTasksQpSolverData_Type, &data)) {
        return NULL;
    }
    self->obj->updateNrVars(mb_value, *((PyTasksQpSolverData *) data)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpMotionConstr_UpperGenInEq(PyTasksQpMotionConstr *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd retval = self->obj->UpperGenInEq();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpMotionConstr_AGenInEq(PyTasksQpMotionConstr *self)
{
    PyObject *py_retval;
    PyEigenMatrixXd *py_MatrixXd;

    Eigen::MatrixXd retval = self->obj->AGenInEq();
    py_MatrixXd = PyObject_New(PyEigenMatrixXd, &PyEigenMatrixXd_Type);
    py_MatrixXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MatrixXd->obj = new Eigen::MatrixXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_MatrixXd);
    return py_retval;
}

static PyMethodDef PyTasksQpMotionConstr_methods[] = {
    {(char *) "contactMatrix", (PyCFunction) _wrap_PyTasksQpMotionConstr_contactMatrix, METH_NOARGS, NULL },
    {(char *) "torque", (PyCFunction) _wrap_PyTasksQpMotionConstr_torque, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "computeTorque", (PyCFunction) _wrap_PyTasksQpMotionConstr_computeTorque, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "fd", (PyCFunction) _wrap_PyTasksQpMotionConstr_fd, METH_NOARGS, NULL },
    {(char *) "addToSolver", (PyCFunction) _wrap_PyTasksQpMotionConstr_addToSolver, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "removeFromSolver", (PyCFunction) _wrap_PyTasksQpMotionConstr_removeFromSolver, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "nrGenInEq", (PyCFunction) _wrap_PyTasksQpMotionConstr_nrGenInEq, METH_NOARGS, NULL },
    {(char *) "maxGenInEq", (PyCFunction) _wrap_PyTasksQpMotionConstr_maxGenInEq, METH_NOARGS, NULL },
    {(char *) "LowerGenInEq", (PyCFunction) _wrap_PyTasksQpMotionConstr_LowerGenInEq, METH_NOARGS, NULL },
    {(char *) "update", (PyCFunction) _wrap_PyTasksQpMotionConstr_update, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "updateNrVars", (PyCFunction) _wrap_PyTasksQpMotionConstr_updateNrVars, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "UpperGenInEq", (PyCFunction) _wrap_PyTasksQpMotionConstr_UpperGenInEq, METH_NOARGS, NULL },
    {(char *) "AGenInEq", (PyCFunction) _wrap_PyTasksQpMotionConstr_AGenInEq, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpMotionConstr__tp_dealloc(PyTasksQpMotionConstr *self)
{
        tasks::qp::MotionConstr *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpMotionConstr__tp_richcompare (PyTasksQpMotionConstr *PYBINDGEN_UNUSED(self), PyTasksQpMotionConstr *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpMotionConstr_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpMotionConstr_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.MotionConstr",            /* tp_name */
    sizeof(PyTasksQpMotionConstr),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpMotionConstr__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpMotionConstr__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpMotionConstr_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpMotionConstr__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyTasksQpMotionPolyConstr__tp_init(PyTasksQpMotionPolyConstr *self, PyObject *args, PyObject *kwargs)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksPolyTorqueBound *ptb;
    const char *keywords[] = {"mbs", "robotIndex", "ptb", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksPolyTorqueBound_Type, &ptb)) {
        return -1;
    }
    self->obj = new tasks::qp::MotionPolyConstr(mbs_value, robotIndex, *((PyTasksPolyTorqueBound *) ptb)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}


PyObject *
_wrap_PyTasksQpMotionPolyConstr_computeTorque(PyTasksQpMotionPolyConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyEigenVectorXd *alphaD;
    PyEigenVectorXd *lambda;
    const char *keywords[] = {"alphaD", "lambda", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyEigenVectorXd_Type, &alphaD, &PyEigenVectorXd_Type, &lambda)) {
        return NULL;
    }
    self->obj->computeTorque(*((PyEigenVectorXd *) alphaD)->obj, *((PyEigenVectorXd *) lambda)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyTasksQpMotionPolyConstr_addToSolver__0(PyTasksQpMotionPolyConstr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpQPSolver *solver;
    const char *keywords[] = {"solver", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpQPSolver_Type, &solver)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->addToSolver(*((PyTasksQpQPSolver *) solver)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpMotionPolyConstr_addToSolver__1(PyTasksQpMotionPolyConstr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mbs_value;
    PyTasksQpQPSolver *solver;
    const char *keywords[] = {"mbs", "solver", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &PyTasksQpQPSolver_Type, &solver)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->addToSolver(mbs_value, *((PyTasksQpQPSolver *) solver)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyTasksQpMotionPolyConstr_addToSolver(PyTasksQpMotionPolyConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpMotionPolyConstr_addToSolver__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpMotionPolyConstr_addToSolver__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}



PyObject *
_wrap_PyTasksQpMotionPolyConstr_torque__0(PyTasksQpMotionPolyConstr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PyEigenVectorXd *py_VectorXd;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    Eigen::VectorXd retval = self->obj->torque();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpMotionPolyConstr_torque__1(PyTasksQpMotionPolyConstr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mbs_value;
    std::vector<rbd::MultiBodyConfig> mbcs_value;
    const char *keywords[] = {"mbs", "mbcs", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O&", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, _wrap_convert_py2c__std__vector__lt___rbd__MultiBodyConfig___gt__, &mbcs_value)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->torque(mbs_value, mbcs_value);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyTasksQpMotionPolyConstr_torque(PyTasksQpMotionPolyConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpMotionPolyConstr_torque__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpMotionPolyConstr_torque__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksQpMotionPolyConstr_removeFromSolver(PyTasksQpMotionPolyConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyTasksQpQPSolver *solver;
    const char *keywords[] = {"solver", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpQPSolver_Type, &solver)) {
        return NULL;
    }
    self->obj->removeFromSolver(*((PyTasksQpQPSolver *) solver)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpMotionPolyConstr_nrGenInEq(PyTasksQpMotionPolyConstr *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->nrGenInEq();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpMotionPolyConstr_maxGenInEq(PyTasksQpMotionPolyConstr *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->maxGenInEq();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpMotionPolyConstr_LowerGenInEq(PyTasksQpMotionPolyConstr *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd retval = self->obj->LowerGenInEq();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpMotionPolyConstr_update(PyTasksQpMotionPolyConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mb_value;
    std::vector<rbd::MultiBodyConfig> mbc_value;
    PyTasksQpSolverData *data;
    const char *keywords[] = {"mb", "mbc", "data", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mb_value, _wrap_convert_py2c__std__vector__lt___rbd__MultiBodyConfig___gt__, &mbc_value, &PyTasksQpSolverData_Type, &data)) {
        return NULL;
    }
    self->obj->update(mb_value, mbc_value, *((PyTasksQpSolverData *) data)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpMotionPolyConstr_updateNrVars(PyTasksQpMotionPolyConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mb_value;
    PyTasksQpSolverData *data;
    const char *keywords[] = {"mb", "data", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mb_value, &PyTasksQpSolverData_Type, &data)) {
        return NULL;
    }
    self->obj->updateNrVars(mb_value, *((PyTasksQpSolverData *) data)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpMotionPolyConstr_UpperGenInEq(PyTasksQpMotionPolyConstr *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd retval = self->obj->UpperGenInEq();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpMotionPolyConstr_AGenInEq(PyTasksQpMotionPolyConstr *self)
{
    PyObject *py_retval;
    PyEigenMatrixXd *py_MatrixXd;

    Eigen::MatrixXd retval = self->obj->AGenInEq();
    py_MatrixXd = PyObject_New(PyEigenMatrixXd, &PyEigenMatrixXd_Type);
    py_MatrixXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MatrixXd->obj = new Eigen::MatrixXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_MatrixXd);
    return py_retval;
}

static PyMethodDef PyTasksQpMotionPolyConstr_methods[] = {
    {(char *) "computeTorque", (PyCFunction) _wrap_PyTasksQpMotionPolyConstr_computeTorque, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "addToSolver", (PyCFunction) _wrap_PyTasksQpMotionPolyConstr_addToSolver, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "torque", (PyCFunction) _wrap_PyTasksQpMotionPolyConstr_torque, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "removeFromSolver", (PyCFunction) _wrap_PyTasksQpMotionPolyConstr_removeFromSolver, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "nrGenInEq", (PyCFunction) _wrap_PyTasksQpMotionPolyConstr_nrGenInEq, METH_NOARGS, NULL },
    {(char *) "maxGenInEq", (PyCFunction) _wrap_PyTasksQpMotionPolyConstr_maxGenInEq, METH_NOARGS, NULL },
    {(char *) "LowerGenInEq", (PyCFunction) _wrap_PyTasksQpMotionPolyConstr_LowerGenInEq, METH_NOARGS, NULL },
    {(char *) "update", (PyCFunction) _wrap_PyTasksQpMotionPolyConstr_update, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "updateNrVars", (PyCFunction) _wrap_PyTasksQpMotionPolyConstr_updateNrVars, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "UpperGenInEq", (PyCFunction) _wrap_PyTasksQpMotionPolyConstr_UpperGenInEq, METH_NOARGS, NULL },
    {(char *) "AGenInEq", (PyCFunction) _wrap_PyTasksQpMotionPolyConstr_AGenInEq, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpMotionPolyConstr__tp_dealloc(PyTasksQpMotionPolyConstr *self)
{
        tasks::qp::MotionPolyConstr *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpMotionPolyConstr__tp_richcompare (PyTasksQpMotionPolyConstr *PYBINDGEN_UNUSED(self), PyTasksQpMotionPolyConstr *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpMotionPolyConstr_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpMotionPolyConstr_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.MotionPolyConstr",            /* tp_name */
    sizeof(PyTasksQpMotionPolyConstr),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpMotionPolyConstr__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpMotionPolyConstr__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpMotionPolyConstr_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpMotionPolyConstr__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyTasksQpMotionSpringConstr__tp_init(PyTasksQpMotionSpringConstr *self, PyObject *args, PyObject *kwargs)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksTorqueBound *tb;
    std::vector<tasks::qp::SpringJoint> springs_value;
    const char *keywords[] = {"mbs", "robotIndex", "tb", "springs", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!O&", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksTorqueBound_Type, &tb, _wrap_convert_py2c__std__vector__lt___tasks__qp__SpringJoint___gt__, &springs_value)) {
        return -1;
    }
    self->obj = new tasks::qp::MotionSpringConstr(mbs_value, robotIndex, *((PyTasksTorqueBound *) tb)->obj, springs_value);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}


PyObject *
_wrap_PyTasksQpMotionSpringConstr_computeTorque(PyTasksQpMotionSpringConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyEigenVectorXd *alphaD;
    PyEigenVectorXd *lambda;
    const char *keywords[] = {"alphaD", "lambda", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyEigenVectorXd_Type, &alphaD, &PyEigenVectorXd_Type, &lambda)) {
        return NULL;
    }
    self->obj->computeTorque(*((PyEigenVectorXd *) alphaD)->obj, *((PyEigenVectorXd *) lambda)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyTasksQpMotionSpringConstr_addToSolver__0(PyTasksQpMotionSpringConstr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpQPSolver *solver;
    const char *keywords[] = {"solver", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpQPSolver_Type, &solver)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->addToSolver(*((PyTasksQpQPSolver *) solver)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpMotionSpringConstr_addToSolver__1(PyTasksQpMotionSpringConstr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mbs_value;
    PyTasksQpQPSolver *solver;
    const char *keywords[] = {"mbs", "solver", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &PyTasksQpQPSolver_Type, &solver)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->addToSolver(mbs_value, *((PyTasksQpQPSolver *) solver)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyTasksQpMotionSpringConstr_addToSolver(PyTasksQpMotionSpringConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpMotionSpringConstr_addToSolver__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpMotionSpringConstr_addToSolver__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}



PyObject *
_wrap_PyTasksQpMotionSpringConstr_torque__0(PyTasksQpMotionSpringConstr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PyEigenVectorXd *py_VectorXd;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    Eigen::VectorXd retval = self->obj->torque();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpMotionSpringConstr_torque__1(PyTasksQpMotionSpringConstr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mbs_value;
    std::vector<rbd::MultiBodyConfig> mbcs_value;
    const char *keywords[] = {"mbs", "mbcs", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O&", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, _wrap_convert_py2c__std__vector__lt___rbd__MultiBodyConfig___gt__, &mbcs_value)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->torque(mbs_value, mbcs_value);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyTasksQpMotionSpringConstr_torque(PyTasksQpMotionSpringConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpMotionSpringConstr_torque__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpMotionSpringConstr_torque__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksQpMotionSpringConstr_removeFromSolver(PyTasksQpMotionSpringConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyTasksQpQPSolver *solver;
    const char *keywords[] = {"solver", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpQPSolver_Type, &solver)) {
        return NULL;
    }
    self->obj->removeFromSolver(*((PyTasksQpQPSolver *) solver)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpMotionSpringConstr_nrGenInEq(PyTasksQpMotionSpringConstr *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->nrGenInEq();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpMotionSpringConstr_maxGenInEq(PyTasksQpMotionSpringConstr *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->maxGenInEq();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpMotionSpringConstr_LowerGenInEq(PyTasksQpMotionSpringConstr *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd retval = self->obj->LowerGenInEq();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpMotionSpringConstr_update(PyTasksQpMotionSpringConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mb_value;
    std::vector<rbd::MultiBodyConfig> mbc_value;
    PyTasksQpSolverData *data;
    const char *keywords[] = {"mb", "mbc", "data", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mb_value, _wrap_convert_py2c__std__vector__lt___rbd__MultiBodyConfig___gt__, &mbc_value, &PyTasksQpSolverData_Type, &data)) {
        return NULL;
    }
    self->obj->update(mb_value, mbc_value, *((PyTasksQpSolverData *) data)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpMotionSpringConstr_updateNrVars(PyTasksQpMotionSpringConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mb_value;
    PyTasksQpSolverData *data;
    const char *keywords[] = {"mb", "data", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mb_value, &PyTasksQpSolverData_Type, &data)) {
        return NULL;
    }
    self->obj->updateNrVars(mb_value, *((PyTasksQpSolverData *) data)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpMotionSpringConstr_UpperGenInEq(PyTasksQpMotionSpringConstr *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd retval = self->obj->UpperGenInEq();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpMotionSpringConstr_AGenInEq(PyTasksQpMotionSpringConstr *self)
{
    PyObject *py_retval;
    PyEigenMatrixXd *py_MatrixXd;

    Eigen::MatrixXd retval = self->obj->AGenInEq();
    py_MatrixXd = PyObject_New(PyEigenMatrixXd, &PyEigenMatrixXd_Type);
    py_MatrixXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MatrixXd->obj = new Eigen::MatrixXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_MatrixXd);
    return py_retval;
}

static PyMethodDef PyTasksQpMotionSpringConstr_methods[] = {
    {(char *) "computeTorque", (PyCFunction) _wrap_PyTasksQpMotionSpringConstr_computeTorque, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "addToSolver", (PyCFunction) _wrap_PyTasksQpMotionSpringConstr_addToSolver, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "torque", (PyCFunction) _wrap_PyTasksQpMotionSpringConstr_torque, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "removeFromSolver", (PyCFunction) _wrap_PyTasksQpMotionSpringConstr_removeFromSolver, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "nrGenInEq", (PyCFunction) _wrap_PyTasksQpMotionSpringConstr_nrGenInEq, METH_NOARGS, NULL },
    {(char *) "maxGenInEq", (PyCFunction) _wrap_PyTasksQpMotionSpringConstr_maxGenInEq, METH_NOARGS, NULL },
    {(char *) "LowerGenInEq", (PyCFunction) _wrap_PyTasksQpMotionSpringConstr_LowerGenInEq, METH_NOARGS, NULL },
    {(char *) "update", (PyCFunction) _wrap_PyTasksQpMotionSpringConstr_update, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "updateNrVars", (PyCFunction) _wrap_PyTasksQpMotionSpringConstr_updateNrVars, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "UpperGenInEq", (PyCFunction) _wrap_PyTasksQpMotionSpringConstr_UpperGenInEq, METH_NOARGS, NULL },
    {(char *) "AGenInEq", (PyCFunction) _wrap_PyTasksQpMotionSpringConstr_AGenInEq, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpMotionSpringConstr__tp_dealloc(PyTasksQpMotionSpringConstr *self)
{
        tasks::qp::MotionSpringConstr *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpMotionSpringConstr__tp_richcompare (PyTasksQpMotionSpringConstr *PYBINDGEN_UNUSED(self), PyTasksQpMotionSpringConstr *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpMotionSpringConstr_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpMotionSpringConstr_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.MotionSpringConstr",            /* tp_name */
    sizeof(PyTasksQpMotionSpringConstr),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpMotionSpringConstr__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpMotionSpringConstr__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpMotionSpringConstr_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpMotionSpringConstr__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyTasksQpPositiveLambda__tp_init(PyTasksQpPositiveLambda *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        return -1;
    }
    self->obj = new tasks::qp::PositiveLambda();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}



PyObject *
_wrap_PyTasksQpPositiveLambda_addToSolver__0(PyTasksQpPositiveLambda *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpQPSolver *solver;
    const char *keywords[] = {"solver", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpQPSolver_Type, &solver)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->addToSolver(*((PyTasksQpQPSolver *) solver)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpPositiveLambda_addToSolver__1(PyTasksQpPositiveLambda *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mbs_value;
    PyTasksQpQPSolver *solver;
    const char *keywords[] = {"mbs", "solver", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &PyTasksQpQPSolver_Type, &solver)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->addToSolver(mbs_value, *((PyTasksQpQPSolver *) solver)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyTasksQpPositiveLambda_addToSolver(PyTasksQpPositiveLambda *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpPositiveLambda_addToSolver__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpPositiveLambda_addToSolver__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksQpPositiveLambda_removeFromSolver(PyTasksQpPositiveLambda *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyTasksQpQPSolver *solver;
    const char *keywords[] = {"solver", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpQPSolver_Type, &solver)) {
        return NULL;
    }
    self->obj->removeFromSolver(*((PyTasksQpQPSolver *) solver)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpPositiveLambda_Upper(PyTasksQpPositiveLambda *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd retval = self->obj->Upper();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpPositiveLambda_beginVar(PyTasksQpPositiveLambda *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->beginVar();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpPositiveLambda_update(PyTasksQpPositiveLambda *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mb_value;
    std::vector<rbd::MultiBodyConfig> mbc_value;
    PyTasksQpSolverData *data;
    const char *keywords[] = {"mb", "mbc", "data", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mb_value, _wrap_convert_py2c__std__vector__lt___rbd__MultiBodyConfig___gt__, &mbc_value, &PyTasksQpSolverData_Type, &data)) {
        return NULL;
    }
    self->obj->update(mb_value, mbc_value, *((PyTasksQpSolverData *) data)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpPositiveLambda_Lower(PyTasksQpPositiveLambda *self)
{
    PyObject *py_retval;
    PyEigenMatrixXd *py_MatrixXd;

    Eigen::MatrixXd retval = self->obj->Lower();
    py_MatrixXd = PyObject_New(PyEigenMatrixXd, &PyEigenMatrixXd_Type);
    py_MatrixXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MatrixXd->obj = new Eigen::MatrixXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_MatrixXd);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpPositiveLambda_updateNrVars(PyTasksQpPositiveLambda *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mb_value;
    PyTasksQpSolverData *data;
    const char *keywords[] = {"mb", "data", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mb_value, &PyTasksQpSolverData_Type, &data)) {
        return NULL;
    }
    self->obj->updateNrVars(mb_value, *((PyTasksQpSolverData *) data)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyTasksQpPositiveLambda_methods[] = {
    {(char *) "addToSolver", (PyCFunction) _wrap_PyTasksQpPositiveLambda_addToSolver, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "removeFromSolver", (PyCFunction) _wrap_PyTasksQpPositiveLambda_removeFromSolver, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Upper", (PyCFunction) _wrap_PyTasksQpPositiveLambda_Upper, METH_NOARGS, NULL },
    {(char *) "beginVar", (PyCFunction) _wrap_PyTasksQpPositiveLambda_beginVar, METH_NOARGS, NULL },
    {(char *) "update", (PyCFunction) _wrap_PyTasksQpPositiveLambda_update, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Lower", (PyCFunction) _wrap_PyTasksQpPositiveLambda_Lower, METH_NOARGS, NULL },
    {(char *) "updateNrVars", (PyCFunction) _wrap_PyTasksQpPositiveLambda_updateNrVars, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpPositiveLambda__tp_dealloc(PyTasksQpPositiveLambda *self)
{
        tasks::qp::PositiveLambda *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpPositiveLambda__tp_richcompare (PyTasksQpPositiveLambda *PYBINDGEN_UNUSED(self), PyTasksQpPositiveLambda *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpPositiveLambda_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpPositiveLambda_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.PositiveLambda",            /* tp_name */
    sizeof(PyTasksQpPositiveLambda),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpPositiveLambda__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpPositiveLambda__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpPositiveLambda_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpPositiveLambda__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyTasksQpContactConstrCommon__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'ContactConstrCommon' cannot be constructed ()");
    return -1;
}


PyObject *
_wrap_PyTasksQpContactConstrCommon_removeDofContact(PyTasksQpContactConstrCommon *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyTasksQpContactId *contactId;
    const char *keywords[] = {"contactId", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpContactId_Type, &contactId)) {
        return NULL;
    }
    retval = self->obj->removeDofContact(*((PyTasksQpContactId *) contactId)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyTasksQpContactConstrCommon_removeVirtualContact(PyTasksQpContactConstrCommon *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyTasksQpContactId *contactId;
    const char *keywords[] = {"contactId", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpContactId_Type, &contactId)) {
        return NULL;
    }
    retval = self->obj->removeVirtualContact(*((PyTasksQpContactId *) contactId)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyTasksQpContactConstrCommon_addDofContact(PyTasksQpContactConstrCommon *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyTasksQpContactId *contactId;
    PyEigenMatrixXd *dof;
    const char *keywords[] = {"contactId", "dof", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyTasksQpContactId_Type, &contactId, &PyEigenMatrixXd_Type, &dof)) {
        return NULL;
    }
    retval = self->obj->addDofContact(*((PyTasksQpContactId *) contactId)->obj, *((PyEigenMatrixXd *) dof)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyTasksQpContactConstrCommon_addVirtualContact(PyTasksQpContactConstrCommon *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyTasksQpContactId *contactId;
    const char *keywords[] = {"contactId", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpContactId_Type, &contactId)) {
        return NULL;
    }
    retval = self->obj->addVirtualContact(*((PyTasksQpContactId *) contactId)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyTasksQpContactConstrCommon_resetVirtualContacts(PyTasksQpContactConstrCommon *self)
{
    PyObject *py_retval;

    self->obj->resetVirtualContacts();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksQpContactConstrCommon_resetDofContacts(PyTasksQpContactConstrCommon *self)
{
    PyObject *py_retval;

    self->obj->resetDofContacts();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyTasksQpContactConstrCommon_methods[] = {
    {(char *) "removeDofContact", (PyCFunction) _wrap_PyTasksQpContactConstrCommon_removeDofContact, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "removeVirtualContact", (PyCFunction) _wrap_PyTasksQpContactConstrCommon_removeVirtualContact, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "addDofContact", (PyCFunction) _wrap_PyTasksQpContactConstrCommon_addDofContact, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "addVirtualContact", (PyCFunction) _wrap_PyTasksQpContactConstrCommon_addVirtualContact, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "resetVirtualContacts", (PyCFunction) _wrap_PyTasksQpContactConstrCommon_resetVirtualContacts, METH_NOARGS, NULL },
    {(char *) "resetDofContacts", (PyCFunction) _wrap_PyTasksQpContactConstrCommon_resetDofContacts, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpContactConstrCommon__tp_dealloc(PyTasksQpContactConstrCommon *self)
{
        tasks::qp::ContactConstrCommon *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpContactConstrCommon__tp_richcompare (PyTasksQpContactConstrCommon *PYBINDGEN_UNUSED(self), PyTasksQpContactConstrCommon *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpContactConstrCommon_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpContactConstrCommon_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.ContactConstrCommon",            /* tp_name */
    sizeof(PyTasksQpContactConstrCommon),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpContactConstrCommon__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpContactConstrCommon__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpContactConstrCommon_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpContactConstrCommon__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyTasksQpContactAccConstr__tp_init(PyTasksQpContactAccConstr *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        return -1;
    }
    self->obj = new tasks::qp::ContactAccConstr();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}


PyObject *
_wrap_PyTasksQpContactAccConstr_updateDofContacts(PyTasksQpContactAccConstr *self)
{
    PyObject *py_retval;

    self->obj->updateDofContacts();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyTasksQpContactAccConstr_addToSolver__0(PyTasksQpContactAccConstr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpQPSolver *solver;
    const char *keywords[] = {"solver", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpQPSolver_Type, &solver)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->addToSolver(*((PyTasksQpQPSolver *) solver)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpContactAccConstr_addToSolver__1(PyTasksQpContactAccConstr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mbs_value;
    PyTasksQpQPSolver *solver;
    const char *keywords[] = {"mbs", "solver", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &PyTasksQpQPSolver_Type, &solver)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->addToSolver(mbs_value, *((PyTasksQpQPSolver *) solver)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyTasksQpContactAccConstr_addToSolver(PyTasksQpContactAccConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpContactAccConstr_addToSolver__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpContactAccConstr_addToSolver__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksQpContactAccConstr_removeFromSolver(PyTasksQpContactAccConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyTasksQpQPSolver *solver;
    const char *keywords[] = {"solver", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpQPSolver_Type, &solver)) {
        return NULL;
    }
    self->obj->removeFromSolver(*((PyTasksQpQPSolver *) solver)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpContactAccConstr_AEq(PyTasksQpContactAccConstr *self)
{
    PyObject *py_retval;
    PyEigenMatrixXd *py_MatrixXd;

    Eigen::MatrixXd retval = self->obj->AEq();
    py_MatrixXd = PyObject_New(PyEigenMatrixXd, &PyEigenMatrixXd_Type);
    py_MatrixXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MatrixXd->obj = new Eigen::MatrixXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_MatrixXd);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpContactAccConstr_removeDofContact(PyTasksQpContactAccConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyTasksQpContactId *contactId;
    const char *keywords[] = {"contactId", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpContactId_Type, &contactId)) {
        return NULL;
    }
    retval = self->obj->removeDofContact(*((PyTasksQpContactId *) contactId)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
_wrap_PyTasksQpContactAccConstr_removeVirtualContact(PyTasksQpContactAccConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyTasksQpContactId *contactId;
    const char *keywords[] = {"contactId", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpContactId_Type, &contactId)) {
        return NULL;
    }
    retval = self->obj->removeVirtualContact(*((PyTasksQpContactId *) contactId)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
_wrap_PyTasksQpContactAccConstr_maxEq(PyTasksQpContactAccConstr *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->maxEq();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpContactAccConstr_resetDofContacts(PyTasksQpContactAccConstr *self)
{
    PyObject *py_retval;

    self->obj->resetDofContacts();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpContactAccConstr_updateNrVars(PyTasksQpContactAccConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mb_value;
    PyTasksQpSolverData *data;
    const char *keywords[] = {"mb", "data", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mb_value, &PyTasksQpSolverData_Type, &data)) {
        return NULL;
    }
    self->obj->updateNrVars(mb_value, *((PyTasksQpSolverData *) data)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpContactAccConstr_update(PyTasksQpContactAccConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mb_value;
    std::vector<rbd::MultiBodyConfig> mbc_value;
    PyTasksQpSolverData *data;
    const char *keywords[] = {"mb", "mbc", "data", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mb_value, _wrap_convert_py2c__std__vector__lt___rbd__MultiBodyConfig___gt__, &mbc_value, &PyTasksQpSolverData_Type, &data)) {
        return NULL;
    }
    self->obj->update(mb_value, mbc_value, *((PyTasksQpSolverData *) data)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpContactAccConstr_addDofContact(PyTasksQpContactAccConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyTasksQpContactId *contactId;
    PyEigenMatrixXd *dof;
    const char *keywords[] = {"contactId", "dof", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyTasksQpContactId_Type, &contactId, &PyEigenMatrixXd_Type, &dof)) {
        return NULL;
    }
    retval = self->obj->addDofContact(*((PyTasksQpContactId *) contactId)->obj, *((PyEigenMatrixXd *) dof)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
_wrap_PyTasksQpContactAccConstr_nrEq(PyTasksQpContactAccConstr *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->nrEq();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpContactAccConstr_addVirtualContact(PyTasksQpContactAccConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyTasksQpContactId *contactId;
    const char *keywords[] = {"contactId", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpContactId_Type, &contactId)) {
        return NULL;
    }
    retval = self->obj->addVirtualContact(*((PyTasksQpContactId *) contactId)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
_wrap_PyTasksQpContactAccConstr_resetVirtualContacts(PyTasksQpContactAccConstr *self)
{
    PyObject *py_retval;

    self->obj->resetVirtualContacts();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpContactAccConstr_bEq(PyTasksQpContactAccConstr *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd retval = self->obj->bEq();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}

static PyMethodDef PyTasksQpContactAccConstr_methods[] = {
    {(char *) "updateDofContacts", (PyCFunction) _wrap_PyTasksQpContactAccConstr_updateDofContacts, METH_NOARGS, NULL },
    {(char *) "addToSolver", (PyCFunction) _wrap_PyTasksQpContactAccConstr_addToSolver, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "removeFromSolver", (PyCFunction) _wrap_PyTasksQpContactAccConstr_removeFromSolver, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "AEq", (PyCFunction) _wrap_PyTasksQpContactAccConstr_AEq, METH_NOARGS, NULL },
    {(char *) "removeDofContact", (PyCFunction) _wrap_PyTasksQpContactAccConstr_removeDofContact, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "removeVirtualContact", (PyCFunction) _wrap_PyTasksQpContactAccConstr_removeVirtualContact, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "maxEq", (PyCFunction) _wrap_PyTasksQpContactAccConstr_maxEq, METH_NOARGS, NULL },
    {(char *) "resetDofContacts", (PyCFunction) _wrap_PyTasksQpContactAccConstr_resetDofContacts, METH_NOARGS, NULL },
    {(char *) "updateNrVars", (PyCFunction) _wrap_PyTasksQpContactAccConstr_updateNrVars, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "update", (PyCFunction) _wrap_PyTasksQpContactAccConstr_update, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "addDofContact", (PyCFunction) _wrap_PyTasksQpContactAccConstr_addDofContact, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "nrEq", (PyCFunction) _wrap_PyTasksQpContactAccConstr_nrEq, METH_NOARGS, NULL },
    {(char *) "addVirtualContact", (PyCFunction) _wrap_PyTasksQpContactAccConstr_addVirtualContact, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "resetVirtualContacts", (PyCFunction) _wrap_PyTasksQpContactAccConstr_resetVirtualContacts, METH_NOARGS, NULL },
    {(char *) "bEq", (PyCFunction) _wrap_PyTasksQpContactAccConstr_bEq, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpContactAccConstr__tp_dealloc(PyTasksQpContactAccConstr *self)
{
        tasks::qp::ContactAccConstr *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpContactAccConstr__tp_richcompare (PyTasksQpContactAccConstr *PYBINDGEN_UNUSED(self), PyTasksQpContactAccConstr *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpContactAccConstr_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpContactAccConstr_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.ContactAccConstr",            /* tp_name */
    sizeof(PyTasksQpContactAccConstr),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpContactAccConstr__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpContactAccConstr__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpContactAccConstr_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpContactAccConstr__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyTasksQpContactSpeedConstr__tp_init(PyTasksQpContactSpeedConstr *self, PyObject *args, PyObject *kwargs)
{
    double timeStep;
    const char *keywords[] = {"timeStep", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &timeStep)) {
        return -1;
    }
    self->obj = new tasks::qp::ContactSpeedConstr(timeStep);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}


PyObject *
_wrap_PyTasksQpContactSpeedConstr_updateDofContacts(PyTasksQpContactSpeedConstr *self)
{
    PyObject *py_retval;

    self->obj->updateDofContacts();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyTasksQpContactSpeedConstr_addToSolver__0(PyTasksQpContactSpeedConstr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpQPSolver *solver;
    const char *keywords[] = {"solver", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpQPSolver_Type, &solver)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->addToSolver(*((PyTasksQpQPSolver *) solver)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpContactSpeedConstr_addToSolver__1(PyTasksQpContactSpeedConstr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mbs_value;
    PyTasksQpQPSolver *solver;
    const char *keywords[] = {"mbs", "solver", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &PyTasksQpQPSolver_Type, &solver)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->addToSolver(mbs_value, *((PyTasksQpQPSolver *) solver)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyTasksQpContactSpeedConstr_addToSolver(PyTasksQpContactSpeedConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpContactSpeedConstr_addToSolver__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpContactSpeedConstr_addToSolver__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksQpContactSpeedConstr_removeFromSolver(PyTasksQpContactSpeedConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyTasksQpQPSolver *solver;
    const char *keywords[] = {"solver", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpQPSolver_Type, &solver)) {
        return NULL;
    }
    self->obj->removeFromSolver(*((PyTasksQpQPSolver *) solver)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpContactSpeedConstr_AEq(PyTasksQpContactSpeedConstr *self)
{
    PyObject *py_retval;
    PyEigenMatrixXd *py_MatrixXd;

    Eigen::MatrixXd retval = self->obj->AEq();
    py_MatrixXd = PyObject_New(PyEigenMatrixXd, &PyEigenMatrixXd_Type);
    py_MatrixXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MatrixXd->obj = new Eigen::MatrixXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_MatrixXd);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpContactSpeedConstr_removeDofContact(PyTasksQpContactSpeedConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyTasksQpContactId *contactId;
    const char *keywords[] = {"contactId", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpContactId_Type, &contactId)) {
        return NULL;
    }
    retval = self->obj->removeDofContact(*((PyTasksQpContactId *) contactId)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
_wrap_PyTasksQpContactSpeedConstr_removeVirtualContact(PyTasksQpContactSpeedConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyTasksQpContactId *contactId;
    const char *keywords[] = {"contactId", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpContactId_Type, &contactId)) {
        return NULL;
    }
    retval = self->obj->removeVirtualContact(*((PyTasksQpContactId *) contactId)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
_wrap_PyTasksQpContactSpeedConstr_maxEq(PyTasksQpContactSpeedConstr *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->maxEq();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpContactSpeedConstr_resetDofContacts(PyTasksQpContactSpeedConstr *self)
{
    PyObject *py_retval;

    self->obj->resetDofContacts();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpContactSpeedConstr_addDofContact(PyTasksQpContactSpeedConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyTasksQpContactId *contactId;
    PyEigenMatrixXd *dof;
    const char *keywords[] = {"contactId", "dof", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyTasksQpContactId_Type, &contactId, &PyEigenMatrixXd_Type, &dof)) {
        return NULL;
    }
    retval = self->obj->addDofContact(*((PyTasksQpContactId *) contactId)->obj, *((PyEigenMatrixXd *) dof)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
_wrap_PyTasksQpContactSpeedConstr_nrEq(PyTasksQpContactSpeedConstr *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->nrEq();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpContactSpeedConstr_addVirtualContact(PyTasksQpContactSpeedConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyTasksQpContactId *contactId;
    const char *keywords[] = {"contactId", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpContactId_Type, &contactId)) {
        return NULL;
    }
    retval = self->obj->addVirtualContact(*((PyTasksQpContactId *) contactId)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
_wrap_PyTasksQpContactSpeedConstr_resetVirtualContacts(PyTasksQpContactSpeedConstr *self)
{
    PyObject *py_retval;

    self->obj->resetVirtualContacts();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpContactSpeedConstr_bEq(PyTasksQpContactSpeedConstr *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd retval = self->obj->bEq();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}

static PyMethodDef PyTasksQpContactSpeedConstr_methods[] = {
    {(char *) "updateDofContacts", (PyCFunction) _wrap_PyTasksQpContactSpeedConstr_updateDofContacts, METH_NOARGS, NULL },
    {(char *) "addToSolver", (PyCFunction) _wrap_PyTasksQpContactSpeedConstr_addToSolver, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "removeFromSolver", (PyCFunction) _wrap_PyTasksQpContactSpeedConstr_removeFromSolver, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "AEq", (PyCFunction) _wrap_PyTasksQpContactSpeedConstr_AEq, METH_NOARGS, NULL },
    {(char *) "removeDofContact", (PyCFunction) _wrap_PyTasksQpContactSpeedConstr_removeDofContact, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "removeVirtualContact", (PyCFunction) _wrap_PyTasksQpContactSpeedConstr_removeVirtualContact, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "maxEq", (PyCFunction) _wrap_PyTasksQpContactSpeedConstr_maxEq, METH_NOARGS, NULL },
    {(char *) "resetDofContacts", (PyCFunction) _wrap_PyTasksQpContactSpeedConstr_resetDofContacts, METH_NOARGS, NULL },
    {(char *) "addDofContact", (PyCFunction) _wrap_PyTasksQpContactSpeedConstr_addDofContact, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "nrEq", (PyCFunction) _wrap_PyTasksQpContactSpeedConstr_nrEq, METH_NOARGS, NULL },
    {(char *) "addVirtualContact", (PyCFunction) _wrap_PyTasksQpContactSpeedConstr_addVirtualContact, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "resetVirtualContacts", (PyCFunction) _wrap_PyTasksQpContactSpeedConstr_resetVirtualContacts, METH_NOARGS, NULL },
    {(char *) "bEq", (PyCFunction) _wrap_PyTasksQpContactSpeedConstr_bEq, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpContactSpeedConstr__tp_dealloc(PyTasksQpContactSpeedConstr *self)
{
        tasks::qp::ContactSpeedConstr *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpContactSpeedConstr__tp_richcompare (PyTasksQpContactSpeedConstr *PYBINDGEN_UNUSED(self), PyTasksQpContactSpeedConstr *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpContactSpeedConstr_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpContactSpeedConstr_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.ContactSpeedConstr",            /* tp_name */
    sizeof(PyTasksQpContactSpeedConstr),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpContactSpeedConstr__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpContactSpeedConstr__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpContactSpeedConstr_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpContactSpeedConstr__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyTasksQpContactPosConstr__tp_init(PyTasksQpContactPosConstr *self, PyObject *args, PyObject *kwargs)
{
    double timeStep;
    const char *keywords[] = {"timeStep", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &timeStep)) {
        return -1;
    }
    self->obj = new tasks::qp::ContactPosConstr(timeStep);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}


PyObject *
_wrap_PyTasksQpContactPosConstr_updateDofContacts(PyTasksQpContactPosConstr *self)
{
    PyObject *py_retval;

    self->obj->updateDofContacts();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyTasksQpContactPosConstr_addToSolver__0(PyTasksQpContactPosConstr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpQPSolver *solver;
    const char *keywords[] = {"solver", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpQPSolver_Type, &solver)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->addToSolver(*((PyTasksQpQPSolver *) solver)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpContactPosConstr_addToSolver__1(PyTasksQpContactPosConstr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mbs_value;
    PyTasksQpQPSolver *solver;
    const char *keywords[] = {"mbs", "solver", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &PyTasksQpQPSolver_Type, &solver)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->addToSolver(mbs_value, *((PyTasksQpQPSolver *) solver)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyTasksQpContactPosConstr_addToSolver(PyTasksQpContactPosConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpContactPosConstr_addToSolver__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpContactPosConstr_addToSolver__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksQpContactPosConstr_removeFromSolver(PyTasksQpContactPosConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyTasksQpQPSolver *solver;
    const char *keywords[] = {"solver", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpQPSolver_Type, &solver)) {
        return NULL;
    }
    self->obj->removeFromSolver(*((PyTasksQpQPSolver *) solver)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpContactPosConstr_AEq(PyTasksQpContactPosConstr *self)
{
    PyObject *py_retval;
    PyEigenMatrixXd *py_MatrixXd;

    Eigen::MatrixXd retval = self->obj->AEq();
    py_MatrixXd = PyObject_New(PyEigenMatrixXd, &PyEigenMatrixXd_Type);
    py_MatrixXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MatrixXd->obj = new Eigen::MatrixXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_MatrixXd);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpContactPosConstr_removeDofContact(PyTasksQpContactPosConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyTasksQpContactId *contactId;
    const char *keywords[] = {"contactId", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpContactId_Type, &contactId)) {
        return NULL;
    }
    retval = self->obj->removeDofContact(*((PyTasksQpContactId *) contactId)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
_wrap_PyTasksQpContactPosConstr_removeVirtualContact(PyTasksQpContactPosConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyTasksQpContactId *contactId;
    const char *keywords[] = {"contactId", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpContactId_Type, &contactId)) {
        return NULL;
    }
    retval = self->obj->removeVirtualContact(*((PyTasksQpContactId *) contactId)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
_wrap_PyTasksQpContactPosConstr_maxEq(PyTasksQpContactPosConstr *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->maxEq();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpContactPosConstr_resetDofContacts(PyTasksQpContactPosConstr *self)
{
    PyObject *py_retval;

    self->obj->resetDofContacts();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpContactPosConstr_addDofContact(PyTasksQpContactPosConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyTasksQpContactId *contactId;
    PyEigenMatrixXd *dof;
    const char *keywords[] = {"contactId", "dof", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyTasksQpContactId_Type, &contactId, &PyEigenMatrixXd_Type, &dof)) {
        return NULL;
    }
    retval = self->obj->addDofContact(*((PyTasksQpContactId *) contactId)->obj, *((PyEigenMatrixXd *) dof)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
_wrap_PyTasksQpContactPosConstr_nrEq(PyTasksQpContactPosConstr *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->nrEq();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpContactPosConstr_addVirtualContact(PyTasksQpContactPosConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyTasksQpContactId *contactId;
    const char *keywords[] = {"contactId", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpContactId_Type, &contactId)) {
        return NULL;
    }
    retval = self->obj->addVirtualContact(*((PyTasksQpContactId *) contactId)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
_wrap_PyTasksQpContactPosConstr_resetVirtualContacts(PyTasksQpContactPosConstr *self)
{
    PyObject *py_retval;

    self->obj->resetVirtualContacts();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpContactPosConstr_bEq(PyTasksQpContactPosConstr *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd retval = self->obj->bEq();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}

static PyMethodDef PyTasksQpContactPosConstr_methods[] = {
    {(char *) "updateDofContacts", (PyCFunction) _wrap_PyTasksQpContactPosConstr_updateDofContacts, METH_NOARGS, NULL },
    {(char *) "addToSolver", (PyCFunction) _wrap_PyTasksQpContactPosConstr_addToSolver, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "removeFromSolver", (PyCFunction) _wrap_PyTasksQpContactPosConstr_removeFromSolver, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "AEq", (PyCFunction) _wrap_PyTasksQpContactPosConstr_AEq, METH_NOARGS, NULL },
    {(char *) "removeDofContact", (PyCFunction) _wrap_PyTasksQpContactPosConstr_removeDofContact, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "removeVirtualContact", (PyCFunction) _wrap_PyTasksQpContactPosConstr_removeVirtualContact, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "maxEq", (PyCFunction) _wrap_PyTasksQpContactPosConstr_maxEq, METH_NOARGS, NULL },
    {(char *) "resetDofContacts", (PyCFunction) _wrap_PyTasksQpContactPosConstr_resetDofContacts, METH_NOARGS, NULL },
    {(char *) "addDofContact", (PyCFunction) _wrap_PyTasksQpContactPosConstr_addDofContact, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "nrEq", (PyCFunction) _wrap_PyTasksQpContactPosConstr_nrEq, METH_NOARGS, NULL },
    {(char *) "addVirtualContact", (PyCFunction) _wrap_PyTasksQpContactPosConstr_addVirtualContact, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "resetVirtualContacts", (PyCFunction) _wrap_PyTasksQpContactPosConstr_resetVirtualContacts, METH_NOARGS, NULL },
    {(char *) "bEq", (PyCFunction) _wrap_PyTasksQpContactPosConstr_bEq, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpContactPosConstr__tp_dealloc(PyTasksQpContactPosConstr *self)
{
        tasks::qp::ContactPosConstr *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpContactPosConstr__tp_richcompare (PyTasksQpContactPosConstr *PYBINDGEN_UNUSED(self), PyTasksQpContactPosConstr *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpContactPosConstr_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpContactPosConstr_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.ContactPosConstr",            /* tp_name */
    sizeof(PyTasksQpContactPosConstr),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpContactPosConstr__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpContactPosConstr__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpContactPosConstr_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpContactPosConstr__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyTasksQpCollisionConstr__tp_init(PyTasksQpCollisionConstr *self, PyObject *args, PyObject *kwargs)
{
    std::vector<rbd::MultiBody> mbs_value;
    double step;
    const char *keywords[] = {"mbs", "step", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &step)) {
        return -1;
    }
    self->obj = new tasks::qp::CollisionConstr(mbs_value, step);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}


PyObject *
_wrap_PyTasksQpCollisionConstr_reset(PyTasksQpCollisionConstr *self)
{
    PyObject *py_retval;

    self->obj->reset();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksQpCollisionConstr_rmCollision(PyTasksQpCollisionConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    int collId;
    const char *keywords[] = {"collId", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &collId)) {
        return NULL;
    }
    retval = self->obj->rmCollision(collId);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyTasksQpCollisionConstr_updateNrCollisions(PyTasksQpCollisionConstr *self)
{
    PyObject *py_retval;

    self->obj->updateNrCollisions();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksQpCollisionConstr_addCollision(PyTasksQpCollisionConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mbs_value;
    int collId;
    int r1Index;
    const char *r1BodyName;
    Py_ssize_t r1BodyName_len;
    std::string r1BodyName_std;
    PySchS_Object *body1;
    sch::S_Object *body1_ptr;
    PySvaPTransformd *X_op1_o1;
    int r2Index;
    const char *r2BodyName;
    Py_ssize_t r2BodyName_len;
    std::string r2BodyName_std;
    PySchS_Object *body2;
    sch::S_Object *body2_ptr;
    PySvaPTransformd *X_op2_o2;
    double di;
    double ds;
    double damping;
    double dampingOff = 0.;
    const char *keywords[] = {"mbs", "collId", "r1Index", "r1BodyName", "body1", "X_op1_o1", "r2Index", "r2BodyName", "body2", "X_op2_o2", "di", "ds", "damping", "dampingOff", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iis#O!O!is#O!O!ddd|d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &collId, &r1Index, &r1BodyName, &r1BodyName_len, &PySchS_Object_Type, &body1, &PySvaPTransformd_Type, &X_op1_o1, &r2Index, &r2BodyName, &r2BodyName_len, &PySchS_Object_Type, &body2, &PySvaPTransformd_Type, &X_op2_o2, &di, &ds, &damping, &dampingOff)) {
        return NULL;
    }
    r1BodyName_std = std::string(r1BodyName, r1BodyName_len);
    body1_ptr = (body1 ? body1->obj : NULL);
    r2BodyName_std = std::string(r2BodyName, r2BodyName_len);
    body2_ptr = (body2 ? body2->obj : NULL);
    self->obj->addCollision(mbs_value, collId, r1Index, r1BodyName_std, body1_ptr, *((PySvaPTransformd *) X_op1_o1)->obj, r2Index, r2BodyName_std, body2_ptr, *((PySvaPTransformd *) X_op2_o2)->obj, di, ds, damping, dampingOff);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksQpCollisionConstr_nrCollisions(PyTasksQpCollisionConstr *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->nrCollisions();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}



PyObject *
_wrap_PyTasksQpCollisionConstr_addToSolver__0(PyTasksQpCollisionConstr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpQPSolver *solver;
    const char *keywords[] = {"solver", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpQPSolver_Type, &solver)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->addToSolver(*((PyTasksQpQPSolver *) solver)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpCollisionConstr_addToSolver__1(PyTasksQpCollisionConstr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mbs_value;
    PyTasksQpQPSolver *solver;
    const char *keywords[] = {"mbs", "solver", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &PyTasksQpQPSolver_Type, &solver)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->addToSolver(mbs_value, *((PyTasksQpQPSolver *) solver)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyTasksQpCollisionConstr_addToSolver(PyTasksQpCollisionConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpCollisionConstr_addToSolver__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpCollisionConstr_addToSolver__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksQpCollisionConstr_removeFromSolver(PyTasksQpCollisionConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyTasksQpQPSolver *solver;
    const char *keywords[] = {"solver", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpQPSolver_Type, &solver)) {
        return NULL;
    }
    self->obj->removeFromSolver(*((PyTasksQpQPSolver *) solver)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpCollisionConstr_updateNrVars(PyTasksQpCollisionConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mb_value;
    PyTasksQpSolverData *data;
    const char *keywords[] = {"mb", "data", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mb_value, &PyTasksQpSolverData_Type, &data)) {
        return NULL;
    }
    self->obj->updateNrVars(mb_value, *((PyTasksQpSolverData *) data)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpCollisionConstr_AInEq(PyTasksQpCollisionConstr *self)
{
    PyObject *py_retval;
    PyEigenMatrixXd *py_MatrixXd;

    Eigen::MatrixXd retval = self->obj->AInEq();
    py_MatrixXd = PyObject_New(PyEigenMatrixXd, &PyEigenMatrixXd_Type);
    py_MatrixXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MatrixXd->obj = new Eigen::MatrixXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_MatrixXd);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpCollisionConstr_update(PyTasksQpCollisionConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mb_value;
    std::vector<rbd::MultiBodyConfig> mbc_value;
    PyTasksQpSolverData *data;
    const char *keywords[] = {"mb", "mbc", "data", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mb_value, _wrap_convert_py2c__std__vector__lt___rbd__MultiBodyConfig___gt__, &mbc_value, &PyTasksQpSolverData_Type, &data)) {
        return NULL;
    }
    self->obj->update(mb_value, mbc_value, *((PyTasksQpSolverData *) data)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpCollisionConstr_bInEq(PyTasksQpCollisionConstr *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd retval = self->obj->bInEq();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpCollisionConstr_nrInEq(PyTasksQpCollisionConstr *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->nrInEq();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpCollisionConstr_maxInEq(PyTasksQpCollisionConstr *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->maxInEq();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}

static PyMethodDef PyTasksQpCollisionConstr_methods[] = {
    {(char *) "reset", (PyCFunction) _wrap_PyTasksQpCollisionConstr_reset, METH_NOARGS, NULL },
    {(char *) "rmCollision", (PyCFunction) _wrap_PyTasksQpCollisionConstr_rmCollision, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "updateNrCollisions", (PyCFunction) _wrap_PyTasksQpCollisionConstr_updateNrCollisions, METH_NOARGS, NULL },
    {(char *) "addCollision", (PyCFunction) _wrap_PyTasksQpCollisionConstr_addCollision, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "nrCollisions", (PyCFunction) _wrap_PyTasksQpCollisionConstr_nrCollisions, METH_NOARGS, NULL },
    {(char *) "addToSolver", (PyCFunction) _wrap_PyTasksQpCollisionConstr_addToSolver, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "removeFromSolver", (PyCFunction) _wrap_PyTasksQpCollisionConstr_removeFromSolver, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "updateNrVars", (PyCFunction) _wrap_PyTasksQpCollisionConstr_updateNrVars, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "AInEq", (PyCFunction) _wrap_PyTasksQpCollisionConstr_AInEq, METH_NOARGS, NULL },
    {(char *) "update", (PyCFunction) _wrap_PyTasksQpCollisionConstr_update, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "bInEq", (PyCFunction) _wrap_PyTasksQpCollisionConstr_bInEq, METH_NOARGS, NULL },
    {(char *) "nrInEq", (PyCFunction) _wrap_PyTasksQpCollisionConstr_nrInEq, METH_NOARGS, NULL },
    {(char *) "maxInEq", (PyCFunction) _wrap_PyTasksQpCollisionConstr_maxInEq, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpCollisionConstr__tp_dealloc(PyTasksQpCollisionConstr *self)
{
        tasks::qp::CollisionConstr *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpCollisionConstr__tp_richcompare (PyTasksQpCollisionConstr *PYBINDGEN_UNUSED(self), PyTasksQpCollisionConstr *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpCollisionConstr_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpCollisionConstr_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.CollisionConstr",            /* tp_name */
    sizeof(PyTasksQpCollisionConstr),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpCollisionConstr__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpCollisionConstr__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpCollisionConstr_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpCollisionConstr__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyTasksQpCoMIncPlaneConstr__tp_init(PyTasksQpCoMIncPlaneConstr *self, PyObject *args, PyObject *kwargs)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    double step;
    const char *keywords[] = {"mbs", "robotIndex", "step", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&id", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &step)) {
        return -1;
    }
    self->obj = new tasks::qp::CoMIncPlaneConstr(mbs_value, robotIndex, step);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}


PyObject *
_wrap_PyTasksQpCoMIncPlaneConstr_reset(PyTasksQpCoMIncPlaneConstr *self)
{
    PyObject *py_retval;

    self->obj->reset();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyTasksQpCoMIncPlaneConstr_addPlane__0(PyTasksQpCoMIncPlaneConstr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    int planeId;
    PyEigenVector3d *normal;
    double offset;
    double di;
    double ds;
    double damping;
    double dampingOff = 0.;
    const char *keywords[] = {"planeId", "normal", "offset", "di", "ds", "damping", "dampingOff", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iO!dddd|d", (char **) keywords, &planeId, &PyEigenVector3d_Type, &normal, &offset, &di, &ds, &damping, &dampingOff)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->addPlane(planeId, *((PyEigenVector3d *) normal)->obj, offset, di, ds, damping, dampingOff);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpCoMIncPlaneConstr_addPlane__1(PyTasksQpCoMIncPlaneConstr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    int planeId;
    PyEigenVector3d *normal;
    double offset;
    double di;
    double ds;
    double damping;
    PyEigenVector3d *speed;
    PyEigenVector3d *normalDot;
    double dampingOff = 0.;
    const char *keywords[] = {"planeId", "normal", "offset", "di", "ds", "damping", "speed", "normalDot", "dampingOff", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iO!ddddO!O!|d", (char **) keywords, &planeId, &PyEigenVector3d_Type, &normal, &offset, &di, &ds, &damping, &PyEigenVector3d_Type, &speed, &PyEigenVector3d_Type, &normalDot, &dampingOff)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->addPlane(planeId, *((PyEigenVector3d *) normal)->obj, offset, di, ds, damping, *((PyEigenVector3d *) speed)->obj, *((PyEigenVector3d *) normalDot)->obj, dampingOff);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyTasksQpCoMIncPlaneConstr_addPlane(PyTasksQpCoMIncPlaneConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpCoMIncPlaneConstr_addPlane__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpCoMIncPlaneConstr_addPlane__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksQpCoMIncPlaneConstr_nrPlanes(PyTasksQpCoMIncPlaneConstr *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->nrPlanes();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyTasksQpCoMIncPlaneConstr_updateNrPlanes(PyTasksQpCoMIncPlaneConstr *self)
{
    PyObject *py_retval;

    self->obj->updateNrPlanes();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyTasksQpCoMIncPlaneConstr_addToSolver__0(PyTasksQpCoMIncPlaneConstr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpQPSolver *solver;
    const char *keywords[] = {"solver", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpQPSolver_Type, &solver)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->addToSolver(*((PyTasksQpQPSolver *) solver)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpCoMIncPlaneConstr_addToSolver__1(PyTasksQpCoMIncPlaneConstr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mbs_value;
    PyTasksQpQPSolver *solver;
    const char *keywords[] = {"mbs", "solver", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &PyTasksQpQPSolver_Type, &solver)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->addToSolver(mbs_value, *((PyTasksQpQPSolver *) solver)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyTasksQpCoMIncPlaneConstr_addToSolver(PyTasksQpCoMIncPlaneConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpCoMIncPlaneConstr_addToSolver__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpCoMIncPlaneConstr_addToSolver__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksQpCoMIncPlaneConstr_removeFromSolver(PyTasksQpCoMIncPlaneConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyTasksQpQPSolver *solver;
    const char *keywords[] = {"solver", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpQPSolver_Type, &solver)) {
        return NULL;
    }
    self->obj->removeFromSolver(*((PyTasksQpQPSolver *) solver)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksQpCoMIncPlaneConstr_rmPlane(PyTasksQpCoMIncPlaneConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    int planeId;
    const char *keywords[] = {"planeId", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &planeId)) {
        return NULL;
    }
    retval = self->obj->rmPlane(planeId);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
_wrap_PyTasksQpCoMIncPlaneConstr_updateNrVars(PyTasksQpCoMIncPlaneConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mb_value;
    PyTasksQpSolverData *data;
    const char *keywords[] = {"mb", "data", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mb_value, &PyTasksQpSolverData_Type, &data)) {
        return NULL;
    }
    self->obj->updateNrVars(mb_value, *((PyTasksQpSolverData *) data)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpCoMIncPlaneConstr_AInEq(PyTasksQpCoMIncPlaneConstr *self)
{
    PyObject *py_retval;
    PyEigenMatrixXd *py_MatrixXd;

    Eigen::MatrixXd retval = self->obj->AInEq();
    py_MatrixXd = PyObject_New(PyEigenMatrixXd, &PyEigenMatrixXd_Type);
    py_MatrixXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MatrixXd->obj = new Eigen::MatrixXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_MatrixXd);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpCoMIncPlaneConstr_update(PyTasksQpCoMIncPlaneConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mb_value;
    std::vector<rbd::MultiBodyConfig> mbc_value;
    PyTasksQpSolverData *data;
    const char *keywords[] = {"mb", "mbc", "data", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mb_value, _wrap_convert_py2c__std__vector__lt___rbd__MultiBodyConfig___gt__, &mbc_value, &PyTasksQpSolverData_Type, &data)) {
        return NULL;
    }
    self->obj->update(mb_value, mbc_value, *((PyTasksQpSolverData *) data)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpCoMIncPlaneConstr_bInEq(PyTasksQpCoMIncPlaneConstr *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd retval = self->obj->bInEq();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpCoMIncPlaneConstr_nrInEq(PyTasksQpCoMIncPlaneConstr *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->nrInEq();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpCoMIncPlaneConstr_maxInEq(PyTasksQpCoMIncPlaneConstr *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->maxInEq();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}

static PyMethodDef PyTasksQpCoMIncPlaneConstr_methods[] = {
    {(char *) "reset", (PyCFunction) _wrap_PyTasksQpCoMIncPlaneConstr_reset, METH_NOARGS, NULL },
    {(char *) "addPlane", (PyCFunction) _wrap_PyTasksQpCoMIncPlaneConstr_addPlane, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "nrPlanes", (PyCFunction) _wrap_PyTasksQpCoMIncPlaneConstr_nrPlanes, METH_NOARGS, NULL },
    {(char *) "updateNrPlanes", (PyCFunction) _wrap_PyTasksQpCoMIncPlaneConstr_updateNrPlanes, METH_NOARGS, NULL },
    {(char *) "addToSolver", (PyCFunction) _wrap_PyTasksQpCoMIncPlaneConstr_addToSolver, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "removeFromSolver", (PyCFunction) _wrap_PyTasksQpCoMIncPlaneConstr_removeFromSolver, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "rmPlane", (PyCFunction) _wrap_PyTasksQpCoMIncPlaneConstr_rmPlane, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "updateNrVars", (PyCFunction) _wrap_PyTasksQpCoMIncPlaneConstr_updateNrVars, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "AInEq", (PyCFunction) _wrap_PyTasksQpCoMIncPlaneConstr_AInEq, METH_NOARGS, NULL },
    {(char *) "update", (PyCFunction) _wrap_PyTasksQpCoMIncPlaneConstr_update, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "bInEq", (PyCFunction) _wrap_PyTasksQpCoMIncPlaneConstr_bInEq, METH_NOARGS, NULL },
    {(char *) "nrInEq", (PyCFunction) _wrap_PyTasksQpCoMIncPlaneConstr_nrInEq, METH_NOARGS, NULL },
    {(char *) "maxInEq", (PyCFunction) _wrap_PyTasksQpCoMIncPlaneConstr_maxInEq, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpCoMIncPlaneConstr__tp_dealloc(PyTasksQpCoMIncPlaneConstr *self)
{
        tasks::qp::CoMIncPlaneConstr *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpCoMIncPlaneConstr__tp_richcompare (PyTasksQpCoMIncPlaneConstr *PYBINDGEN_UNUSED(self), PyTasksQpCoMIncPlaneConstr *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpCoMIncPlaneConstr_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpCoMIncPlaneConstr_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.CoMIncPlaneConstr",            /* tp_name */
    sizeof(PyTasksQpCoMIncPlaneConstr),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpCoMIncPlaneConstr__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpCoMIncPlaneConstr__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpCoMIncPlaneConstr_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpCoMIncPlaneConstr__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyTasksQpJointLimitsConstr__tp_init(PyTasksQpJointLimitsConstr *self, PyObject *args, PyObject *kwargs)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQBound *qb;
    double step;
    const char *keywords[] = {"mbs", "robotIndex", "qb", "step", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQBound_Type, &qb, &step)) {
        return -1;
    }
    self->obj = new tasks::qp::JointLimitsConstr(mbs_value, robotIndex, *((PyTasksQBound *) qb)->obj, step);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}



PyObject *
_wrap_PyTasksQpJointLimitsConstr_addToSolver__0(PyTasksQpJointLimitsConstr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpQPSolver *solver;
    const char *keywords[] = {"solver", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpQPSolver_Type, &solver)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->addToSolver(*((PyTasksQpQPSolver *) solver)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpJointLimitsConstr_addToSolver__1(PyTasksQpJointLimitsConstr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mbs_value;
    PyTasksQpQPSolver *solver;
    const char *keywords[] = {"mbs", "solver", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &PyTasksQpQPSolver_Type, &solver)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->addToSolver(mbs_value, *((PyTasksQpQPSolver *) solver)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyTasksQpJointLimitsConstr_addToSolver(PyTasksQpJointLimitsConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpJointLimitsConstr_addToSolver__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpJointLimitsConstr_addToSolver__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksQpJointLimitsConstr_removeFromSolver(PyTasksQpJointLimitsConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyTasksQpQPSolver *solver;
    const char *keywords[] = {"solver", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpQPSolver_Type, &solver)) {
        return NULL;
    }
    self->obj->removeFromSolver(*((PyTasksQpQPSolver *) solver)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpJointLimitsConstr_Upper(PyTasksQpJointLimitsConstr *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd retval = self->obj->Upper();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpJointLimitsConstr_beginVar(PyTasksQpJointLimitsConstr *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->beginVar();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpJointLimitsConstr_update(PyTasksQpJointLimitsConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mb_value;
    std::vector<rbd::MultiBodyConfig> mbc_value;
    PyTasksQpSolverData *data;
    const char *keywords[] = {"mb", "mbc", "data", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mb_value, _wrap_convert_py2c__std__vector__lt___rbd__MultiBodyConfig___gt__, &mbc_value, &PyTasksQpSolverData_Type, &data)) {
        return NULL;
    }
    self->obj->update(mb_value, mbc_value, *((PyTasksQpSolverData *) data)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpJointLimitsConstr_Lower(PyTasksQpJointLimitsConstr *self)
{
    PyObject *py_retval;
    PyEigenMatrixXd *py_MatrixXd;

    Eigen::MatrixXd retval = self->obj->Lower();
    py_MatrixXd = PyObject_New(PyEigenMatrixXd, &PyEigenMatrixXd_Type);
    py_MatrixXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MatrixXd->obj = new Eigen::MatrixXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_MatrixXd);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpJointLimitsConstr_updateNrVars(PyTasksQpJointLimitsConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mb_value;
    PyTasksQpSolverData *data;
    const char *keywords[] = {"mb", "data", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mb_value, &PyTasksQpSolverData_Type, &data)) {
        return NULL;
    }
    self->obj->updateNrVars(mb_value, *((PyTasksQpSolverData *) data)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyTasksQpJointLimitsConstr_methods[] = {
    {(char *) "addToSolver", (PyCFunction) _wrap_PyTasksQpJointLimitsConstr_addToSolver, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "removeFromSolver", (PyCFunction) _wrap_PyTasksQpJointLimitsConstr_removeFromSolver, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Upper", (PyCFunction) _wrap_PyTasksQpJointLimitsConstr_Upper, METH_NOARGS, NULL },
    {(char *) "beginVar", (PyCFunction) _wrap_PyTasksQpJointLimitsConstr_beginVar, METH_NOARGS, NULL },
    {(char *) "update", (PyCFunction) _wrap_PyTasksQpJointLimitsConstr_update, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Lower", (PyCFunction) _wrap_PyTasksQpJointLimitsConstr_Lower, METH_NOARGS, NULL },
    {(char *) "updateNrVars", (PyCFunction) _wrap_PyTasksQpJointLimitsConstr_updateNrVars, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpJointLimitsConstr__tp_dealloc(PyTasksQpJointLimitsConstr *self)
{
        tasks::qp::JointLimitsConstr *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpJointLimitsConstr__tp_richcompare (PyTasksQpJointLimitsConstr *PYBINDGEN_UNUSED(self), PyTasksQpJointLimitsConstr *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpJointLimitsConstr_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpJointLimitsConstr_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.JointLimitsConstr",            /* tp_name */
    sizeof(PyTasksQpJointLimitsConstr),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpJointLimitsConstr__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpJointLimitsConstr__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpJointLimitsConstr_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpJointLimitsConstr__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyTasksQpDamperJointLimitsConstr__tp_init(PyTasksQpDamperJointLimitsConstr *self, PyObject *args, PyObject *kwargs)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    PyTasksQBound *qb;
    PyTasksAlphaBound *ab;
    double interPercent;
    double securityPercent;
    double damperOffset;
    double step;
    const char *keywords[] = {"mbs", "robotIndex", "qb", "ab", "interPercent", "securityPercent", "damperOffset", "step", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iO!O!dddd", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &PyTasksQBound_Type, &qb, &PyTasksAlphaBound_Type, &ab, &interPercent, &securityPercent, &damperOffset, &step)) {
        return -1;
    }
    self->obj = new tasks::qp::DamperJointLimitsConstr(mbs_value, robotIndex, *((PyTasksQBound *) qb)->obj, *((PyTasksAlphaBound *) ab)->obj, interPercent, securityPercent, damperOffset, step);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}



PyObject *
_wrap_PyTasksQpDamperJointLimitsConstr_addToSolver__0(PyTasksQpDamperJointLimitsConstr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpQPSolver *solver;
    const char *keywords[] = {"solver", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpQPSolver_Type, &solver)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->addToSolver(*((PyTasksQpQPSolver *) solver)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpDamperJointLimitsConstr_addToSolver__1(PyTasksQpDamperJointLimitsConstr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mbs_value;
    PyTasksQpQPSolver *solver;
    const char *keywords[] = {"mbs", "solver", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &PyTasksQpQPSolver_Type, &solver)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->addToSolver(mbs_value, *((PyTasksQpQPSolver *) solver)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyTasksQpDamperJointLimitsConstr_addToSolver(PyTasksQpDamperJointLimitsConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpDamperJointLimitsConstr_addToSolver__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpDamperJointLimitsConstr_addToSolver__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksQpDamperJointLimitsConstr_removeFromSolver(PyTasksQpDamperJointLimitsConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyTasksQpQPSolver *solver;
    const char *keywords[] = {"solver", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpQPSolver_Type, &solver)) {
        return NULL;
    }
    self->obj->removeFromSolver(*((PyTasksQpQPSolver *) solver)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpDamperJointLimitsConstr_Upper(PyTasksQpDamperJointLimitsConstr *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd retval = self->obj->Upper();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpDamperJointLimitsConstr_beginVar(PyTasksQpDamperJointLimitsConstr *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->beginVar();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpDamperJointLimitsConstr_update(PyTasksQpDamperJointLimitsConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mb_value;
    std::vector<rbd::MultiBodyConfig> mbc_value;
    PyTasksQpSolverData *data;
    const char *keywords[] = {"mb", "mbc", "data", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mb_value, _wrap_convert_py2c__std__vector__lt___rbd__MultiBodyConfig___gt__, &mbc_value, &PyTasksQpSolverData_Type, &data)) {
        return NULL;
    }
    self->obj->update(mb_value, mbc_value, *((PyTasksQpSolverData *) data)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpDamperJointLimitsConstr_Lower(PyTasksQpDamperJointLimitsConstr *self)
{
    PyObject *py_retval;
    PyEigenMatrixXd *py_MatrixXd;

    Eigen::MatrixXd retval = self->obj->Lower();
    py_MatrixXd = PyObject_New(PyEigenMatrixXd, &PyEigenMatrixXd_Type);
    py_MatrixXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MatrixXd->obj = new Eigen::MatrixXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_MatrixXd);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpDamperJointLimitsConstr_updateNrVars(PyTasksQpDamperJointLimitsConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mb_value;
    PyTasksQpSolverData *data;
    const char *keywords[] = {"mb", "data", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mb_value, &PyTasksQpSolverData_Type, &data)) {
        return NULL;
    }
    self->obj->updateNrVars(mb_value, *((PyTasksQpSolverData *) data)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyTasksQpDamperJointLimitsConstr_methods[] = {
    {(char *) "addToSolver", (PyCFunction) _wrap_PyTasksQpDamperJointLimitsConstr_addToSolver, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "removeFromSolver", (PyCFunction) _wrap_PyTasksQpDamperJointLimitsConstr_removeFromSolver, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Upper", (PyCFunction) _wrap_PyTasksQpDamperJointLimitsConstr_Upper, METH_NOARGS, NULL },
    {(char *) "beginVar", (PyCFunction) _wrap_PyTasksQpDamperJointLimitsConstr_beginVar, METH_NOARGS, NULL },
    {(char *) "update", (PyCFunction) _wrap_PyTasksQpDamperJointLimitsConstr_update, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Lower", (PyCFunction) _wrap_PyTasksQpDamperJointLimitsConstr_Lower, METH_NOARGS, NULL },
    {(char *) "updateNrVars", (PyCFunction) _wrap_PyTasksQpDamperJointLimitsConstr_updateNrVars, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpDamperJointLimitsConstr__tp_dealloc(PyTasksQpDamperJointLimitsConstr *self)
{
        tasks::qp::DamperJointLimitsConstr *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpDamperJointLimitsConstr__tp_richcompare (PyTasksQpDamperJointLimitsConstr *PYBINDGEN_UNUSED(self), PyTasksQpDamperJointLimitsConstr *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpDamperJointLimitsConstr_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpDamperJointLimitsConstr_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.DamperJointLimitsConstr",            /* tp_name */
    sizeof(PyTasksQpDamperJointLimitsConstr),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpDamperJointLimitsConstr__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpDamperJointLimitsConstr__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpDamperJointLimitsConstr_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpDamperJointLimitsConstr__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyTasksQpGripperTorqueConstr__tp_init(PyTasksQpGripperTorqueConstr *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        return -1;
    }
    self->obj = new tasks::qp::GripperTorqueConstr();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}


PyObject *
_wrap_PyTasksQpGripperTorqueConstr_reset(PyTasksQpGripperTorqueConstr *self)
{
    PyObject *py_retval;

    self->obj->reset();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksQpGripperTorqueConstr_rmGripper(PyTasksQpGripperTorqueConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyTasksQpContactId *contactId;
    const char *keywords[] = {"contactId", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpContactId_Type, &contactId)) {
        return NULL;
    }
    retval = self->obj->rmGripper(*((PyTasksQpContactId *) contactId)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyTasksQpGripperTorqueConstr_addGripper(PyTasksQpGripperTorqueConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyTasksQpContactId *contactId;
    double torqueLimit;
    PyEigenVector3d *origin;
    PyEigenVector3d *axis;
    const char *keywords[] = {"contactId", "torqueLimit", "origin", "axis", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!dO!O!", (char **) keywords, &PyTasksQpContactId_Type, &contactId, &torqueLimit, &PyEigenVector3d_Type, &origin, &PyEigenVector3d_Type, &axis)) {
        return NULL;
    }
    self->obj->addGripper(*((PyTasksQpContactId *) contactId)->obj, torqueLimit, *((PyEigenVector3d *) origin)->obj, *((PyEigenVector3d *) axis)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyTasksQpGripperTorqueConstr_addToSolver__0(PyTasksQpGripperTorqueConstr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpQPSolver *solver;
    const char *keywords[] = {"solver", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpQPSolver_Type, &solver)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->addToSolver(*((PyTasksQpQPSolver *) solver)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpGripperTorqueConstr_addToSolver__1(PyTasksQpGripperTorqueConstr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mbs_value;
    PyTasksQpQPSolver *solver;
    const char *keywords[] = {"mbs", "solver", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &PyTasksQpQPSolver_Type, &solver)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->addToSolver(mbs_value, *((PyTasksQpQPSolver *) solver)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyTasksQpGripperTorqueConstr_addToSolver(PyTasksQpGripperTorqueConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpGripperTorqueConstr_addToSolver__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpGripperTorqueConstr_addToSolver__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksQpGripperTorqueConstr_removeFromSolver(PyTasksQpGripperTorqueConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyTasksQpQPSolver *solver;
    const char *keywords[] = {"solver", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpQPSolver_Type, &solver)) {
        return NULL;
    }
    self->obj->removeFromSolver(*((PyTasksQpQPSolver *) solver)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpGripperTorqueConstr_updateNrVars(PyTasksQpGripperTorqueConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mb_value;
    PyTasksQpSolverData *data;
    const char *keywords[] = {"mb", "data", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mb_value, &PyTasksQpSolverData_Type, &data)) {
        return NULL;
    }
    self->obj->updateNrVars(mb_value, *((PyTasksQpSolverData *) data)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpGripperTorqueConstr_AInEq(PyTasksQpGripperTorqueConstr *self)
{
    PyObject *py_retval;
    PyEigenMatrixXd *py_MatrixXd;

    Eigen::MatrixXd retval = self->obj->AInEq();
    py_MatrixXd = PyObject_New(PyEigenMatrixXd, &PyEigenMatrixXd_Type);
    py_MatrixXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MatrixXd->obj = new Eigen::MatrixXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_MatrixXd);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpGripperTorqueConstr_update(PyTasksQpGripperTorqueConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mb_value;
    std::vector<rbd::MultiBodyConfig> mbc_value;
    PyTasksQpSolverData *data;
    const char *keywords[] = {"mb", "mbc", "data", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mb_value, _wrap_convert_py2c__std__vector__lt___rbd__MultiBodyConfig___gt__, &mbc_value, &PyTasksQpSolverData_Type, &data)) {
        return NULL;
    }
    self->obj->update(mb_value, mbc_value, *((PyTasksQpSolverData *) data)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpGripperTorqueConstr_bInEq(PyTasksQpGripperTorqueConstr *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd retval = self->obj->bInEq();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpGripperTorqueConstr_nrInEq(PyTasksQpGripperTorqueConstr *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->nrInEq();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpGripperTorqueConstr_maxInEq(PyTasksQpGripperTorqueConstr *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->maxInEq();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}

static PyMethodDef PyTasksQpGripperTorqueConstr_methods[] = {
    {(char *) "reset", (PyCFunction) _wrap_PyTasksQpGripperTorqueConstr_reset, METH_NOARGS, NULL },
    {(char *) "rmGripper", (PyCFunction) _wrap_PyTasksQpGripperTorqueConstr_rmGripper, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "addGripper", (PyCFunction) _wrap_PyTasksQpGripperTorqueConstr_addGripper, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "addToSolver", (PyCFunction) _wrap_PyTasksQpGripperTorqueConstr_addToSolver, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "removeFromSolver", (PyCFunction) _wrap_PyTasksQpGripperTorqueConstr_removeFromSolver, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "updateNrVars", (PyCFunction) _wrap_PyTasksQpGripperTorqueConstr_updateNrVars, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "AInEq", (PyCFunction) _wrap_PyTasksQpGripperTorqueConstr_AInEq, METH_NOARGS, NULL },
    {(char *) "update", (PyCFunction) _wrap_PyTasksQpGripperTorqueConstr_update, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "bInEq", (PyCFunction) _wrap_PyTasksQpGripperTorqueConstr_bInEq, METH_NOARGS, NULL },
    {(char *) "nrInEq", (PyCFunction) _wrap_PyTasksQpGripperTorqueConstr_nrInEq, METH_NOARGS, NULL },
    {(char *) "maxInEq", (PyCFunction) _wrap_PyTasksQpGripperTorqueConstr_maxInEq, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpGripperTorqueConstr__tp_dealloc(PyTasksQpGripperTorqueConstr *self)
{
        tasks::qp::GripperTorqueConstr *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpGripperTorqueConstr__tp_richcompare (PyTasksQpGripperTorqueConstr *PYBINDGEN_UNUSED(self), PyTasksQpGripperTorqueConstr *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpGripperTorqueConstr_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpGripperTorqueConstr_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.GripperTorqueConstr",            /* tp_name */
    sizeof(PyTasksQpGripperTorqueConstr),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpGripperTorqueConstr__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpGripperTorqueConstr__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpGripperTorqueConstr_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpGripperTorqueConstr__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyTasksQpBoundedSpeedConstr__tp_init(PyTasksQpBoundedSpeedConstr *self, PyObject *args, PyObject *kwargs)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    double timeStep;
    const char *keywords[] = {"mbs", "robotIndex", "timeStep", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&id", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &timeStep)) {
        return -1;
    }
    self->obj = new tasks::qp::BoundedSpeedConstr(mbs_value, robotIndex, timeStep);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}


PyObject *
_wrap_PyTasksQpBoundedSpeedConstr_nrBoundedSpeeds(PyTasksQpBoundedSpeedConstr *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->nrBoundedSpeeds();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyTasksQpBoundedSpeedConstr_updateBoundedSpeeds(PyTasksQpBoundedSpeedConstr *self)
{
    PyObject *py_retval;

    self->obj->updateBoundedSpeeds();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyTasksQpBoundedSpeedConstr_addBoundedSpeed__0(PyTasksQpBoundedSpeedConstr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mbs_value;
    const char *bodyName;
    Py_ssize_t bodyName_len;
    std::string bodyName_std;
    PyEigenVector3d *bodyPoint;
    PyEigenMatrixXd *dof;
    PyEigenVectorXd *speed;
    const char *keywords[] = {"mbs", "bodyName", "bodyPoint", "dof", "speed", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&s#O!O!O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &bodyName, &bodyName_len, &PyEigenVector3d_Type, &bodyPoint, &PyEigenMatrixXd_Type, &dof, &PyEigenVectorXd_Type, &speed)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    bodyName_std = std::string(bodyName, bodyName_len);
    self->obj->addBoundedSpeed(mbs_value, bodyName_std, *((PyEigenVector3d *) bodyPoint)->obj, *((PyEigenMatrixXd *) dof)->obj, *((PyEigenVectorXd *) speed)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpBoundedSpeedConstr_addBoundedSpeed__1(PyTasksQpBoundedSpeedConstr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mbs_value;
    const char *bodyName;
    Py_ssize_t bodyName_len;
    std::string bodyName_std;
    PyEigenVector3d *bodyPoint;
    PyEigenMatrixXd *dof;
    PyEigenVectorXd *lowerSpeed;
    PyEigenVectorXd *upperSpeed;
    const char *keywords[] = {"mbs", "bodyName", "bodyPoint", "dof", "lowerSpeed", "upperSpeed", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&s#O!O!O!O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &bodyName, &bodyName_len, &PyEigenVector3d_Type, &bodyPoint, &PyEigenMatrixXd_Type, &dof, &PyEigenVectorXd_Type, &lowerSpeed, &PyEigenVectorXd_Type, &upperSpeed)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    bodyName_std = std::string(bodyName, bodyName_len);
    self->obj->addBoundedSpeed(mbs_value, bodyName_std, *((PyEigenVector3d *) bodyPoint)->obj, *((PyEigenMatrixXd *) dof)->obj, *((PyEigenVectorXd *) lowerSpeed)->obj, *((PyEigenVectorXd *) upperSpeed)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyTasksQpBoundedSpeedConstr_addBoundedSpeed(PyTasksQpBoundedSpeedConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpBoundedSpeedConstr_addBoundedSpeed__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpBoundedSpeedConstr_addBoundedSpeed__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksQpBoundedSpeedConstr_resetBoundedSpeeds(PyTasksQpBoundedSpeedConstr *self)
{
    PyObject *py_retval;

    self->obj->resetBoundedSpeeds();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksQpBoundedSpeedConstr_removeBoundedSpeed(PyTasksQpBoundedSpeedConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    const char *bodyName;
    Py_ssize_t bodyName_len;
    std::string bodyName_std;
    const char *keywords[] = {"bodyName", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &bodyName, &bodyName_len)) {
        return NULL;
    }
    bodyName_std = std::string(bodyName, bodyName_len);
    retval = self->obj->removeBoundedSpeed(bodyName_std);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}



PyObject *
_wrap_PyTasksQpBoundedSpeedConstr_addToSolver__0(PyTasksQpBoundedSpeedConstr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpQPSolver *solver;
    const char *keywords[] = {"solver", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpQPSolver_Type, &solver)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->addToSolver(*((PyTasksQpQPSolver *) solver)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpBoundedSpeedConstr_addToSolver__1(PyTasksQpBoundedSpeedConstr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mbs_value;
    PyTasksQpQPSolver *solver;
    const char *keywords[] = {"mbs", "solver", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &PyTasksQpQPSolver_Type, &solver)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->addToSolver(mbs_value, *((PyTasksQpQPSolver *) solver)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyTasksQpBoundedSpeedConstr_addToSolver(PyTasksQpBoundedSpeedConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpBoundedSpeedConstr_addToSolver__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpBoundedSpeedConstr_addToSolver__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksQpBoundedSpeedConstr_removeFromSolver(PyTasksQpBoundedSpeedConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyTasksQpQPSolver *solver;
    const char *keywords[] = {"solver", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpQPSolver_Type, &solver)) {
        return NULL;
    }
    self->obj->removeFromSolver(*((PyTasksQpQPSolver *) solver)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpBoundedSpeedConstr_nrGenInEq(PyTasksQpBoundedSpeedConstr *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->nrGenInEq();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpBoundedSpeedConstr_maxGenInEq(PyTasksQpBoundedSpeedConstr *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->maxGenInEq();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpBoundedSpeedConstr_LowerGenInEq(PyTasksQpBoundedSpeedConstr *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd retval = self->obj->LowerGenInEq();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpBoundedSpeedConstr_update(PyTasksQpBoundedSpeedConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mb_value;
    std::vector<rbd::MultiBodyConfig> mbc_value;
    PyTasksQpSolverData *data;
    const char *keywords[] = {"mb", "mbc", "data", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mb_value, _wrap_convert_py2c__std__vector__lt___rbd__MultiBodyConfig___gt__, &mbc_value, &PyTasksQpSolverData_Type, &data)) {
        return NULL;
    }
    self->obj->update(mb_value, mbc_value, *((PyTasksQpSolverData *) data)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpBoundedSpeedConstr_updateNrVars(PyTasksQpBoundedSpeedConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mb_value;
    PyTasksQpSolverData *data;
    const char *keywords[] = {"mb", "data", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mb_value, &PyTasksQpSolverData_Type, &data)) {
        return NULL;
    }
    self->obj->updateNrVars(mb_value, *((PyTasksQpSolverData *) data)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpBoundedSpeedConstr_UpperGenInEq(PyTasksQpBoundedSpeedConstr *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd retval = self->obj->UpperGenInEq();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpBoundedSpeedConstr_AGenInEq(PyTasksQpBoundedSpeedConstr *self)
{
    PyObject *py_retval;
    PyEigenMatrixXd *py_MatrixXd;

    Eigen::MatrixXd retval = self->obj->AGenInEq();
    py_MatrixXd = PyObject_New(PyEigenMatrixXd, &PyEigenMatrixXd_Type);
    py_MatrixXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MatrixXd->obj = new Eigen::MatrixXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_MatrixXd);
    return py_retval;
}

static PyMethodDef PyTasksQpBoundedSpeedConstr_methods[] = {
    {(char *) "nrBoundedSpeeds", (PyCFunction) _wrap_PyTasksQpBoundedSpeedConstr_nrBoundedSpeeds, METH_NOARGS, NULL },
    {(char *) "updateBoundedSpeeds", (PyCFunction) _wrap_PyTasksQpBoundedSpeedConstr_updateBoundedSpeeds, METH_NOARGS, NULL },
    {(char *) "addBoundedSpeed", (PyCFunction) _wrap_PyTasksQpBoundedSpeedConstr_addBoundedSpeed, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "resetBoundedSpeeds", (PyCFunction) _wrap_PyTasksQpBoundedSpeedConstr_resetBoundedSpeeds, METH_NOARGS, NULL },
    {(char *) "removeBoundedSpeed", (PyCFunction) _wrap_PyTasksQpBoundedSpeedConstr_removeBoundedSpeed, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "addToSolver", (PyCFunction) _wrap_PyTasksQpBoundedSpeedConstr_addToSolver, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "removeFromSolver", (PyCFunction) _wrap_PyTasksQpBoundedSpeedConstr_removeFromSolver, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "nrGenInEq", (PyCFunction) _wrap_PyTasksQpBoundedSpeedConstr_nrGenInEq, METH_NOARGS, NULL },
    {(char *) "maxGenInEq", (PyCFunction) _wrap_PyTasksQpBoundedSpeedConstr_maxGenInEq, METH_NOARGS, NULL },
    {(char *) "LowerGenInEq", (PyCFunction) _wrap_PyTasksQpBoundedSpeedConstr_LowerGenInEq, METH_NOARGS, NULL },
    {(char *) "update", (PyCFunction) _wrap_PyTasksQpBoundedSpeedConstr_update, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "updateNrVars", (PyCFunction) _wrap_PyTasksQpBoundedSpeedConstr_updateNrVars, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "UpperGenInEq", (PyCFunction) _wrap_PyTasksQpBoundedSpeedConstr_UpperGenInEq, METH_NOARGS, NULL },
    {(char *) "AGenInEq", (PyCFunction) _wrap_PyTasksQpBoundedSpeedConstr_AGenInEq, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpBoundedSpeedConstr__tp_dealloc(PyTasksQpBoundedSpeedConstr *self)
{
        tasks::qp::BoundedSpeedConstr *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpBoundedSpeedConstr__tp_richcompare (PyTasksQpBoundedSpeedConstr *PYBINDGEN_UNUSED(self), PyTasksQpBoundedSpeedConstr *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpBoundedSpeedConstr_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpBoundedSpeedConstr_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.BoundedSpeedConstr",            /* tp_name */
    sizeof(PyTasksQpBoundedSpeedConstr),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpBoundedSpeedConstr__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpBoundedSpeedConstr__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpBoundedSpeedConstr_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpBoundedSpeedConstr__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyTasksQpImageConstr__tp_init(PyTasksQpImageConstr *self, PyObject *args, PyObject *kwargs)
{
    std::vector<rbd::MultiBody> mbs_value;
    int robotIndex;
    const char *bodyName;
    Py_ssize_t bodyName_len;
    std::string bodyName_std;
    PySvaPTransformd *X_b_gaze;
    double step;
    double constrDirection = 1.;
    const char *keywords[] = {"mbs", "robotIndex", "bodyName", "X_b_gaze", "step", "constrDirection", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&is#O!d|d", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &robotIndex, &bodyName, &bodyName_len, &PySvaPTransformd_Type, &X_b_gaze, &step, &constrDirection)) {
        return -1;
    }
    bodyName_std = std::string(bodyName, bodyName_len);
    self->obj = new tasks::qp::ImageConstr(mbs_value, robotIndex, bodyName_std, *((PySvaPTransformd *) X_b_gaze)->obj, step, constrDirection);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}


PyObject *
_wrap_PyTasksQpImageConstr_reset(PyTasksQpImageConstr *self)
{
    PyObject *py_retval;

    self->obj->reset();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyTasksQpImageConstr_addPoint__0(PyTasksQpImageConstr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    int retval;
    PyEigenVector2d *point2d;
    double depthEstimate;
    const char *keywords[] = {"point2d", "depthEstimate", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!d", (char **) keywords, &PyEigenVector2d_Type, &point2d, &depthEstimate)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->addPoint(*((PyEigenVector2d *) point2d)->obj, depthEstimate);
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpImageConstr_addPoint__1(PyTasksQpImageConstr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    int retval;
    PyEigenVector3d *point3d;
    const char *keywords[] = {"point3d", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyEigenVector3d_Type, &point3d)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->addPoint(*((PyEigenVector3d *) point3d)->obj);
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpImageConstr_addPoint__2(PyTasksQpImageConstr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mbs_value;
    const char *bodyName;
    Py_ssize_t bodyName_len;
    std::string bodyName_std;
    PySvaPTransformd *X_b_p = NULL;
    const char *keywords[] = {"mbs", "bodyName", "X_b_p", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&s#|O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &bodyName, &bodyName_len, &PySvaPTransformd_Type, &X_b_p)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    bodyName_std = std::string(bodyName, bodyName_len);
    self->obj->addPoint(mbs_value, bodyName_std, (X_b_p ? (*((PySvaPTransformd *) X_b_p)->obj) : sva::PTransformd::Identity()));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyTasksQpImageConstr_addPoint(PyTasksQpImageConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyTasksQpImageConstr_addPoint__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpImageConstr_addPoint__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyTasksQpImageConstr_addPoint__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksQpImageConstr_setLimits(PyTasksQpImageConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyEigenVector2d *min;
    PyEigenVector2d *max;
    double iPercent;
    double sPercent;
    double damping;
    double dampingOffsetPercent;
    const char *keywords[] = {"min", "max", "iPercent", "sPercent", "damping", "dampingOffsetPercent", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!dddd", (char **) keywords, &PyEigenVector2d_Type, &min, &PyEigenVector2d_Type, &max, &iPercent, &sPercent, &damping, &dampingOffsetPercent)) {
        return NULL;
    }
    self->obj->setLimits(*((PyEigenVector2d *) min)->obj, *((PyEigenVector2d *) max)->obj, iPercent, sPercent, damping, dampingOffsetPercent);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyTasksQpImageConstr_updatePoint__0(PyTasksQpImageConstr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    int pointId;
    PyEigenVector2d *point2d;
    const char *keywords[] = {"pointId", "point2d", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iO!", (char **) keywords, &pointId, &PyEigenVector2d_Type, &point2d)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->updatePoint(pointId, *((PyEigenVector2d *) point2d)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpImageConstr_updatePoint__1(PyTasksQpImageConstr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    int pointId;
    PyEigenVector2d *point2d;
    double depthEstimate;
    const char *keywords[] = {"pointId", "point2d", "depthEstimate", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iO!d", (char **) keywords, &pointId, &PyEigenVector2d_Type, &point2d, &depthEstimate)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->updatePoint(pointId, *((PyEigenVector2d *) point2d)->obj, depthEstimate);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpImageConstr_updatePoint__2(PyTasksQpImageConstr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    int pointId;
    PyEigenVector3d *point3d;
    const char *keywords[] = {"pointId", "point3d", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iO!", (char **) keywords, &pointId, &PyEigenVector3d_Type, &point3d)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->updatePoint(pointId, *((PyEigenVector3d *) point3d)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyTasksQpImageConstr_updatePoint(PyTasksQpImageConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyTasksQpImageConstr_updatePoint__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpImageConstr_updatePoint__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyTasksQpImageConstr_updatePoint__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}



PyObject *
_wrap_PyTasksQpImageConstr_addToSolver__0(PyTasksQpImageConstr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyTasksQpQPSolver *solver;
    const char *keywords[] = {"solver", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpQPSolver_Type, &solver)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->addToSolver(*((PyTasksQpQPSolver *) solver)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpImageConstr_addToSolver__1(PyTasksQpImageConstr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mbs_value;
    PyTasksQpQPSolver *solver;
    const char *keywords[] = {"mbs", "solver", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &PyTasksQpQPSolver_Type, &solver)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->addToSolver(mbs_value, *((PyTasksQpQPSolver *) solver)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyTasksQpImageConstr_addToSolver(PyTasksQpImageConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksQpImageConstr_addToSolver__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQpImageConstr_addToSolver__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksQpImageConstr_removeFromSolver(PyTasksQpImageConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyTasksQpQPSolver *solver;
    const char *keywords[] = {"solver", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQpQPSolver_Type, &solver)) {
        return NULL;
    }
    self->obj->removeFromSolver(*((PyTasksQpQPSolver *) solver)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpImageConstr_updateNrVars(PyTasksQpImageConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mb_value;
    PyTasksQpSolverData *data;
    const char *keywords[] = {"mb", "data", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mb_value, &PyTasksQpSolverData_Type, &data)) {
        return NULL;
    }
    self->obj->updateNrVars(mb_value, *((PyTasksQpSolverData *) data)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpImageConstr_AInEq(PyTasksQpImageConstr *self)
{
    PyObject *py_retval;
    PyEigenMatrixXd *py_MatrixXd;

    Eigen::MatrixXd retval = self->obj->AInEq();
    py_MatrixXd = PyObject_New(PyEigenMatrixXd, &PyEigenMatrixXd_Type);
    py_MatrixXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MatrixXd->obj = new Eigen::MatrixXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_MatrixXd);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpImageConstr_update(PyTasksQpImageConstr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mb_value;
    std::vector<rbd::MultiBodyConfig> mbc_value;
    PyTasksQpSolverData *data;
    const char *keywords[] = {"mb", "mbc", "data", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mb_value, _wrap_convert_py2c__std__vector__lt___rbd__MultiBodyConfig___gt__, &mbc_value, &PyTasksQpSolverData_Type, &data)) {
        return NULL;
    }
    self->obj->update(mb_value, mbc_value, *((PyTasksQpSolverData *) data)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksQpImageConstr_bInEq(PyTasksQpImageConstr *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd retval = self->obj->bInEq();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpImageConstr_nrInEq(PyTasksQpImageConstr *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->nrInEq();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}

PyObject *
_wrap_PyTasksQpImageConstr_maxInEq(PyTasksQpImageConstr *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->maxInEq();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}

static PyMethodDef PyTasksQpImageConstr_methods[] = {
    {(char *) "reset", (PyCFunction) _wrap_PyTasksQpImageConstr_reset, METH_NOARGS, NULL },
    {(char *) "addPoint", (PyCFunction) _wrap_PyTasksQpImageConstr_addPoint, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "setLimits", (PyCFunction) _wrap_PyTasksQpImageConstr_setLimits, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "updatePoint", (PyCFunction) _wrap_PyTasksQpImageConstr_updatePoint, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "addToSolver", (PyCFunction) _wrap_PyTasksQpImageConstr_addToSolver, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "removeFromSolver", (PyCFunction) _wrap_PyTasksQpImageConstr_removeFromSolver, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "updateNrVars", (PyCFunction) _wrap_PyTasksQpImageConstr_updateNrVars, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "AInEq", (PyCFunction) _wrap_PyTasksQpImageConstr_AInEq, METH_NOARGS, NULL },
    {(char *) "update", (PyCFunction) _wrap_PyTasksQpImageConstr_update, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "bInEq", (PyCFunction) _wrap_PyTasksQpImageConstr_bInEq, METH_NOARGS, NULL },
    {(char *) "nrInEq", (PyCFunction) _wrap_PyTasksQpImageConstr_nrInEq, METH_NOARGS, NULL },
    {(char *) "maxInEq", (PyCFunction) _wrap_PyTasksQpImageConstr_maxInEq, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQpImageConstr__tp_dealloc(PyTasksQpImageConstr *self)
{
        tasks::qp::ImageConstr *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQpImageConstr__tp_richcompare (PyTasksQpImageConstr *PYBINDGEN_UNUSED(self), PyTasksQpImageConstr *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQpImageConstr_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQpImageConstr_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.qp.ImageConstr",            /* tp_name */
    sizeof(PyTasksQpImageConstr),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQpImageConstr__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQpImageConstr__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQpImageConstr_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQpImageConstr__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



static PyObject *
init_tasks_qp(void)
{
    PyObject *m;
    m = Py_InitModule3((char *) "_tasks.qp", _tasks_qp_functions, NULL);
    if (m == NULL) {
        return NULL;
    }
    /* Register the 'tasks::qp::QPSolver' class */
    if (PyType_Ready(&PyTasksQpQPSolver_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "QPSolver", (PyObject *) &PyTasksQpQPSolver_Type);
    /* Register the 'tasks::qp::SolverData' class */
    if (PyType_Ready(&PyTasksQpSolverData_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "SolverData", (PyObject *) &PyTasksQpSolverData_Type);
    /* Register the 'tasks::qp::FrictionCone' class */
    if (PyType_Ready(&PyTasksQpFrictionCone_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "FrictionCone", (PyObject *) &PyTasksQpFrictionCone_Type);
    /* Register the 'tasks::qp::ContactId' class */
    if (PyType_Ready(&PyTasksQpContactId_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "ContactId", (PyObject *) &PyTasksQpContactId_Type);
    /* Register the 'tasks::qp::UnilateralContact' class */
    if (PyType_Ready(&PyTasksQpUnilateralContact_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "UnilateralContact", (PyObject *) &PyTasksQpUnilateralContact_Type);
    /* Register the 'tasks::qp::BilateralContact' class */
    if (PyType_Ready(&PyTasksQpBilateralContact_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "BilateralContact", (PyObject *) &PyTasksQpBilateralContact_Type);
    /* Register the 'tasks::qp::JointStiffness' class */
    if (PyType_Ready(&PyTasksQpJointStiffness_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "JointStiffness", (PyObject *) &PyTasksQpJointStiffness_Type);
    /* Register the 'tasks::qp::JointGains' class */
    if (PyType_Ready(&PyTasksQpJointGains_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "JointGains", (PyObject *) &PyTasksQpJointGains_Type);
    /* Register the 'tasks::qp::SpringJoint' class */
    if (PyType_Ready(&PyTasksQpSpringJoint_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "SpringJoint", (PyObject *) &PyTasksQpSpringJoint_Type);
    /* Register the 'tasks::qp::Constraint' class */
    if (PyType_Ready(&PyTasksQpConstraint_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Constraint", (PyObject *) &PyTasksQpConstraint_Type);
    /* Register the 'tasks::qp::Equality' class */
    if (PyType_Ready(&PyTasksQpEquality_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Equality", (PyObject *) &PyTasksQpEquality_Type);
    /* Register the 'tasks::qp::Inequality' class */
    if (PyType_Ready(&PyTasksQpInequality_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Inequality", (PyObject *) &PyTasksQpInequality_Type);
    /* Register the 'tasks::qp::GenInequality' class */
    if (PyType_Ready(&PyTasksQpGenInequality_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "GenInequality", (PyObject *) &PyTasksQpGenInequality_Type);
    /* Register the 'tasks::qp::Bound' class */
    if (PyType_Ready(&PyTasksQpBound_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Bound", (PyObject *) &PyTasksQpBound_Type);
    /* Register the 'tasks::qp::Task' class */
    if (PyType_Ready(&PyTasksQpTask_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Task", (PyObject *) &PyTasksQpTask_Type);
    /* Register the 'tasks::qp::HighLevelTask' class */
    if (PyType_Ready(&PyTasksQpHighLevelTask_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "HighLevelTask", (PyObject *) &PyTasksQpHighLevelTask_Type);
    /* Register the 'tasks::qp::SetPointTask' class */
    PyTasksQpSetPointTask_Type.tp_base = &PyTasksQpTask_Type;
    if (PyType_Ready(&PyTasksQpSetPointTask_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "SetPointTask", (PyObject *) &PyTasksQpSetPointTask_Type);
    /* Register the 'tasks::qp::TrackingTask' class */
    PyTasksQpTrackingTask_Type.tp_base = &PyTasksQpTask_Type;
    if (PyType_Ready(&PyTasksQpTrackingTask_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "TrackingTask", (PyObject *) &PyTasksQpTrackingTask_Type);
    /* Register the 'tasks::qp::TrajectoryTask' class */
    PyTasksQpTrajectoryTask_Type.tp_base = &PyTasksQpTask_Type;
    if (PyType_Ready(&PyTasksQpTrajectoryTask_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "TrajectoryTask", (PyObject *) &PyTasksQpTrajectoryTask_Type);
    /* Register the 'tasks::qp::PIDTask' class */
    PyTasksQpPIDTask_Type.tp_base = &PyTasksQpTask_Type;
    if (PyType_Ready(&PyTasksQpPIDTask_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "PIDTask", (PyObject *) &PyTasksQpPIDTask_Type);
    /* Register the 'tasks::qp::TargetObjectiveTask' class */
    PyTasksQpTargetObjectiveTask_Type.tp_base = &PyTasksQpTask_Type;
    if (PyType_Ready(&PyTasksQpTargetObjectiveTask_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "TargetObjectiveTask", (PyObject *) &PyTasksQpTargetObjectiveTask_Type);
    /* Register the 'tasks::qp::PositionTask' class */
    PyTasksQpPositionTask_Type.tp_base = &PyTasksQpHighLevelTask_Type;
    if (PyType_Ready(&PyTasksQpPositionTask_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "PositionTask", (PyObject *) &PyTasksQpPositionTask_Type);
    /* Register the 'tasks::qp::OrientationTask' class */
    PyTasksQpOrientationTask_Type.tp_base = &PyTasksQpHighLevelTask_Type;
    if (PyType_Ready(&PyTasksQpOrientationTask_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "OrientationTask", (PyObject *) &PyTasksQpOrientationTask_Type);
    /* Register the 'tasks::qp::SurfaceOrientationTask' class */
    PyTasksQpSurfaceOrientationTask_Type.tp_base = &PyTasksQpHighLevelTask_Type;
    if (PyType_Ready(&PyTasksQpSurfaceOrientationTask_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "SurfaceOrientationTask", (PyObject *) &PyTasksQpSurfaceOrientationTask_Type);
    /* Register the 'tasks::qp::GazeTask' class */
    PyTasksQpGazeTask_Type.tp_base = &PyTasksQpHighLevelTask_Type;
    if (PyType_Ready(&PyTasksQpGazeTask_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "GazeTask", (PyObject *) &PyTasksQpGazeTask_Type);
    /* Register the 'tasks::qp::PositionBasedVisServoTask' class */
    PyTasksQpPositionBasedVisServoTask_Type.tp_base = &PyTasksQpHighLevelTask_Type;
    if (PyType_Ready(&PyTasksQpPositionBasedVisServoTask_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "PositionBasedVisServoTask", (PyObject *) &PyTasksQpPositionBasedVisServoTask_Type);
    /* Register the 'tasks::qp::PostureTask' class */
    PyTasksQpPostureTask_Type.tp_base = &PyTasksQpTask_Type;
    if (PyType_Ready(&PyTasksQpPostureTask_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "PostureTask", (PyObject *) &PyTasksQpPostureTask_Type);
    /* Register the 'tasks::qp::TorqueTask' class */
    PyTasksQpTorqueTask_Type.tp_base = &PyTasksQpTask_Type;
    if (PyType_Ready(&PyTasksQpTorqueTask_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "TorqueTask", (PyObject *) &PyTasksQpTorqueTask_Type);
    /* Register the 'tasks::qp::CoMTask' class */
    PyTasksQpCoMTask_Type.tp_base = &PyTasksQpHighLevelTask_Type;
    if (PyType_Ready(&PyTasksQpCoMTask_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "CoMTask", (PyObject *) &PyTasksQpCoMTask_Type);
    /* Register the 'tasks::qp::MultiCoMTask' class */
    PyTasksQpMultiCoMTask_Type.tp_base = &PyTasksQpTask_Type;
    if (PyType_Ready(&PyTasksQpMultiCoMTask_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "MultiCoMTask", (PyObject *) &PyTasksQpMultiCoMTask_Type);
    /* Register the 'tasks::qp::MultiRobotTransformTask' class */
    PyTasksQpMultiRobotTransformTask_Type.tp_base = &PyTasksQpTask_Type;
    if (PyType_Ready(&PyTasksQpMultiRobotTransformTask_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "MultiRobotTransformTask", (PyObject *) &PyTasksQpMultiRobotTransformTask_Type);
    /* Register the 'tasks::qp::MomentumTask' class */
    PyTasksQpMomentumTask_Type.tp_base = &PyTasksQpHighLevelTask_Type;
    if (PyType_Ready(&PyTasksQpMomentumTask_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "MomentumTask", (PyObject *) &PyTasksQpMomentumTask_Type);
    /* Register the 'tasks::qp::ContactTask' class */
    PyTasksQpContactTask_Type.tp_base = &PyTasksQpTask_Type;
    if (PyType_Ready(&PyTasksQpContactTask_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "ContactTask", (PyObject *) &PyTasksQpContactTask_Type);
    /* Register the 'tasks::qp::GripperTorqueTask' class */
    PyTasksQpGripperTorqueTask_Type.tp_base = &PyTasksQpTask_Type;
    if (PyType_Ready(&PyTasksQpGripperTorqueTask_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "GripperTorqueTask", (PyObject *) &PyTasksQpGripperTorqueTask_Type);
    /* Register the 'tasks::qp::LinVelocityTask' class */
    PyTasksQpLinVelocityTask_Type.tp_base = &PyTasksQpHighLevelTask_Type;
    if (PyType_Ready(&PyTasksQpLinVelocityTask_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "LinVelocityTask", (PyObject *) &PyTasksQpLinVelocityTask_Type);
    /* Register the 'tasks::qp::OrientationTrackingTask' class */
    PyTasksQpOrientationTrackingTask_Type.tp_base = &PyTasksQpHighLevelTask_Type;
    if (PyType_Ready(&PyTasksQpOrientationTrackingTask_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "OrientationTrackingTask", (PyObject *) &PyTasksQpOrientationTrackingTask_Type);
    /* Register the 'tasks::qp::TransformTask' class */
    PyTasksQpTransformTask_Type.tp_base = &PyTasksQpHighLevelTask_Type;
    if (PyType_Ready(&PyTasksQpTransformTask_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "TransformTask", (PyObject *) &PyTasksQpTransformTask_Type);
    /* Register the 'tasks::qp::SurfaceTransformTask' class */
    PyTasksQpSurfaceTransformTask_Type.tp_base = &PyTasksQpHighLevelTask_Type;
    if (PyType_Ready(&PyTasksQpSurfaceTransformTask_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "SurfaceTransformTask", (PyObject *) &PyTasksQpSurfaceTransformTask_Type);
    /* Register the 'tasks::qp::JointsSelector' class */
    PyTasksQpJointsSelector_Type.tp_base = &PyTasksQpHighLevelTask_Type;
    if (PyType_Ready(&PyTasksQpJointsSelector_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "JointsSelector", (PyObject *) &PyTasksQpJointsSelector_Type);
    /* Register the 'tasks::qp::RelativeDistTask' class */
    PyTasksQpRelativeDistTask_Type.tp_base = &PyTasksQpHighLevelTask_Type;
    if (PyType_Ready(&PyTasksQpRelativeDistTask_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "RelativeDistTask", (PyObject *) &PyTasksQpRelativeDistTask_Type);
    /* Register the 'tasks::qp::VectorOrientationTask' class */
    PyTasksQpVectorOrientationTask_Type.tp_base = &PyTasksQpHighLevelTask_Type;
    if (PyType_Ready(&PyTasksQpVectorOrientationTask_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "VectorOrientationTask", (PyObject *) &PyTasksQpVectorOrientationTask_Type);
    /* Register the 'tasks::qp::MotionConstr' class */
    PyTasksQpMotionConstr_Type.tp_base = &PyTasksQpGenInequality_Type;
    PyTasksQpMotionConstr_Type.tp_bases = PyTuple_New(2);
        Py_INCREF((PyObject *) &PyTasksQpGenInequality_Type);
        PyTuple_SET_ITEM(PyTasksQpMotionConstr_Type.tp_bases, 0, (PyObject *) &PyTasksQpGenInequality_Type);
        Py_INCREF((PyObject *) &PyTasksQpConstraint_Type);
        PyTuple_SET_ITEM(PyTasksQpMotionConstr_Type.tp_bases, 1, (PyObject *) &PyTasksQpConstraint_Type);
    if (PyType_Ready(&PyTasksQpMotionConstr_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "MotionConstr", (PyObject *) &PyTasksQpMotionConstr_Type);
    /* Register the 'tasks::qp::MotionPolyConstr' class */
    PyTasksQpMotionPolyConstr_Type.tp_base = &PyTasksQpGenInequality_Type;
    PyTasksQpMotionPolyConstr_Type.tp_bases = PyTuple_New(2);
        Py_INCREF((PyObject *) &PyTasksQpGenInequality_Type);
        PyTuple_SET_ITEM(PyTasksQpMotionPolyConstr_Type.tp_bases, 0, (PyObject *) &PyTasksQpGenInequality_Type);
        Py_INCREF((PyObject *) &PyTasksQpConstraint_Type);
        PyTuple_SET_ITEM(PyTasksQpMotionPolyConstr_Type.tp_bases, 1, (PyObject *) &PyTasksQpConstraint_Type);
    if (PyType_Ready(&PyTasksQpMotionPolyConstr_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "MotionPolyConstr", (PyObject *) &PyTasksQpMotionPolyConstr_Type);
    /* Register the 'tasks::qp::MotionSpringConstr' class */
    PyTasksQpMotionSpringConstr_Type.tp_base = &PyTasksQpGenInequality_Type;
    PyTasksQpMotionSpringConstr_Type.tp_bases = PyTuple_New(2);
        Py_INCREF((PyObject *) &PyTasksQpGenInequality_Type);
        PyTuple_SET_ITEM(PyTasksQpMotionSpringConstr_Type.tp_bases, 0, (PyObject *) &PyTasksQpGenInequality_Type);
        Py_INCREF((PyObject *) &PyTasksQpConstraint_Type);
        PyTuple_SET_ITEM(PyTasksQpMotionSpringConstr_Type.tp_bases, 1, (PyObject *) &PyTasksQpConstraint_Type);
    if (PyType_Ready(&PyTasksQpMotionSpringConstr_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "MotionSpringConstr", (PyObject *) &PyTasksQpMotionSpringConstr_Type);
    /* Register the 'tasks::qp::PositiveLambda' class */
    PyTasksQpPositiveLambda_Type.tp_base = &PyTasksQpBound_Type;
    PyTasksQpPositiveLambda_Type.tp_bases = PyTuple_New(2);
        Py_INCREF((PyObject *) &PyTasksQpBound_Type);
        PyTuple_SET_ITEM(PyTasksQpPositiveLambda_Type.tp_bases, 0, (PyObject *) &PyTasksQpBound_Type);
        Py_INCREF((PyObject *) &PyTasksQpConstraint_Type);
        PyTuple_SET_ITEM(PyTasksQpPositiveLambda_Type.tp_bases, 1, (PyObject *) &PyTasksQpConstraint_Type);
    if (PyType_Ready(&PyTasksQpPositiveLambda_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "PositiveLambda", (PyObject *) &PyTasksQpPositiveLambda_Type);
    /* Register the 'tasks::qp::ContactConstrCommon' class */
    if (PyType_Ready(&PyTasksQpContactConstrCommon_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "ContactConstrCommon", (PyObject *) &PyTasksQpContactConstrCommon_Type);
    /* Register the 'tasks::qp::ContactAccConstr' class */
    PyTasksQpContactAccConstr_Type.tp_base = &PyTasksQpEquality_Type;
    PyTasksQpContactAccConstr_Type.tp_bases = PyTuple_New(3);
        Py_INCREF((PyObject *) &PyTasksQpEquality_Type);
        PyTuple_SET_ITEM(PyTasksQpContactAccConstr_Type.tp_bases, 0, (PyObject *) &PyTasksQpEquality_Type);
        Py_INCREF((PyObject *) &PyTasksQpConstraint_Type);
        PyTuple_SET_ITEM(PyTasksQpContactAccConstr_Type.tp_bases, 1, (PyObject *) &PyTasksQpConstraint_Type);
        Py_INCREF((PyObject *) &PyTasksQpContactConstrCommon_Type);
        PyTuple_SET_ITEM(PyTasksQpContactAccConstr_Type.tp_bases, 2, (PyObject *) &PyTasksQpContactConstrCommon_Type);
    if (PyType_Ready(&PyTasksQpContactAccConstr_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "ContactAccConstr", (PyObject *) &PyTasksQpContactAccConstr_Type);
    /* Register the 'tasks::qp::ContactSpeedConstr' class */
    PyTasksQpContactSpeedConstr_Type.tp_base = &PyTasksQpEquality_Type;
    PyTasksQpContactSpeedConstr_Type.tp_bases = PyTuple_New(2);
        Py_INCREF((PyObject *) &PyTasksQpEquality_Type);
        PyTuple_SET_ITEM(PyTasksQpContactSpeedConstr_Type.tp_bases, 0, (PyObject *) &PyTasksQpEquality_Type);
        Py_INCREF((PyObject *) &PyTasksQpContactConstrCommon_Type);
        PyTuple_SET_ITEM(PyTasksQpContactSpeedConstr_Type.tp_bases, 1, (PyObject *) &PyTasksQpContactConstrCommon_Type);
    if (PyType_Ready(&PyTasksQpContactSpeedConstr_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "ContactSpeedConstr", (PyObject *) &PyTasksQpContactSpeedConstr_Type);
    /* Register the 'tasks::qp::ContactPosConstr' class */
    PyTasksQpContactPosConstr_Type.tp_base = &PyTasksQpEquality_Type;
    PyTasksQpContactPosConstr_Type.tp_bases = PyTuple_New(2);
        Py_INCREF((PyObject *) &PyTasksQpEquality_Type);
        PyTuple_SET_ITEM(PyTasksQpContactPosConstr_Type.tp_bases, 0, (PyObject *) &PyTasksQpEquality_Type);
        Py_INCREF((PyObject *) &PyTasksQpContactConstrCommon_Type);
        PyTuple_SET_ITEM(PyTasksQpContactPosConstr_Type.tp_bases, 1, (PyObject *) &PyTasksQpContactConstrCommon_Type);
    if (PyType_Ready(&PyTasksQpContactPosConstr_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "ContactPosConstr", (PyObject *) &PyTasksQpContactPosConstr_Type);
    /* Register the 'tasks::qp::CollisionConstr' class */
    PyTasksQpCollisionConstr_Type.tp_base = &PyTasksQpInequality_Type;
    PyTasksQpCollisionConstr_Type.tp_bases = PyTuple_New(2);
        Py_INCREF((PyObject *) &PyTasksQpInequality_Type);
        PyTuple_SET_ITEM(PyTasksQpCollisionConstr_Type.tp_bases, 0, (PyObject *) &PyTasksQpInequality_Type);
        Py_INCREF((PyObject *) &PyTasksQpConstraint_Type);
        PyTuple_SET_ITEM(PyTasksQpCollisionConstr_Type.tp_bases, 1, (PyObject *) &PyTasksQpConstraint_Type);
    if (PyType_Ready(&PyTasksQpCollisionConstr_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "CollisionConstr", (PyObject *) &PyTasksQpCollisionConstr_Type);
    /* Register the 'tasks::qp::CoMIncPlaneConstr' class */
    PyTasksQpCoMIncPlaneConstr_Type.tp_base = &PyTasksQpInequality_Type;
    PyTasksQpCoMIncPlaneConstr_Type.tp_bases = PyTuple_New(2);
        Py_INCREF((PyObject *) &PyTasksQpInequality_Type);
        PyTuple_SET_ITEM(PyTasksQpCoMIncPlaneConstr_Type.tp_bases, 0, (PyObject *) &PyTasksQpInequality_Type);
        Py_INCREF((PyObject *) &PyTasksQpConstraint_Type);
        PyTuple_SET_ITEM(PyTasksQpCoMIncPlaneConstr_Type.tp_bases, 1, (PyObject *) &PyTasksQpConstraint_Type);
    if (PyType_Ready(&PyTasksQpCoMIncPlaneConstr_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "CoMIncPlaneConstr", (PyObject *) &PyTasksQpCoMIncPlaneConstr_Type);
    /* Register the 'tasks::qp::JointLimitsConstr' class */
    PyTasksQpJointLimitsConstr_Type.tp_base = &PyTasksQpBound_Type;
    PyTasksQpJointLimitsConstr_Type.tp_bases = PyTuple_New(2);
        Py_INCREF((PyObject *) &PyTasksQpBound_Type);
        PyTuple_SET_ITEM(PyTasksQpJointLimitsConstr_Type.tp_bases, 0, (PyObject *) &PyTasksQpBound_Type);
        Py_INCREF((PyObject *) &PyTasksQpConstraint_Type);
        PyTuple_SET_ITEM(PyTasksQpJointLimitsConstr_Type.tp_bases, 1, (PyObject *) &PyTasksQpConstraint_Type);
    if (PyType_Ready(&PyTasksQpJointLimitsConstr_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "JointLimitsConstr", (PyObject *) &PyTasksQpJointLimitsConstr_Type);
    /* Register the 'tasks::qp::DamperJointLimitsConstr' class */
    PyTasksQpDamperJointLimitsConstr_Type.tp_base = &PyTasksQpBound_Type;
    PyTasksQpDamperJointLimitsConstr_Type.tp_bases = PyTuple_New(2);
        Py_INCREF((PyObject *) &PyTasksQpBound_Type);
        PyTuple_SET_ITEM(PyTasksQpDamperJointLimitsConstr_Type.tp_bases, 0, (PyObject *) &PyTasksQpBound_Type);
        Py_INCREF((PyObject *) &PyTasksQpConstraint_Type);
        PyTuple_SET_ITEM(PyTasksQpDamperJointLimitsConstr_Type.tp_bases, 1, (PyObject *) &PyTasksQpConstraint_Type);
    if (PyType_Ready(&PyTasksQpDamperJointLimitsConstr_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "DamperJointLimitsConstr", (PyObject *) &PyTasksQpDamperJointLimitsConstr_Type);
    /* Register the 'tasks::qp::GripperTorqueConstr' class */
    PyTasksQpGripperTorqueConstr_Type.tp_base = &PyTasksQpInequality_Type;
    PyTasksQpGripperTorqueConstr_Type.tp_bases = PyTuple_New(2);
        Py_INCREF((PyObject *) &PyTasksQpInequality_Type);
        PyTuple_SET_ITEM(PyTasksQpGripperTorqueConstr_Type.tp_bases, 0, (PyObject *) &PyTasksQpInequality_Type);
        Py_INCREF((PyObject *) &PyTasksQpConstraint_Type);
        PyTuple_SET_ITEM(PyTasksQpGripperTorqueConstr_Type.tp_bases, 1, (PyObject *) &PyTasksQpConstraint_Type);
    if (PyType_Ready(&PyTasksQpGripperTorqueConstr_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "GripperTorqueConstr", (PyObject *) &PyTasksQpGripperTorqueConstr_Type);
    /* Register the 'tasks::qp::BoundedSpeedConstr' class */
    PyTasksQpBoundedSpeedConstr_Type.tp_base = &PyTasksQpGenInequality_Type;
    PyTasksQpBoundedSpeedConstr_Type.tp_bases = PyTuple_New(2);
        Py_INCREF((PyObject *) &PyTasksQpGenInequality_Type);
        PyTuple_SET_ITEM(PyTasksQpBoundedSpeedConstr_Type.tp_bases, 0, (PyObject *) &PyTasksQpGenInequality_Type);
        Py_INCREF((PyObject *) &PyTasksQpConstraint_Type);
        PyTuple_SET_ITEM(PyTasksQpBoundedSpeedConstr_Type.tp_bases, 1, (PyObject *) &PyTasksQpConstraint_Type);
    if (PyType_Ready(&PyTasksQpBoundedSpeedConstr_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "BoundedSpeedConstr", (PyObject *) &PyTasksQpBoundedSpeedConstr_Type);
    /* Register the 'tasks::qp::ImageConstr' class */
    PyTasksQpImageConstr_Type.tp_base = &PyTasksQpInequality_Type;
    PyTasksQpImageConstr_Type.tp_bases = PyTuple_New(2);
        Py_INCREF((PyObject *) &PyTasksQpInequality_Type);
        PyTuple_SET_ITEM(PyTasksQpImageConstr_Type.tp_bases, 0, (PyObject *) &PyTasksQpInequality_Type);
        Py_INCREF((PyObject *) &PyTasksQpConstraint_Type);
        PyTuple_SET_ITEM(PyTasksQpImageConstr_Type.tp_bases, 1, (PyObject *) &PyTasksQpConstraint_Type);
    if (PyType_Ready(&PyTasksQpImageConstr_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "ImageConstr", (PyObject *) &PyTasksQpImageConstr_Type);
    return m;
}
static PyMethodDef _tasks_functions[] = {
    {NULL, NULL, 0, NULL}
};
/* --- classes --- */


PyTypeObject *_PyEigenVector2d_Type;


PyTypeObject *_PyEigenVector3d_Type;


PyTypeObject *_PyEigenVector6d_Type;


PyTypeObject *_PyEigenMatrix3d_Type;


PyTypeObject *_PyEigenMatrix6d_Type;


PyTypeObject *_PyEigenMatrixXd_Type;


PyTypeObject *_PyEigenVectorXd_Type;


PyTypeObject *_PyEigenQuaterniond_Type;


PyTypeObject *_PySvaMotionVecd_Type;


PyTypeObject *_PySvaForceVecd_Type;


PyTypeObject *_PySvaRBInertiad_Type;


PyTypeObject *_PySvaABInertiad_Type;


PyTypeObject *_PySvaPTransformd_Type;


PyTypeObject *_PyRbdBody_Type;


PyTypeObject *_PyRbdJoint_Type;


PyTypeObject *_PyRbdMultiBody_Type;


PyTypeObject *_PyRbdMultiBodyConfig_Type;


PyTypeObject *_PyRbdJacobian_Type;


PyTypeObject *_PyRbdCoMJacobianDummy_Type;


PyTypeObject *_PyRbdForwardDynamics_Type;


PyTypeObject *_PySchS_Object_Type;


PyTypeObject *_PySchCD_Pair_Type;


static PyObject* _wrap_PyBoostTimerCpu_times__get_wall(PyBoostTimerCpu_times *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "L", self->obj->wall);
    return py_retval;
}
static int _wrap_PyBoostTimerCpu_times__set_wall(PyBoostTimerCpu_times *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "L", &self->obj->wall)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyBoostTimerCpu_times__get_user(PyBoostTimerCpu_times *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "L", self->obj->user);
    return py_retval;
}
static int _wrap_PyBoostTimerCpu_times__set_user(PyBoostTimerCpu_times *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "L", &self->obj->user)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyBoostTimerCpu_times__get_system(PyBoostTimerCpu_times *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "L", self->obj->system);
    return py_retval;
}
static int _wrap_PyBoostTimerCpu_times__set_system(PyBoostTimerCpu_times *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "L", &self->obj->system)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyBoostTimerCpu_times__getsets[] = {
    {
        (char*) "wall", /* attribute name */
        (getter) _wrap_PyBoostTimerCpu_times__get_wall, /* C function to get the attribute */
        (setter) _wrap_PyBoostTimerCpu_times__set_wall, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "user", /* attribute name */
        (getter) _wrap_PyBoostTimerCpu_times__get_user, /* C function to get the attribute */
        (setter) _wrap_PyBoostTimerCpu_times__set_user, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "system", /* attribute name */
        (getter) _wrap_PyBoostTimerCpu_times__get_system, /* C function to get the attribute */
        (setter) _wrap_PyBoostTimerCpu_times__set_system, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyBoostTimerCpu_times__tp_init__0(PyBoostTimerCpu_times *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new boost::timer::cpu_times();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyBoostTimerCpu_times__tp_init__1(PyBoostTimerCpu_times *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyBoostTimerCpu_times *ctor_arg;
    const char *keywords[] = {"ctor_arg", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyBoostTimerCpu_times_Type, &ctor_arg)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new boost::timer::cpu_times(*((PyBoostTimerCpu_times *) ctor_arg)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyBoostTimerCpu_times__tp_init(PyBoostTimerCpu_times *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyBoostTimerCpu_times__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyBoostTimerCpu_times__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyBoostTimerCpu_times__copy__(PyBoostTimerCpu_times *self)
{

    PyBoostTimerCpu_times *py_copy;
    py_copy = PyObject_New(PyBoostTimerCpu_times, &PyBoostTimerCpu_times_Type);
    py_copy->obj = new boost::timer::cpu_times(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return (PyObject*) py_copy;
}

static PyMethodDef PyBoostTimerCpu_times_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyBoostTimerCpu_times__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyBoostTimerCpu_times__tp_dealloc(PyBoostTimerCpu_times *self)
{
        boost::timer::cpu_times *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyBoostTimerCpu_times__tp_richcompare (PyBoostTimerCpu_times *PYBINDGEN_UNUSED(self), PyBoostTimerCpu_times *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyBoostTimerCpu_times_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyBoostTimerCpu_times_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.Cpu_times",            /* tp_name */
    sizeof(PyBoostTimerCpu_times),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyBoostTimerCpu_times__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyBoostTimerCpu_times__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyBoostTimerCpu_times_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyBoostTimerCpu_times__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyBoostTimerCpu_times__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyTasksPositionTask__tp_init(PyTasksPositionTask *self, PyObject *args, PyObject *kwargs)
{
    PyRbdMultiBody *mb;
    const char *bodyName;
    Py_ssize_t bodyName_len;
    std::string bodyName_std;
    PyEigenVector3d *pos;
    PyEigenVector3d *bodyPoint = NULL;
    const char *keywords[] = {"mb", "bodyName", "pos", "bodyPoint", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!s#O!|O!", (char **) keywords, &PyRbdMultiBody_Type, &mb, &bodyName, &bodyName_len, &PyEigenVector3d_Type, &pos, &PyEigenVector3d_Type, &bodyPoint)) {
        return -1;
    }
    bodyName_std = std::string(bodyName, bodyName_len);
    self->obj = new tasks::PositionTask(*((PyRbdMultiBody *) mb)->obj, bodyName_std, *((PyEigenVector3d *) pos)->obj, (bodyPoint ? (*((PyEigenVector3d *) bodyPoint)->obj) : Eigen::Vector3d::Zero()));
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}


PyObject *
_wrap_PyTasksPositionTask_update(PyTasksPositionTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyRbdMultiBody *mb;
    PyRbdMultiBodyConfig *mbc;
    const char *keywords[] = {"mb", "mbc", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyRbdMultiBody_Type, &mb, &PyRbdMultiBodyConfig_Type, &mbc)) {
        return NULL;
    }
    self->obj->update(*((PyRbdMultiBody *) mb)->obj, *((PyRbdMultiBodyConfig *) mbc)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksPositionTask_jac(PyTasksPositionTask *self)
{
    PyObject *py_retval;
    PyEigenMatrixXd *py_MatrixXd;

    Eigen::MatrixXd retval = self->obj->jac();
    py_MatrixXd = PyObject_New(PyEigenMatrixXd, &PyEigenMatrixXd_Type);
    py_MatrixXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MatrixXd->obj = new Eigen::MatrixXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_MatrixXd);
    return py_retval;
}


PyObject *
_wrap_PyTasksPositionTask_jacDot(PyTasksPositionTask *self)
{
    PyObject *py_retval;
    PyEigenMatrixXd *py_MatrixXd;

    Eigen::MatrixXd retval = self->obj->jacDot();
    py_MatrixXd = PyObject_New(PyEigenMatrixXd, &PyEigenMatrixXd_Type);
    py_MatrixXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MatrixXd->obj = new Eigen::MatrixXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_MatrixXd);
    return py_retval;
}


PyObject *
_wrap_PyTasksPositionTask_eval(PyTasksPositionTask *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd retval = self->obj->eval();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}



PyObject *
_wrap_PyTasksPositionTask_position__0(PyTasksPositionTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyEigenVector3d *pos;
    const char *keywords[] = {"pos", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyEigenVector3d_Type, &pos)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->position(*((PyEigenVector3d *) pos)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksPositionTask_position__1(PyTasksPositionTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PyEigenVector3d *py_Vector3d;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    Eigen::Vector3d retval = self->obj->position();
    py_Vector3d = PyObject_New(PyEigenVector3d, &PyEigenVector3d_Type);
    py_Vector3d->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Vector3d->obj = new Eigen::Vector3d(retval);
    py_retval = Py_BuildValue((char *) "N", py_Vector3d);
    return py_retval;
}

PyObject * _wrap_PyTasksPositionTask_position(PyTasksPositionTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksPositionTask_position__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksPositionTask_position__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}



PyObject *
_wrap_PyTasksPositionTask_bodyPoint__0(PyTasksPositionTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyEigenVector3d *point;
    const char *keywords[] = {"point", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyEigenVector3d_Type, &point)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->bodyPoint(*((PyEigenVector3d *) point)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksPositionTask_bodyPoint__1(PyTasksPositionTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PyEigenVector3d *py_Vector3d;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    Eigen::Vector3d retval = self->obj->bodyPoint();
    py_Vector3d = PyObject_New(PyEigenVector3d, &PyEigenVector3d_Type);
    py_Vector3d->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Vector3d->obj = new Eigen::Vector3d(retval);
    py_retval = Py_BuildValue((char *) "N", py_Vector3d);
    return py_retval;
}

PyObject * _wrap_PyTasksPositionTask_bodyPoint(PyTasksPositionTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksPositionTask_bodyPoint__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksPositionTask_bodyPoint__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksPositionTask_updateDot(PyTasksPositionTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyRbdMultiBody *mb;
    PyRbdMultiBodyConfig *mbc;
    const char *keywords[] = {"mb", "mbc", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyRbdMultiBody_Type, &mb, &PyRbdMultiBodyConfig_Type, &mbc)) {
        return NULL;
    }
    self->obj->updateDot(*((PyRbdMultiBody *) mb)->obj, *((PyRbdMultiBodyConfig *) mbc)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyTasksPositionTask_methods[] = {
    {(char *) "update", (PyCFunction) _wrap_PyTasksPositionTask_update, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "jac", (PyCFunction) _wrap_PyTasksPositionTask_jac, METH_NOARGS, NULL },
    {(char *) "jacDot", (PyCFunction) _wrap_PyTasksPositionTask_jacDot, METH_NOARGS, NULL },
    {(char *) "eval", (PyCFunction) _wrap_PyTasksPositionTask_eval, METH_NOARGS, NULL },
    {(char *) "position", (PyCFunction) _wrap_PyTasksPositionTask_position, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "bodyPoint", (PyCFunction) _wrap_PyTasksPositionTask_bodyPoint, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "updateDot", (PyCFunction) _wrap_PyTasksPositionTask_updateDot, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksPositionTask__tp_dealloc(PyTasksPositionTask *self)
{
        tasks::PositionTask *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksPositionTask__tp_richcompare (PyTasksPositionTask *PYBINDGEN_UNUSED(self), PyTasksPositionTask *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksPositionTask_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksPositionTask_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.PositionTask",            /* tp_name */
    sizeof(PyTasksPositionTask),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksPositionTask__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksPositionTask__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksPositionTask_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksPositionTask__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyTasksOrientationTask__tp_init__0(PyTasksOrientationTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyRbdMultiBody *mb;
    const char *bodyName;
    Py_ssize_t bodyName_len;
    std::string bodyName_std;
    PyEigenQuaterniond *ori;
    const char *keywords[] = {"mb", "bodyName", "ori", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!s#O!", (char **) keywords, &PyRbdMultiBody_Type, &mb, &bodyName, &bodyName_len, &PyEigenQuaterniond_Type, &ori)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    bodyName_std = std::string(bodyName, bodyName_len);
    self->obj = new tasks::OrientationTask(*((PyRbdMultiBody *) mb)->obj, bodyName_std, *((PyEigenQuaterniond *) ori)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksOrientationTask__tp_init__1(PyTasksOrientationTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyRbdMultiBody *mb;
    const char *bodyName;
    Py_ssize_t bodyName_len;
    std::string bodyName_std;
    PyEigenMatrix3d *ori;
    const char *keywords[] = {"mb", "bodyName", "ori", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!s#O!", (char **) keywords, &PyRbdMultiBody_Type, &mb, &bodyName, &bodyName_len, &PyEigenMatrix3d_Type, &ori)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    bodyName_std = std::string(bodyName, bodyName_len);
    self->obj = new tasks::OrientationTask(*((PyRbdMultiBody *) mb)->obj, bodyName_std, *((PyEigenMatrix3d *) ori)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyTasksOrientationTask__tp_init(PyTasksOrientationTask *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksOrientationTask__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksOrientationTask__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}



PyObject *
_wrap_PyTasksOrientationTask_orientation__0(PyTasksOrientationTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyEigenMatrix3d *ori;
    const char *keywords[] = {"ori", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyEigenMatrix3d_Type, &ori)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->orientation(*((PyEigenMatrix3d *) ori)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksOrientationTask_orientation__1(PyTasksOrientationTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyEigenQuaterniond *ori;
    const char *keywords[] = {"ori", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyEigenQuaterniond_Type, &ori)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->orientation(*((PyEigenQuaterniond *) ori)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksOrientationTask_orientation__2(PyTasksOrientationTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PyEigenMatrix3d *py_Matrix3d;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    Eigen::Matrix3d retval = self->obj->orientation();
    py_Matrix3d = PyObject_New(PyEigenMatrix3d, &PyEigenMatrix3d_Type);
    py_Matrix3d->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Matrix3d->obj = new Eigen::Matrix3d(retval);
    py_retval = Py_BuildValue((char *) "N", py_Matrix3d);
    return py_retval;
}

PyObject * _wrap_PyTasksOrientationTask_orientation(PyTasksOrientationTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyTasksOrientationTask_orientation__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksOrientationTask_orientation__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyTasksOrientationTask_orientation__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksOrientationTask_update(PyTasksOrientationTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyRbdMultiBody *mb;
    PyRbdMultiBodyConfig *mbc;
    const char *keywords[] = {"mb", "mbc", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyRbdMultiBody_Type, &mb, &PyRbdMultiBodyConfig_Type, &mbc)) {
        return NULL;
    }
    self->obj->update(*((PyRbdMultiBody *) mb)->obj, *((PyRbdMultiBodyConfig *) mbc)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksOrientationTask_jacDot(PyTasksOrientationTask *self)
{
    PyObject *py_retval;
    PyEigenMatrixXd *py_MatrixXd;

    Eigen::MatrixXd retval = self->obj->jacDot();
    py_MatrixXd = PyObject_New(PyEigenMatrixXd, &PyEigenMatrixXd_Type);
    py_MatrixXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MatrixXd->obj = new Eigen::MatrixXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_MatrixXd);
    return py_retval;
}


PyObject *
_wrap_PyTasksOrientationTask_jac(PyTasksOrientationTask *self)
{
    PyObject *py_retval;
    PyEigenMatrixXd *py_MatrixXd;

    Eigen::MatrixXd retval = self->obj->jac();
    py_MatrixXd = PyObject_New(PyEigenMatrixXd, &PyEigenMatrixXd_Type);
    py_MatrixXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MatrixXd->obj = new Eigen::MatrixXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_MatrixXd);
    return py_retval;
}


PyObject *
_wrap_PyTasksOrientationTask_eval(PyTasksOrientationTask *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd retval = self->obj->eval();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}


PyObject *
_wrap_PyTasksOrientationTask_updateDot(PyTasksOrientationTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyRbdMultiBody *mb;
    PyRbdMultiBodyConfig *mbc;
    const char *keywords[] = {"mb", "mbc", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyRbdMultiBody_Type, &mb, &PyRbdMultiBodyConfig_Type, &mbc)) {
        return NULL;
    }
    self->obj->updateDot(*((PyRbdMultiBody *) mb)->obj, *((PyRbdMultiBodyConfig *) mbc)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyTasksOrientationTask_methods[] = {
    {(char *) "orientation", (PyCFunction) _wrap_PyTasksOrientationTask_orientation, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "update", (PyCFunction) _wrap_PyTasksOrientationTask_update, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "jacDot", (PyCFunction) _wrap_PyTasksOrientationTask_jacDot, METH_NOARGS, NULL },
    {(char *) "jac", (PyCFunction) _wrap_PyTasksOrientationTask_jac, METH_NOARGS, NULL },
    {(char *) "eval", (PyCFunction) _wrap_PyTasksOrientationTask_eval, METH_NOARGS, NULL },
    {(char *) "updateDot", (PyCFunction) _wrap_PyTasksOrientationTask_updateDot, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksOrientationTask__tp_dealloc(PyTasksOrientationTask *self)
{
        tasks::OrientationTask *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksOrientationTask__tp_richcompare (PyTasksOrientationTask *PYBINDGEN_UNUSED(self), PyTasksOrientationTask *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksOrientationTask_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksOrientationTask_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.OrientationTask",            /* tp_name */
    sizeof(PyTasksOrientationTask),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksOrientationTask__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksOrientationTask__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksOrientationTask_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksOrientationTask__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyTasksSurfaceOrientationTask__tp_init__0(PyTasksSurfaceOrientationTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyRbdMultiBody *mb;
    const char *bodyName;
    Py_ssize_t bodyName_len;
    std::string bodyName_std;
    PyEigenQuaterniond *ori;
    PySvaPTransformd *X_b_s;
    const char *keywords[] = {"mb", "bodyName", "ori", "X_b_s", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!s#O!O!", (char **) keywords, &PyRbdMultiBody_Type, &mb, &bodyName, &bodyName_len, &PyEigenQuaterniond_Type, &ori, &PySvaPTransformd_Type, &X_b_s)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    bodyName_std = std::string(bodyName, bodyName_len);
    self->obj = new tasks::SurfaceOrientationTask(*((PyRbdMultiBody *) mb)->obj, bodyName_std, *((PyEigenQuaterniond *) ori)->obj, *((PySvaPTransformd *) X_b_s)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksSurfaceOrientationTask__tp_init__1(PyTasksSurfaceOrientationTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyRbdMultiBody *mb;
    const char *bodyName;
    Py_ssize_t bodyName_len;
    std::string bodyName_std;
    PyEigenMatrix3d *ori;
    PySvaPTransformd *X_b_s;
    const char *keywords[] = {"mb", "bodyName", "ori", "X_b_s", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!s#O!O!", (char **) keywords, &PyRbdMultiBody_Type, &mb, &bodyName, &bodyName_len, &PyEigenMatrix3d_Type, &ori, &PySvaPTransformd_Type, &X_b_s)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    bodyName_std = std::string(bodyName, bodyName_len);
    self->obj = new tasks::SurfaceOrientationTask(*((PyRbdMultiBody *) mb)->obj, bodyName_std, *((PyEigenMatrix3d *) ori)->obj, *((PySvaPTransformd *) X_b_s)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyTasksSurfaceOrientationTask__tp_init(PyTasksSurfaceOrientationTask *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksSurfaceOrientationTask__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksSurfaceOrientationTask__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}



PyObject *
_wrap_PyTasksSurfaceOrientationTask_orientation__0(PyTasksSurfaceOrientationTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyEigenMatrix3d *ori;
    const char *keywords[] = {"ori", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyEigenMatrix3d_Type, &ori)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->orientation(*((PyEigenMatrix3d *) ori)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksSurfaceOrientationTask_orientation__1(PyTasksSurfaceOrientationTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyEigenQuaterniond *ori;
    const char *keywords[] = {"ori", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyEigenQuaterniond_Type, &ori)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->orientation(*((PyEigenQuaterniond *) ori)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksSurfaceOrientationTask_orientation__2(PyTasksSurfaceOrientationTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PyEigenMatrix3d *py_Matrix3d;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    Eigen::Matrix3d retval = self->obj->orientation();
    py_Matrix3d = PyObject_New(PyEigenMatrix3d, &PyEigenMatrix3d_Type);
    py_Matrix3d->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Matrix3d->obj = new Eigen::Matrix3d(retval);
    py_retval = Py_BuildValue((char *) "N", py_Matrix3d);
    return py_retval;
}

PyObject * _wrap_PyTasksSurfaceOrientationTask_orientation(PyTasksSurfaceOrientationTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyTasksSurfaceOrientationTask_orientation__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksSurfaceOrientationTask_orientation__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyTasksSurfaceOrientationTask_orientation__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksSurfaceOrientationTask_update(PyTasksSurfaceOrientationTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyRbdMultiBody *mb;
    PyRbdMultiBodyConfig *mbc;
    const char *keywords[] = {"mb", "mbc", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyRbdMultiBody_Type, &mb, &PyRbdMultiBodyConfig_Type, &mbc)) {
        return NULL;
    }
    self->obj->update(*((PyRbdMultiBody *) mb)->obj, *((PyRbdMultiBodyConfig *) mbc)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksSurfaceOrientationTask_jacDot(PyTasksSurfaceOrientationTask *self)
{
    PyObject *py_retval;
    PyEigenMatrixXd *py_MatrixXd;

    Eigen::MatrixXd retval = self->obj->jacDot();
    py_MatrixXd = PyObject_New(PyEigenMatrixXd, &PyEigenMatrixXd_Type);
    py_MatrixXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MatrixXd->obj = new Eigen::MatrixXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_MatrixXd);
    return py_retval;
}


PyObject *
_wrap_PyTasksSurfaceOrientationTask_jac(PyTasksSurfaceOrientationTask *self)
{
    PyObject *py_retval;
    PyEigenMatrixXd *py_MatrixXd;

    Eigen::MatrixXd retval = self->obj->jac();
    py_MatrixXd = PyObject_New(PyEigenMatrixXd, &PyEigenMatrixXd_Type);
    py_MatrixXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MatrixXd->obj = new Eigen::MatrixXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_MatrixXd);
    return py_retval;
}


PyObject *
_wrap_PyTasksSurfaceOrientationTask_eval(PyTasksSurfaceOrientationTask *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd retval = self->obj->eval();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}


PyObject *
_wrap_PyTasksSurfaceOrientationTask_updateDot(PyTasksSurfaceOrientationTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyRbdMultiBody *mb;
    PyRbdMultiBodyConfig *mbc;
    const char *keywords[] = {"mb", "mbc", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyRbdMultiBody_Type, &mb, &PyRbdMultiBodyConfig_Type, &mbc)) {
        return NULL;
    }
    self->obj->updateDot(*((PyRbdMultiBody *) mb)->obj, *((PyRbdMultiBodyConfig *) mbc)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyTasksSurfaceOrientationTask_methods[] = {
    {(char *) "orientation", (PyCFunction) _wrap_PyTasksSurfaceOrientationTask_orientation, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "update", (PyCFunction) _wrap_PyTasksSurfaceOrientationTask_update, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "jacDot", (PyCFunction) _wrap_PyTasksSurfaceOrientationTask_jacDot, METH_NOARGS, NULL },
    {(char *) "jac", (PyCFunction) _wrap_PyTasksSurfaceOrientationTask_jac, METH_NOARGS, NULL },
    {(char *) "eval", (PyCFunction) _wrap_PyTasksSurfaceOrientationTask_eval, METH_NOARGS, NULL },
    {(char *) "updateDot", (PyCFunction) _wrap_PyTasksSurfaceOrientationTask_updateDot, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksSurfaceOrientationTask__tp_dealloc(PyTasksSurfaceOrientationTask *self)
{
        tasks::SurfaceOrientationTask *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksSurfaceOrientationTask__tp_richcompare (PyTasksSurfaceOrientationTask *PYBINDGEN_UNUSED(self), PyTasksSurfaceOrientationTask *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksSurfaceOrientationTask_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksSurfaceOrientationTask_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.SurfaceOrientationTask",            /* tp_name */
    sizeof(PyTasksSurfaceOrientationTask),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksSurfaceOrientationTask__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksSurfaceOrientationTask__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksSurfaceOrientationTask_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksSurfaceOrientationTask__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyTasksGazeTask__tp_init__0(PyTasksGazeTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyRbdMultiBody *mb;
    const char *bodyName;
    Py_ssize_t bodyName_len;
    std::string bodyName_std;
    PyEigenVector2d *point2d;
    double depthEstimate;
    PySvaPTransformd *X_b_gaze;
    PyEigenVector2d *point2d_ref = NULL;
    const char *keywords[] = {"mb", "bodyName", "point2d", "depthEstimate", "X_b_gaze", "point2d_ref", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!s#O!dO!|O!", (char **) keywords, &PyRbdMultiBody_Type, &mb, &bodyName, &bodyName_len, &PyEigenVector2d_Type, &point2d, &depthEstimate, &PySvaPTransformd_Type, &X_b_gaze, &PyEigenVector2d_Type, &point2d_ref)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    bodyName_std = std::string(bodyName, bodyName_len);
    self->obj = new tasks::GazeTask(*((PyRbdMultiBody *) mb)->obj, bodyName_std, *((PyEigenVector2d *) point2d)->obj, depthEstimate, *((PySvaPTransformd *) X_b_gaze)->obj, (point2d_ref ? (*((PyEigenVector2d *) point2d_ref)->obj) : Eigen::Vector2d::Zero()));
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksGazeTask__tp_init__1(PyTasksGazeTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyRbdMultiBody *mb;
    const char *bodyName;
    Py_ssize_t bodyName_len;
    std::string bodyName_std;
    PyEigenVector3d *point3d;
    PySvaPTransformd *X_b_gaze;
    PyEigenVector2d *point2d_ref = NULL;
    const char *keywords[] = {"mb", "bodyName", "point3d", "X_b_gaze", "point2d_ref", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!s#O!O!|O!", (char **) keywords, &PyRbdMultiBody_Type, &mb, &bodyName, &bodyName_len, &PyEigenVector3d_Type, &point3d, &PySvaPTransformd_Type, &X_b_gaze, &PyEigenVector2d_Type, &point2d_ref)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    bodyName_std = std::string(bodyName, bodyName_len);
    self->obj = new tasks::GazeTask(*((PyRbdMultiBody *) mb)->obj, bodyName_std, *((PyEigenVector3d *) point3d)->obj, *((PySvaPTransformd *) X_b_gaze)->obj, (point2d_ref ? (*((PyEigenVector2d *) point2d_ref)->obj) : Eigen::Vector2d::Zero()));
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyTasksGazeTask__tp_init(PyTasksGazeTask *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksGazeTask__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksGazeTask__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyTasksGazeTask_normalAcc(PyTasksGazeTask *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd retval = self->obj->normalAcc();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}


PyObject *
_wrap_PyTasksGazeTask_update(PyTasksGazeTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyRbdMultiBody *mb;
    PyRbdMultiBodyConfig *mbc;
    std::vector<sva::MotionVecd> normalAccB_value;
    const char *keywords[] = {"mb", "mbc", "normalAccB", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O&", (char **) keywords, &PyRbdMultiBody_Type, &mb, &PyRbdMultiBodyConfig_Type, &mbc, _wrap_convert_py2c__std__vector__lt___sva__MotionVecd___gt__, &normalAccB_value)) {
        return NULL;
    }
    self->obj->update(*((PyRbdMultiBody *) mb)->obj, *((PyRbdMultiBodyConfig *) mbc)->obj, normalAccB_value);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksGazeTask_jacDot(PyTasksGazeTask *self)
{
    PyObject *py_retval;
    PyEigenMatrixXd *py_MatrixXd;

    Eigen::MatrixXd retval = self->obj->jacDot();
    py_MatrixXd = PyObject_New(PyEigenMatrixXd, &PyEigenMatrixXd_Type);
    py_MatrixXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MatrixXd->obj = new Eigen::MatrixXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_MatrixXd);
    return py_retval;
}


PyObject *
_wrap_PyTasksGazeTask_eval(PyTasksGazeTask *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd retval = self->obj->eval();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}



PyObject *
_wrap_PyTasksGazeTask_error__0(PyTasksGazeTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyEigenVector2d *point2d;
    PyEigenVector2d *point2d_ref = NULL;
    const char *keywords[] = {"point2d", "point2d_ref", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!|O!", (char **) keywords, &PyEigenVector2d_Type, &point2d, &PyEigenVector2d_Type, &point2d_ref)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->error(*((PyEigenVector2d *) point2d)->obj, (point2d_ref ? (*((PyEigenVector2d *) point2d_ref)->obj) : Eigen::Vector2d::Zero()));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksGazeTask_error__1(PyTasksGazeTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyEigenVector3d *point3d;
    PyEigenVector2d *point2d_ref = NULL;
    const char *keywords[] = {"point3d", "point2d_ref", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!|O!", (char **) keywords, &PyEigenVector3d_Type, &point3d, &PyEigenVector2d_Type, &point2d_ref)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->error(*((PyEigenVector3d *) point3d)->obj, (point2d_ref ? (*((PyEigenVector2d *) point2d_ref)->obj) : Eigen::Vector2d::Zero()));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyTasksGazeTask_error(PyTasksGazeTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksGazeTask_error__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksGazeTask_error__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksGazeTask_speed(PyTasksGazeTask *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd retval = self->obj->speed();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}


PyObject *
_wrap_PyTasksGazeTask_jac(PyTasksGazeTask *self)
{
    PyObject *py_retval;
    PyEigenMatrixXd *py_MatrixXd;

    Eigen::MatrixXd retval = self->obj->jac();
    py_MatrixXd = PyObject_New(PyEigenMatrixXd, &PyEigenMatrixXd_Type);
    py_MatrixXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MatrixXd->obj = new Eigen::MatrixXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_MatrixXd);
    return py_retval;
}

static PyMethodDef PyTasksGazeTask_methods[] = {
    {(char *) "normalAcc", (PyCFunction) _wrap_PyTasksGazeTask_normalAcc, METH_NOARGS, NULL },
    {(char *) "update", (PyCFunction) _wrap_PyTasksGazeTask_update, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "jacDot", (PyCFunction) _wrap_PyTasksGazeTask_jacDot, METH_NOARGS, NULL },
    {(char *) "eval", (PyCFunction) _wrap_PyTasksGazeTask_eval, METH_NOARGS, NULL },
    {(char *) "error", (PyCFunction) _wrap_PyTasksGazeTask_error, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "speed", (PyCFunction) _wrap_PyTasksGazeTask_speed, METH_NOARGS, NULL },
    {(char *) "jac", (PyCFunction) _wrap_PyTasksGazeTask_jac, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksGazeTask__tp_dealloc(PyTasksGazeTask *self)
{
        tasks::GazeTask *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksGazeTask__tp_richcompare (PyTasksGazeTask *PYBINDGEN_UNUSED(self), PyTasksGazeTask *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksGazeTask_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksGazeTask_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.GazeTask",            /* tp_name */
    sizeof(PyTasksGazeTask),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksGazeTask__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksGazeTask__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksGazeTask_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksGazeTask__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyTasksPositionBasedVisServoTask__tp_init(PyTasksPositionBasedVisServoTask *self, PyObject *args, PyObject *kwargs)
{
    PyRbdMultiBody *mb;
    const char *bodyName;
    Py_ssize_t bodyName_len;
    std::string bodyName_std;
    PySvaPTransformd *X_t_s;
    PySvaPTransformd *X_b_s = NULL;
    const char *keywords[] = {"mb", "bodyName", "X_t_s", "X_b_s", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!s#O!|O!", (char **) keywords, &PyRbdMultiBody_Type, &mb, &bodyName, &bodyName_len, &PySvaPTransformd_Type, &X_t_s, &PySvaPTransformd_Type, &X_b_s)) {
        return -1;
    }
    bodyName_std = std::string(bodyName, bodyName_len);
    self->obj = new tasks::PositionBasedVisServoTask(*((PyRbdMultiBody *) mb)->obj, bodyName_std, *((PySvaPTransformd *) X_t_s)->obj, (X_b_s ? (*((PySvaPTransformd *) X_b_s)->obj) : sva::PTransformd::Identity()));
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}


PyObject *
_wrap_PyTasksPositionBasedVisServoTask_normalAcc(PyTasksPositionBasedVisServoTask *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd retval = self->obj->normalAcc();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}


PyObject *
_wrap_PyTasksPositionBasedVisServoTask_update(PyTasksPositionBasedVisServoTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyRbdMultiBody *mb;
    PyRbdMultiBodyConfig *mbc;
    std::vector<sva::MotionVecd> normalAccB_value;
    const char *keywords[] = {"mb", "mbc", "normalAccB", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O&", (char **) keywords, &PyRbdMultiBody_Type, &mb, &PyRbdMultiBodyConfig_Type, &mbc, _wrap_convert_py2c__std__vector__lt___sva__MotionVecd___gt__, &normalAccB_value)) {
        return NULL;
    }
    self->obj->update(*((PyRbdMultiBody *) mb)->obj, *((PyRbdMultiBodyConfig *) mbc)->obj, normalAccB_value);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksPositionBasedVisServoTask_jacDot(PyTasksPositionBasedVisServoTask *self)
{
    PyObject *py_retval;
    PyEigenMatrixXd *py_MatrixXd;

    Eigen::MatrixXd retval = self->obj->jacDot();
    py_MatrixXd = PyObject_New(PyEigenMatrixXd, &PyEigenMatrixXd_Type);
    py_MatrixXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MatrixXd->obj = new Eigen::MatrixXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_MatrixXd);
    return py_retval;
}


PyObject *
_wrap_PyTasksPositionBasedVisServoTask_eval(PyTasksPositionBasedVisServoTask *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd retval = self->obj->eval();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}


PyObject *
_wrap_PyTasksPositionBasedVisServoTask_error(PyTasksPositionBasedVisServoTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PySvaPTransformd *X_t_s;
    const char *keywords[] = {"X_t_s", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PySvaPTransformd_Type, &X_t_s)) {
        return NULL;
    }
    self->obj->error(*((PySvaPTransformd *) X_t_s)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksPositionBasedVisServoTask_speed(PyTasksPositionBasedVisServoTask *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd retval = self->obj->speed();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}


PyObject *
_wrap_PyTasksPositionBasedVisServoTask_jac(PyTasksPositionBasedVisServoTask *self)
{
    PyObject *py_retval;
    PyEigenMatrixXd *py_MatrixXd;

    Eigen::MatrixXd retval = self->obj->jac();
    py_MatrixXd = PyObject_New(PyEigenMatrixXd, &PyEigenMatrixXd_Type);
    py_MatrixXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MatrixXd->obj = new Eigen::MatrixXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_MatrixXd);
    return py_retval;
}

static PyMethodDef PyTasksPositionBasedVisServoTask_methods[] = {
    {(char *) "normalAcc", (PyCFunction) _wrap_PyTasksPositionBasedVisServoTask_normalAcc, METH_NOARGS, NULL },
    {(char *) "update", (PyCFunction) _wrap_PyTasksPositionBasedVisServoTask_update, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "jacDot", (PyCFunction) _wrap_PyTasksPositionBasedVisServoTask_jacDot, METH_NOARGS, NULL },
    {(char *) "eval", (PyCFunction) _wrap_PyTasksPositionBasedVisServoTask_eval, METH_NOARGS, NULL },
    {(char *) "error", (PyCFunction) _wrap_PyTasksPositionBasedVisServoTask_error, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "speed", (PyCFunction) _wrap_PyTasksPositionBasedVisServoTask_speed, METH_NOARGS, NULL },
    {(char *) "jac", (PyCFunction) _wrap_PyTasksPositionBasedVisServoTask_jac, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksPositionBasedVisServoTask__tp_dealloc(PyTasksPositionBasedVisServoTask *self)
{
        tasks::PositionBasedVisServoTask *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksPositionBasedVisServoTask__tp_richcompare (PyTasksPositionBasedVisServoTask *PYBINDGEN_UNUSED(self), PyTasksPositionBasedVisServoTask *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksPositionBasedVisServoTask_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksPositionBasedVisServoTask_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.PositionBasedVisServoTask",            /* tp_name */
    sizeof(PyTasksPositionBasedVisServoTask),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksPositionBasedVisServoTask__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksPositionBasedVisServoTask__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksPositionBasedVisServoTask_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksPositionBasedVisServoTask__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyTasksPostureTask__tp_init(PyTasksPostureTask *self, PyObject *args, PyObject *kwargs)
{
    PyRbdMultiBody *mb;
    std::vector<std::vector<double> > q_value;
    const char *keywords[] = {"mb", "q", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O&", (char **) keywords, &PyRbdMultiBody_Type, &mb, _wrap_convert_py2c__std__vector__lt___std__vector__lt___double___gt_____gt__, &q_value)) {
        return -1;
    }
    self->obj = new tasks::PostureTask(*((PyRbdMultiBody *) mb)->obj, q_value);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}


PyObject *
_wrap_PyTasksPostureTask_update(PyTasksPostureTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyRbdMultiBody *mb;
    PyRbdMultiBodyConfig *mbc;
    const char *keywords[] = {"mb", "mbc", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyRbdMultiBody_Type, &mb, &PyRbdMultiBodyConfig_Type, &mbc)) {
        return NULL;
    }
    self->obj->update(*((PyRbdMultiBody *) mb)->obj, *((PyRbdMultiBodyConfig *) mbc)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksPostureTask_jacDot(PyTasksPostureTask *self)
{
    PyObject *py_retval;
    PyEigenMatrixXd *py_MatrixXd;

    Eigen::MatrixXd retval = self->obj->jacDot();
    py_MatrixXd = PyObject_New(PyEigenMatrixXd, &PyEigenMatrixXd_Type);
    py_MatrixXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MatrixXd->obj = new Eigen::MatrixXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_MatrixXd);
    return py_retval;
}


PyObject *
_wrap_PyTasksPostureTask_jac(PyTasksPostureTask *self)
{
    PyObject *py_retval;
    PyEigenMatrixXd *py_MatrixXd;

    Eigen::MatrixXd retval = self->obj->jac();
    py_MatrixXd = PyObject_New(PyEigenMatrixXd, &PyEigenMatrixXd_Type);
    py_MatrixXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MatrixXd->obj = new Eigen::MatrixXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_MatrixXd);
    return py_retval;
}


PyObject *
_wrap_PyTasksPostureTask_eval(PyTasksPostureTask *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd retval = self->obj->eval();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}


PyObject *
_wrap_PyTasksPostureTask_updateDot(PyTasksPostureTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyRbdMultiBody *mb;
    PyRbdMultiBodyConfig *mbc;
    const char *keywords[] = {"mb", "mbc", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyRbdMultiBody_Type, &mb, &PyRbdMultiBodyConfig_Type, &mbc)) {
        return NULL;
    }
    self->obj->updateDot(*((PyRbdMultiBody *) mb)->obj, *((PyRbdMultiBodyConfig *) mbc)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyTasksPostureTask_posture__0(PyTasksPostureTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    std::vector<std::vector<double> > q_value;
    const char *keywords[] = {"q", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&", (char **) keywords, _wrap_convert_py2c__std__vector__lt___std__vector__lt___double___gt_____gt__, &q_value)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->posture(q_value);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksPostureTask_posture__1(PyTasksPostureTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    std::vector< std::vector< double > > retval;
    const char *keywords[] = {NULL};
    Pystd__vector__lt__std__vector__lt__double__gt_____gt__ *py_std__vector__lt__std__vector__lt__double__gt_____gt__;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->posture();
    py_std__vector__lt__std__vector__lt__double__gt_____gt__ = PyObject_New(Pystd__vector__lt__std__vector__lt__double__gt_____gt__, &Pystd__vector__lt__std__vector__lt__double__gt_____gt___Type);
    py_std__vector__lt__std__vector__lt__double__gt_____gt__->obj = new std::vector<std::vector<double> >(retval);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt__std__vector__lt__double__gt_____gt__);
    return py_retval;
}

PyObject * _wrap_PyTasksPostureTask_posture(PyTasksPostureTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksPostureTask_posture__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksPostureTask_posture__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}

static PyMethodDef PyTasksPostureTask_methods[] = {
    {(char *) "update", (PyCFunction) _wrap_PyTasksPostureTask_update, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "jacDot", (PyCFunction) _wrap_PyTasksPostureTask_jacDot, METH_NOARGS, NULL },
    {(char *) "jac", (PyCFunction) _wrap_PyTasksPostureTask_jac, METH_NOARGS, NULL },
    {(char *) "eval", (PyCFunction) _wrap_PyTasksPostureTask_eval, METH_NOARGS, NULL },
    {(char *) "updateDot", (PyCFunction) _wrap_PyTasksPostureTask_updateDot, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "posture", (PyCFunction) _wrap_PyTasksPostureTask_posture, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksPostureTask__tp_dealloc(PyTasksPostureTask *self)
{
        tasks::PostureTask *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksPostureTask__tp_richcompare (PyTasksPostureTask *PYBINDGEN_UNUSED(self), PyTasksPostureTask *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksPostureTask_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksPostureTask_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.PostureTask",            /* tp_name */
    sizeof(PyTasksPostureTask),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksPostureTask__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksPostureTask__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksPostureTask_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksPostureTask__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyTasksCoMTask__tp_init__0(PyTasksCoMTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyRbdMultiBody *mb;
    PyEigenVector3d *com;
    const char *keywords[] = {"mb", "com", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyRbdMultiBody_Type, &mb, &PyEigenVector3d_Type, &com)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new tasks::CoMTask(*((PyRbdMultiBody *) mb)->obj, *((PyEigenVector3d *) com)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksCoMTask__tp_init__1(PyTasksCoMTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyRbdMultiBody *mb;
    PyEigenVector3d *com;
    std::vector<double> weight_value;
    const char *keywords[] = {"mb", "com", "weight", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O&", (char **) keywords, &PyRbdMultiBody_Type, &mb, &PyEigenVector3d_Type, &com, _wrap_convert_py2c__std__vector__lt___double___gt__, &weight_value)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    try
    {
        self->obj = new tasks::CoMTask(*((PyRbdMultiBody *) mb)->obj, *((PyEigenVector3d *) com)->obj, weight_value);
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    } catch ( ::std::domain_error const &exc) {
        PyErr_SetString((PyObject *) Py___std__domain_error_Type, exc.what());
        return -1;
    }
    return 0;
}

int _wrap_PyTasksCoMTask__tp_init(PyTasksCoMTask *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksCoMTask__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksCoMTask__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyTasksCoMTask_update(PyTasksCoMTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyRbdMultiBody *mb;
    PyRbdMultiBodyConfig *mbc;
    const char *keywords[] = {"mb", "mbc", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyRbdMultiBody_Type, &mb, &PyRbdMultiBodyConfig_Type, &mbc)) {
        return NULL;
    }
    self->obj->update(*((PyRbdMultiBody *) mb)->obj, *((PyRbdMultiBodyConfig *) mbc)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksCoMTask_updateDot(PyTasksCoMTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyRbdMultiBody *mb;
    PyRbdMultiBodyConfig *mbc;
    const char *keywords[] = {"mb", "mbc", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyRbdMultiBody_Type, &mb, &PyRbdMultiBodyConfig_Type, &mbc)) {
        return NULL;
    }
    self->obj->updateDot(*((PyRbdMultiBody *) mb)->obj, *((PyRbdMultiBodyConfig *) mbc)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksCoMTask_jacDot(PyTasksCoMTask *self)
{
    PyObject *py_retval;
    PyEigenMatrixXd *py_MatrixXd;

    Eigen::MatrixXd retval = self->obj->jacDot();
    py_MatrixXd = PyObject_New(PyEigenMatrixXd, &PyEigenMatrixXd_Type);
    py_MatrixXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MatrixXd->obj = new Eigen::MatrixXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_MatrixXd);
    return py_retval;
}


PyObject *
_wrap_PyTasksCoMTask_updateInertialParameters(PyTasksCoMTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyRbdMultiBody *mb;
    const char *keywords[] = {"mb", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyRbdMultiBody_Type, &mb)) {
        return NULL;
    }
    self->obj->updateInertialParameters(*((PyRbdMultiBody *) mb)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksCoMTask_eval(PyTasksCoMTask *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd retval = self->obj->eval();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}



PyObject *
_wrap_PyTasksCoMTask_com__0(PyTasksCoMTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyEigenVector3d *com;
    const char *keywords[] = {"com", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyEigenVector3d_Type, &com)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->com(*((PyEigenVector3d *) com)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksCoMTask_com__1(PyTasksCoMTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PyEigenVector3d *py_Vector3d;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    Eigen::Vector3d const & retval = self->obj->com();
    py_Vector3d = PyObject_New(PyEigenVector3d, &PyEigenVector3d_Type);
    py_Vector3d->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Vector3d->obj = new Eigen::Vector3d(retval);
    py_retval = Py_BuildValue((char *) "N", py_Vector3d);
    return py_retval;
}

PyObject * _wrap_PyTasksCoMTask_com(PyTasksCoMTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksCoMTask_com__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksCoMTask_com__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksCoMTask_jac(PyTasksCoMTask *self)
{
    PyObject *py_retval;
    PyEigenMatrixXd *py_MatrixXd;

    Eigen::MatrixXd retval = self->obj->jac();
    py_MatrixXd = PyObject_New(PyEigenMatrixXd, &PyEigenMatrixXd_Type);
    py_MatrixXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MatrixXd->obj = new Eigen::MatrixXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_MatrixXd);
    return py_retval;
}

static PyMethodDef PyTasksCoMTask_methods[] = {
    {(char *) "update", (PyCFunction) _wrap_PyTasksCoMTask_update, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "updateDot", (PyCFunction) _wrap_PyTasksCoMTask_updateDot, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "jacDot", (PyCFunction) _wrap_PyTasksCoMTask_jacDot, METH_NOARGS, NULL },
    {(char *) "updateInertialParameters", (PyCFunction) _wrap_PyTasksCoMTask_updateInertialParameters, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "eval", (PyCFunction) _wrap_PyTasksCoMTask_eval, METH_NOARGS, NULL },
    {(char *) "com", (PyCFunction) _wrap_PyTasksCoMTask_com, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "jac", (PyCFunction) _wrap_PyTasksCoMTask_jac, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksCoMTask__tp_dealloc(PyTasksCoMTask *self)
{
        tasks::CoMTask *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksCoMTask__tp_richcompare (PyTasksCoMTask *PYBINDGEN_UNUSED(self), PyTasksCoMTask *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksCoMTask_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksCoMTask_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.CoMTask",            /* tp_name */
    sizeof(PyTasksCoMTask),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksCoMTask__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksCoMTask__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksCoMTask_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksCoMTask__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyTasksMultiCoMTask__tp_init(PyTasksMultiCoMTask *self, PyObject *args, PyObject *kwargs)
{
    std::vector<rbd::MultiBody> mbs_value;
    std::vector<int> robotIndexes_value;
    PyEigenVector3d *com;
    const char *keywords[] = {"mbs", "robotIndexes", "com", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, _wrap_convert_py2c__std__vector__lt___int___gt__, &robotIndexes_value, &PyEigenVector3d_Type, &com)) {
        return -1;
    }
    self->obj = new tasks::MultiCoMTask(mbs_value, robotIndexes_value, *((PyEigenVector3d *) com)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}


PyObject *
_wrap_PyTasksMultiCoMTask_robotIndexes(PyTasksMultiCoMTask *self)
{
    PyObject *py_retval;
    std::vector< int > retval;
    Pystd__vector__lt__int__gt__ *py_std__vector__lt__int__gt__;

    retval = self->obj->robotIndexes();
    py_std__vector__lt__int__gt__ = PyObject_New(Pystd__vector__lt__int__gt__, &Pystd__vector__lt__int__gt___Type);
    py_std__vector__lt__int__gt__->obj = new std::vector<int>(retval);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt__int__gt__);
    return py_retval;
}


PyObject *
_wrap_PyTasksMultiCoMTask_normalAcc(PyTasksMultiCoMTask *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd const & retval = self->obj->normalAcc();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}


PyObject *
_wrap_PyTasksMultiCoMTask_speed(PyTasksMultiCoMTask *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd const & retval = self->obj->speed();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}


PyObject *
_wrap_PyTasksMultiCoMTask_update(PyTasksMultiCoMTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mbs_value;
    std::vector<rbd::MultiBodyConfig> mbcs_value;
    const char *keywords[] = {"mbs", "mbcs", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O&", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, _wrap_convert_py2c__std__vector__lt___rbd__MultiBodyConfig___gt__, &mbcs_value)) {
        return NULL;
    }
    self->obj->update(mbs_value, mbcs_value);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksMultiCoMTask_updateInertialParameters(PyTasksMultiCoMTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mbs_value;
    const char *keywords[] = {"mbs", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value)) {
        return NULL;
    }
    self->obj->updateInertialParameters(mbs_value);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksMultiCoMTask_eval(PyTasksMultiCoMTask *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd const & retval = self->obj->eval();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}



PyObject *
_wrap_PyTasksMultiCoMTask_com__0(PyTasksMultiCoMTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyEigenVector3d *com;
    const char *keywords[] = {"com", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyEigenVector3d_Type, &com)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->com(*((PyEigenVector3d *) com)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksMultiCoMTask_com__1(PyTasksMultiCoMTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PyEigenVector3d *py_Vector3d;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    Eigen::Vector3d const & retval = self->obj->com();
    py_Vector3d = PyObject_New(PyEigenVector3d, &PyEigenVector3d_Type);
    py_Vector3d->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Vector3d->obj = new Eigen::Vector3d(retval);
    py_retval = Py_BuildValue((char *) "N", py_Vector3d);
    return py_retval;
}

PyObject * _wrap_PyTasksMultiCoMTask_com(PyTasksMultiCoMTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksMultiCoMTask_com__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksMultiCoMTask_com__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksMultiCoMTask_jac(PyTasksMultiCoMTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int index;
    const char *keywords[] = {"index", NULL};
    PyEigenMatrixXd *py_MatrixXd;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &index)) {
        return NULL;
    }
    Eigen::MatrixXd const & retval = self->obj->jac(index);
    py_MatrixXd = PyObject_New(PyEigenMatrixXd, &PyEigenMatrixXd_Type);
    py_MatrixXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MatrixXd->obj = new Eigen::MatrixXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_MatrixXd);
    return py_retval;
}

static PyMethodDef PyTasksMultiCoMTask_methods[] = {
    {(char *) "robotIndexes", (PyCFunction) _wrap_PyTasksMultiCoMTask_robotIndexes, METH_NOARGS, NULL },
    {(char *) "normalAcc", (PyCFunction) _wrap_PyTasksMultiCoMTask_normalAcc, METH_NOARGS, NULL },
    {(char *) "speed", (PyCFunction) _wrap_PyTasksMultiCoMTask_speed, METH_NOARGS, NULL },
    {(char *) "update", (PyCFunction) _wrap_PyTasksMultiCoMTask_update, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "updateInertialParameters", (PyCFunction) _wrap_PyTasksMultiCoMTask_updateInertialParameters, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "eval", (PyCFunction) _wrap_PyTasksMultiCoMTask_eval, METH_NOARGS, NULL },
    {(char *) "com", (PyCFunction) _wrap_PyTasksMultiCoMTask_com, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "jac", (PyCFunction) _wrap_PyTasksMultiCoMTask_jac, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksMultiCoMTask__tp_dealloc(PyTasksMultiCoMTask *self)
{
        tasks::MultiCoMTask *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksMultiCoMTask__tp_richcompare (PyTasksMultiCoMTask *PYBINDGEN_UNUSED(self), PyTasksMultiCoMTask *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksMultiCoMTask_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksMultiCoMTask_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.MultiCoMTask",            /* tp_name */
    sizeof(PyTasksMultiCoMTask),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksMultiCoMTask__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksMultiCoMTask__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksMultiCoMTask_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksMultiCoMTask__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyTasksMomentumTask__tp_init(PyTasksMomentumTask *self, PyObject *args, PyObject *kwargs)
{
    PyRbdMultiBody *mb;
    PySvaForceVecd *mom;
    const char *keywords[] = {"mb", "mom", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyRbdMultiBody_Type, &mb, &PySvaForceVecd_Type, &mom)) {
        return -1;
    }
    self->obj = new tasks::MomentumTask(*((PyRbdMultiBody *) mb)->obj, *((PySvaForceVecd *) mom)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}


PyObject *
_wrap_PyTasksMomentumTask_jacDot(PyTasksMomentumTask *self)
{
    PyObject *py_retval;
    PyEigenMatrixXd *py_MatrixXd;

    Eigen::MatrixXd retval = self->obj->jacDot();
    py_MatrixXd = PyObject_New(PyEigenMatrixXd, &PyEigenMatrixXd_Type);
    py_MatrixXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MatrixXd->obj = new Eigen::MatrixXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_MatrixXd);
    return py_retval;
}


PyObject *
_wrap_PyTasksMomentumTask_update(PyTasksMomentumTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyRbdMultiBody *mb;
    PyRbdMultiBodyConfig *mbc;
    const char *keywords[] = {"mb", "mbc", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyRbdMultiBody_Type, &mb, &PyRbdMultiBodyConfig_Type, &mbc)) {
        return NULL;
    }
    self->obj->update(*((PyRbdMultiBody *) mb)->obj, *((PyRbdMultiBodyConfig *) mbc)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksMomentumTask_eval(PyTasksMomentumTask *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd retval = self->obj->eval();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}


PyObject *
_wrap_PyTasksMomentumTask_updateDot(PyTasksMomentumTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyRbdMultiBody *mb;
    PyRbdMultiBodyConfig *mbc;
    const char *keywords[] = {"mb", "mbc", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyRbdMultiBody_Type, &mb, &PyRbdMultiBodyConfig_Type, &mbc)) {
        return NULL;
    }
    self->obj->updateDot(*((PyRbdMultiBody *) mb)->obj, *((PyRbdMultiBodyConfig *) mbc)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksMomentumTask_jac(PyTasksMomentumTask *self)
{
    PyObject *py_retval;
    PyEigenMatrixXd *py_MatrixXd;

    Eigen::MatrixXd retval = self->obj->jac();
    py_MatrixXd = PyObject_New(PyEigenMatrixXd, &PyEigenMatrixXd_Type);
    py_MatrixXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MatrixXd->obj = new Eigen::MatrixXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_MatrixXd);
    return py_retval;
}



PyObject *
_wrap_PyTasksMomentumTask_momentum__0(PyTasksMomentumTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PySvaForceVecd *mom;
    const char *keywords[] = {"mom", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PySvaForceVecd_Type, &mom)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->momentum(*((PySvaForceVecd *) mom)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksMomentumTask_momentum__1(PyTasksMomentumTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PySvaForceVecd *py_ForceVecd;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    sva::ForceVecd const & retval = self->obj->momentum();
    py_ForceVecd = PyObject_New(PySvaForceVecd, &PySvaForceVecd_Type);
    py_ForceVecd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_ForceVecd->obj = new sva::ForceVecd(retval);
    py_retval = Py_BuildValue((char *) "N", py_ForceVecd);
    return py_retval;
}

PyObject * _wrap_PyTasksMomentumTask_momentum(PyTasksMomentumTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksMomentumTask_momentum__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksMomentumTask_momentum__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}

static PyMethodDef PyTasksMomentumTask_methods[] = {
    {(char *) "jacDot", (PyCFunction) _wrap_PyTasksMomentumTask_jacDot, METH_NOARGS, NULL },
    {(char *) "update", (PyCFunction) _wrap_PyTasksMomentumTask_update, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "eval", (PyCFunction) _wrap_PyTasksMomentumTask_eval, METH_NOARGS, NULL },
    {(char *) "updateDot", (PyCFunction) _wrap_PyTasksMomentumTask_updateDot, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "jac", (PyCFunction) _wrap_PyTasksMomentumTask_jac, METH_NOARGS, NULL },
    {(char *) "momentum", (PyCFunction) _wrap_PyTasksMomentumTask_momentum, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksMomentumTask__tp_dealloc(PyTasksMomentumTask *self)
{
        tasks::MomentumTask *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksMomentumTask__tp_richcompare (PyTasksMomentumTask *PYBINDGEN_UNUSED(self), PyTasksMomentumTask *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksMomentumTask_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksMomentumTask_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.MomentumTask",            /* tp_name */
    sizeof(PyTasksMomentumTask),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksMomentumTask__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksMomentumTask__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksMomentumTask_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksMomentumTask__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyTasksLinVelocityTask__tp_init(PyTasksLinVelocityTask *self, PyObject *args, PyObject *kwargs)
{
    PyRbdMultiBody *mb;
    const char *bodyName;
    Py_ssize_t bodyName_len;
    std::string bodyName_std;
    PyEigenVector3d *pos;
    PyEigenVector3d *bodyPoint = NULL;
    const char *keywords[] = {"mb", "bodyName", "pos", "bodyPoint", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!s#O!|O!", (char **) keywords, &PyRbdMultiBody_Type, &mb, &bodyName, &bodyName_len, &PyEigenVector3d_Type, &pos, &PyEigenVector3d_Type, &bodyPoint)) {
        return -1;
    }
    bodyName_std = std::string(bodyName, bodyName_len);
    self->obj = new tasks::LinVelocityTask(*((PyRbdMultiBody *) mb)->obj, bodyName_std, *((PyEigenVector3d *) pos)->obj, (bodyPoint ? (*((PyEigenVector3d *) bodyPoint)->obj) : Eigen::Vector3d::Zero()));
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}


PyObject *
_wrap_PyTasksLinVelocityTask_update(PyTasksLinVelocityTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyRbdMultiBody *mb;
    PyRbdMultiBodyConfig *mbc;
    const char *keywords[] = {"mb", "mbc", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyRbdMultiBody_Type, &mb, &PyRbdMultiBodyConfig_Type, &mbc)) {
        return NULL;
    }
    self->obj->update(*((PyRbdMultiBody *) mb)->obj, *((PyRbdMultiBodyConfig *) mbc)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksLinVelocityTask_jac(PyTasksLinVelocityTask *self)
{
    PyObject *py_retval;
    PyEigenMatrixXd *py_MatrixXd;

    Eigen::MatrixXd retval = self->obj->jac();
    py_MatrixXd = PyObject_New(PyEigenMatrixXd, &PyEigenMatrixXd_Type);
    py_MatrixXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MatrixXd->obj = new Eigen::MatrixXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_MatrixXd);
    return py_retval;
}


PyObject *
_wrap_PyTasksLinVelocityTask_jacDot(PyTasksLinVelocityTask *self)
{
    PyObject *py_retval;
    PyEigenMatrixXd *py_MatrixXd;

    Eigen::MatrixXd retval = self->obj->jacDot();
    py_MatrixXd = PyObject_New(PyEigenMatrixXd, &PyEigenMatrixXd_Type);
    py_MatrixXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MatrixXd->obj = new Eigen::MatrixXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_MatrixXd);
    return py_retval;
}


PyObject *
_wrap_PyTasksLinVelocityTask_eval(PyTasksLinVelocityTask *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd retval = self->obj->eval();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}



PyObject *
_wrap_PyTasksLinVelocityTask_velocity__0(PyTasksLinVelocityTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyEigenVector3d *pos;
    const char *keywords[] = {"pos", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyEigenVector3d_Type, &pos)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->velocity(*((PyEigenVector3d *) pos)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksLinVelocityTask_velocity__1(PyTasksLinVelocityTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PyEigenVector3d *py_Vector3d;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    Eigen::Vector3d retval = self->obj->velocity();
    py_Vector3d = PyObject_New(PyEigenVector3d, &PyEigenVector3d_Type);
    py_Vector3d->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Vector3d->obj = new Eigen::Vector3d(retval);
    py_retval = Py_BuildValue((char *) "N", py_Vector3d);
    return py_retval;
}

PyObject * _wrap_PyTasksLinVelocityTask_velocity(PyTasksLinVelocityTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksLinVelocityTask_velocity__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksLinVelocityTask_velocity__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}



PyObject *
_wrap_PyTasksLinVelocityTask_bodyPoint__0(PyTasksLinVelocityTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyEigenVector3d *point;
    const char *keywords[] = {"point", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyEigenVector3d_Type, &point)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->bodyPoint(*((PyEigenVector3d *) point)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksLinVelocityTask_bodyPoint__1(PyTasksLinVelocityTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PyEigenVector3d *py_Vector3d;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    Eigen::Vector3d retval = self->obj->bodyPoint();
    py_Vector3d = PyObject_New(PyEigenVector3d, &PyEigenVector3d_Type);
    py_Vector3d->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Vector3d->obj = new Eigen::Vector3d(retval);
    py_retval = Py_BuildValue((char *) "N", py_Vector3d);
    return py_retval;
}

PyObject * _wrap_PyTasksLinVelocityTask_bodyPoint(PyTasksLinVelocityTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksLinVelocityTask_bodyPoint__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksLinVelocityTask_bodyPoint__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksLinVelocityTask_updateDot(PyTasksLinVelocityTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyRbdMultiBody *mb;
    PyRbdMultiBodyConfig *mbc;
    const char *keywords[] = {"mb", "mbc", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyRbdMultiBody_Type, &mb, &PyRbdMultiBodyConfig_Type, &mbc)) {
        return NULL;
    }
    self->obj->updateDot(*((PyRbdMultiBody *) mb)->obj, *((PyRbdMultiBodyConfig *) mbc)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyTasksLinVelocityTask_methods[] = {
    {(char *) "update", (PyCFunction) _wrap_PyTasksLinVelocityTask_update, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "jac", (PyCFunction) _wrap_PyTasksLinVelocityTask_jac, METH_NOARGS, NULL },
    {(char *) "jacDot", (PyCFunction) _wrap_PyTasksLinVelocityTask_jacDot, METH_NOARGS, NULL },
    {(char *) "eval", (PyCFunction) _wrap_PyTasksLinVelocityTask_eval, METH_NOARGS, NULL },
    {(char *) "velocity", (PyCFunction) _wrap_PyTasksLinVelocityTask_velocity, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "bodyPoint", (PyCFunction) _wrap_PyTasksLinVelocityTask_bodyPoint, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "updateDot", (PyCFunction) _wrap_PyTasksLinVelocityTask_updateDot, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksLinVelocityTask__tp_dealloc(PyTasksLinVelocityTask *self)
{
        tasks::LinVelocityTask *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksLinVelocityTask__tp_richcompare (PyTasksLinVelocityTask *PYBINDGEN_UNUSED(self), PyTasksLinVelocityTask *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksLinVelocityTask_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksLinVelocityTask_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.LinVelocityTask",            /* tp_name */
    sizeof(PyTasksLinVelocityTask),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksLinVelocityTask__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksLinVelocityTask__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksLinVelocityTask_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksLinVelocityTask__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyTasksOrientationTrackingTask__tp_init(PyTasksOrientationTrackingTask *self, PyObject *args, PyObject *kwargs)
{
    PyRbdMultiBody *mb;
    const char *bodyName;
    Py_ssize_t bodyName_len;
    std::string bodyName_std;
    PyEigenVector3d *bodyPoint;
    PyEigenVector3d *bodyAxis;
    std::vector<std::string> trackingJointName_value;
    PyEigenVector3d *trackedPoint;
    const char *keywords[] = {"mb", "bodyName", "bodyPoint", "bodyAxis", "trackingJointName", "trackedPoint", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!s#O!O!O&O!", (char **) keywords, &PyRbdMultiBody_Type, &mb, &bodyName, &bodyName_len, &PyEigenVector3d_Type, &bodyPoint, &PyEigenVector3d_Type, &bodyAxis, _wrap_convert_py2c__std__vector__lt___std__string___gt__, &trackingJointName_value, &PyEigenVector3d_Type, &trackedPoint)) {
        return -1;
    }
    bodyName_std = std::string(bodyName, bodyName_len);
    self->obj = new tasks::OrientationTrackingTask(*((PyRbdMultiBody *) mb)->obj, bodyName_std, *((PyEigenVector3d *) bodyPoint)->obj, *((PyEigenVector3d *) bodyAxis)->obj, trackingJointName_value, *((PyEigenVector3d *) trackedPoint)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}



PyObject *
_wrap_PyTasksOrientationTrackingTask_bodyAxis__0(PyTasksOrientationTrackingTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyEigenVector3d *axis;
    const char *keywords[] = {"axis", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyEigenVector3d_Type, &axis)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->bodyAxis(*((PyEigenVector3d *) axis)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksOrientationTrackingTask_bodyAxis__1(PyTasksOrientationTrackingTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PyEigenVector3d *py_Vector3d;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    Eigen::Vector3d retval = self->obj->bodyAxis();
    py_Vector3d = PyObject_New(PyEigenVector3d, &PyEigenVector3d_Type);
    py_Vector3d->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Vector3d->obj = new Eigen::Vector3d(retval);
    py_retval = Py_BuildValue((char *) "N", py_Vector3d);
    return py_retval;
}

PyObject * _wrap_PyTasksOrientationTrackingTask_bodyAxis(PyTasksOrientationTrackingTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksOrientationTrackingTask_bodyAxis__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksOrientationTrackingTask_bodyAxis__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksOrientationTrackingTask_jac(PyTasksOrientationTrackingTask *self)
{
    PyObject *py_retval;
    PyEigenMatrixXd *py_MatrixXd;

    Eigen::MatrixXd retval = self->obj->jac();
    py_MatrixXd = PyObject_New(PyEigenMatrixXd, &PyEigenMatrixXd_Type);
    py_MatrixXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MatrixXd->obj = new Eigen::MatrixXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_MatrixXd);
    return py_retval;
}


PyObject *
_wrap_PyTasksOrientationTrackingTask_update(PyTasksOrientationTrackingTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyRbdMultiBody *mb;
    PyRbdMultiBodyConfig *mbc;
    const char *keywords[] = {"mb", "mbc", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyRbdMultiBody_Type, &mb, &PyRbdMultiBodyConfig_Type, &mbc)) {
        return NULL;
    }
    self->obj->update(*((PyRbdMultiBody *) mb)->obj, *((PyRbdMultiBodyConfig *) mbc)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyTasksOrientationTrackingTask_bodyPoint__0(PyTasksOrientationTrackingTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyEigenVector3d *tPoint;
    const char *keywords[] = {"tPoint", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyEigenVector3d_Type, &tPoint)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->bodyPoint(*((PyEigenVector3d *) tPoint)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksOrientationTrackingTask_bodyPoint__1(PyTasksOrientationTrackingTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PyEigenVector3d *py_Vector3d;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    Eigen::Vector3d retval = self->obj->bodyPoint();
    py_Vector3d = PyObject_New(PyEigenVector3d, &PyEigenVector3d_Type);
    py_Vector3d->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Vector3d->obj = new Eigen::Vector3d(retval);
    py_retval = Py_BuildValue((char *) "N", py_Vector3d);
    return py_retval;
}

PyObject * _wrap_PyTasksOrientationTrackingTask_bodyPoint(PyTasksOrientationTrackingTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksOrientationTrackingTask_bodyPoint__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksOrientationTrackingTask_bodyPoint__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksOrientationTrackingTask_jacDot(PyTasksOrientationTrackingTask *self)
{
    PyObject *py_retval;
    PyEigenMatrixXd *py_MatrixXd;

    Eigen::MatrixXd retval = self->obj->jacDot();
    py_MatrixXd = PyObject_New(PyEigenMatrixXd, &PyEigenMatrixXd_Type);
    py_MatrixXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MatrixXd->obj = new Eigen::MatrixXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_MatrixXd);
    return py_retval;
}



PyObject *
_wrap_PyTasksOrientationTrackingTask_trackedPoint__0(PyTasksOrientationTrackingTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyEigenVector3d *bPoint;
    const char *keywords[] = {"bPoint", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyEigenVector3d_Type, &bPoint)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->trackedPoint(*((PyEigenVector3d *) bPoint)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksOrientationTrackingTask_trackedPoint__1(PyTasksOrientationTrackingTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PyEigenVector3d *py_Vector3d;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    Eigen::Vector3d retval = self->obj->trackedPoint();
    py_Vector3d = PyObject_New(PyEigenVector3d, &PyEigenVector3d_Type);
    py_Vector3d->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Vector3d->obj = new Eigen::Vector3d(retval);
    py_retval = Py_BuildValue((char *) "N", py_Vector3d);
    return py_retval;
}

PyObject * _wrap_PyTasksOrientationTrackingTask_trackedPoint(PyTasksOrientationTrackingTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksOrientationTrackingTask_trackedPoint__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksOrientationTrackingTask_trackedPoint__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksOrientationTrackingTask_eval(PyTasksOrientationTrackingTask *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd retval = self->obj->eval();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}


PyObject *
_wrap_PyTasksOrientationTrackingTask_updateDot(PyTasksOrientationTrackingTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyRbdMultiBody *mb;
    PyRbdMultiBodyConfig *mbc;
    const char *keywords[] = {"mb", "mbc", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyRbdMultiBody_Type, &mb, &PyRbdMultiBodyConfig_Type, &mbc)) {
        return NULL;
    }
    self->obj->updateDot(*((PyRbdMultiBody *) mb)->obj, *((PyRbdMultiBodyConfig *) mbc)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyTasksOrientationTrackingTask_methods[] = {
    {(char *) "bodyAxis", (PyCFunction) _wrap_PyTasksOrientationTrackingTask_bodyAxis, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "jac", (PyCFunction) _wrap_PyTasksOrientationTrackingTask_jac, METH_NOARGS, NULL },
    {(char *) "update", (PyCFunction) _wrap_PyTasksOrientationTrackingTask_update, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "bodyPoint", (PyCFunction) _wrap_PyTasksOrientationTrackingTask_bodyPoint, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "jacDot", (PyCFunction) _wrap_PyTasksOrientationTrackingTask_jacDot, METH_NOARGS, NULL },
    {(char *) "trackedPoint", (PyCFunction) _wrap_PyTasksOrientationTrackingTask_trackedPoint, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "eval", (PyCFunction) _wrap_PyTasksOrientationTrackingTask_eval, METH_NOARGS, NULL },
    {(char *) "updateDot", (PyCFunction) _wrap_PyTasksOrientationTrackingTask_updateDot, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksOrientationTrackingTask__tp_dealloc(PyTasksOrientationTrackingTask *self)
{
        tasks::OrientationTrackingTask *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksOrientationTrackingTask__tp_richcompare (PyTasksOrientationTrackingTask *PYBINDGEN_UNUSED(self), PyTasksOrientationTrackingTask *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksOrientationTrackingTask_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksOrientationTrackingTask_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.OrientationTrackingTask",            /* tp_name */
    sizeof(PyTasksOrientationTrackingTask),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksOrientationTrackingTask__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksOrientationTrackingTask__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksOrientationTrackingTask_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksOrientationTrackingTask__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyTasksMultiRobotTransformTask__tp_init(PyTasksMultiRobotTransformTask *self, PyObject *args, PyObject *kwargs)
{
    std::vector<rbd::MultiBody> mbs_value;
    int r1Index;
    int r2Index;
    const char *r1BodyName;
    Py_ssize_t r1BodyName_len;
    std::string r1BodyName_std;
    const char *r2BodyName;
    Py_ssize_t r2BodyName_len;
    std::string r2BodyName_std;
    PySvaPTransformd *X_r1b_r1s;
    PySvaPTransformd *X_r2b_r2s;
    const char *keywords[] = {"mbs", "r1Index", "r2Index", "r1BodyName", "r2BodyName", "X_r1b_r1s", "X_r2b_r2s", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&iis#s#O!O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, &r1Index, &r2Index, &r1BodyName, &r1BodyName_len, &r2BodyName, &r2BodyName_len, &PySvaPTransformd_Type, &X_r1b_r1s, &PySvaPTransformd_Type, &X_r2b_r2s)) {
        return -1;
    }
    r1BodyName_std = std::string(r1BodyName, r1BodyName_len);
    r2BodyName_std = std::string(r2BodyName, r2BodyName_len);
    self->obj = new tasks::MultiRobotTransformTask(mbs_value, r1Index, r2Index, r1BodyName_std, r2BodyName_std, *((PySvaPTransformd *) X_r1b_r1s)->obj, *((PySvaPTransformd *) X_r2b_r2s)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}


PyObject *
_wrap_PyTasksMultiRobotTransformTask_normalAcc(PyTasksMultiRobotTransformTask *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd const & retval = self->obj->normalAcc();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}



PyObject *
_wrap_PyTasksMultiRobotTransformTask_X_r1b_r1s__0(PyTasksMultiRobotTransformTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PySvaPTransformd *X_r1b_r1s;
    const char *keywords[] = {"X_r1b_r1s", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PySvaPTransformd_Type, &X_r1b_r1s)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->X_r1b_r1s(*((PySvaPTransformd *) X_r1b_r1s)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksMultiRobotTransformTask_X_r1b_r1s__1(PyTasksMultiRobotTransformTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PySvaPTransformd *py_PTransformd;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    sva::PTransformd retval = self->obj->X_r1b_r1s();
    py_PTransformd = PyObject_New(PySvaPTransformd, &PySvaPTransformd_Type);
    py_PTransformd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_PTransformd->obj = new sva::PTransformd(retval);
    py_retval = Py_BuildValue((char *) "N", py_PTransformd);
    return py_retval;
}

PyObject * _wrap_PyTasksMultiRobotTransformTask_X_r1b_r1s(PyTasksMultiRobotTransformTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksMultiRobotTransformTask_X_r1b_r1s__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksMultiRobotTransformTask_X_r1b_r1s__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksMultiRobotTransformTask_update(PyTasksMultiRobotTransformTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody> mbs_value;
    std::vector<rbd::MultiBodyConfig> mbcs_value;
    std::vector<std::vector<sva::MotionVecd> > normalAccB_value;
    const char *keywords[] = {"mbs", "mbcs", "normalAccB", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O&O&", (char **) keywords, _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__, &mbs_value, _wrap_convert_py2c__std__vector__lt___rbd__MultiBodyConfig___gt__, &mbcs_value, _wrap_convert_py2c__std__vector__lt___std__vector__lt___sva__MotionVecd___gt_____gt__, &normalAccB_value)) {
        return NULL;
    }
    self->obj->update(mbs_value, mbcs_value, normalAccB_value);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksMultiRobotTransformTask_r1Index(PyTasksMultiRobotTransformTask *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->r1Index();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyTasksMultiRobotTransformTask_r2Index(PyTasksMultiRobotTransformTask *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->r2Index();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyTasksMultiRobotTransformTask_eval(PyTasksMultiRobotTransformTask *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd const & retval = self->obj->eval();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}



PyObject *
_wrap_PyTasksMultiRobotTransformTask_X_r2b_r2s__0(PyTasksMultiRobotTransformTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PySvaPTransformd *X_r2b_r2s;
    const char *keywords[] = {"X_r2b_r2s", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PySvaPTransformd_Type, &X_r2b_r2s)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->X_r2b_r2s(*((PySvaPTransformd *) X_r2b_r2s)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksMultiRobotTransformTask_X_r2b_r2s__1(PyTasksMultiRobotTransformTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PySvaPTransformd *py_PTransformd;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    sva::PTransformd retval = self->obj->X_r2b_r2s();
    py_PTransformd = PyObject_New(PySvaPTransformd, &PySvaPTransformd_Type);
    py_PTransformd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_PTransformd->obj = new sva::PTransformd(retval);
    py_retval = Py_BuildValue((char *) "N", py_PTransformd);
    return py_retval;
}

PyObject * _wrap_PyTasksMultiRobotTransformTask_X_r2b_r2s(PyTasksMultiRobotTransformTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksMultiRobotTransformTask_X_r2b_r2s__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksMultiRobotTransformTask_X_r2b_r2s__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksMultiRobotTransformTask_speed(PyTasksMultiRobotTransformTask *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd const & retval = self->obj->speed();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}


PyObject *
_wrap_PyTasksMultiRobotTransformTask_jac(PyTasksMultiRobotTransformTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int index;
    const char *keywords[] = {"index", NULL};
    PyEigenMatrixXd *py_MatrixXd;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &index)) {
        return NULL;
    }
    Eigen::MatrixXd const & retval = self->obj->jac(index);
    py_MatrixXd = PyObject_New(PyEigenMatrixXd, &PyEigenMatrixXd_Type);
    py_MatrixXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MatrixXd->obj = new Eigen::MatrixXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_MatrixXd);
    return py_retval;
}

static PyMethodDef PyTasksMultiRobotTransformTask_methods[] = {
    {(char *) "normalAcc", (PyCFunction) _wrap_PyTasksMultiRobotTransformTask_normalAcc, METH_NOARGS, NULL },
    {(char *) "X_r1b_r1s", (PyCFunction) _wrap_PyTasksMultiRobotTransformTask_X_r1b_r1s, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "update", (PyCFunction) _wrap_PyTasksMultiRobotTransformTask_update, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "r1Index", (PyCFunction) _wrap_PyTasksMultiRobotTransformTask_r1Index, METH_NOARGS, NULL },
    {(char *) "r2Index", (PyCFunction) _wrap_PyTasksMultiRobotTransformTask_r2Index, METH_NOARGS, NULL },
    {(char *) "eval", (PyCFunction) _wrap_PyTasksMultiRobotTransformTask_eval, METH_NOARGS, NULL },
    {(char *) "X_r2b_r2s", (PyCFunction) _wrap_PyTasksMultiRobotTransformTask_X_r2b_r2s, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "speed", (PyCFunction) _wrap_PyTasksMultiRobotTransformTask_speed, METH_NOARGS, NULL },
    {(char *) "jac", (PyCFunction) _wrap_PyTasksMultiRobotTransformTask_jac, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksMultiRobotTransformTask__tp_dealloc(PyTasksMultiRobotTransformTask *self)
{
        tasks::MultiRobotTransformTask *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksMultiRobotTransformTask__tp_richcompare (PyTasksMultiRobotTransformTask *PYBINDGEN_UNUSED(self), PyTasksMultiRobotTransformTask *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksMultiRobotTransformTask_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksMultiRobotTransformTask_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.MultiRobotTransformTask",            /* tp_name */
    sizeof(PyTasksMultiRobotTransformTask),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksMultiRobotTransformTask__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksMultiRobotTransformTask__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksMultiRobotTransformTask_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksMultiRobotTransformTask__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyTasksTransformTask__tp_init(PyTasksTransformTask *self, PyObject *args, PyObject *kwargs)
{
    PyRbdMultiBody *mb;
    const char *bodyName;
    Py_ssize_t bodyName_len;
    std::string bodyName_std;
    PySvaPTransformd *X_0_t;
    PySvaPTransformd *X_b_p = NULL;
    PyEigenMatrix3d *E_0_c = NULL;
    const char *keywords[] = {"mb", "bodyName", "X_0_t", "X_b_p", "E_0_c", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!s#O!|O!O!", (char **) keywords, &PyRbdMultiBody_Type, &mb, &bodyName, &bodyName_len, &PySvaPTransformd_Type, &X_0_t, &PySvaPTransformd_Type, &X_b_p, &PyEigenMatrix3d_Type, &E_0_c)) {
        return -1;
    }
    bodyName_std = std::string(bodyName, bodyName_len);
    self->obj = new tasks::TransformTask(*((PyRbdMultiBody *) mb)->obj, bodyName_std, *((PySvaPTransformd *) X_0_t)->obj, (X_b_p ? (*((PySvaPTransformd *) X_b_p)->obj) : sva::PTransformd::Identity()), (E_0_c ? (*((PyEigenMatrix3d *) E_0_c)->obj) : Eigen::Matrix3d::Identity()));
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}



PyObject *
_wrap_PyTasksTransformTask_target__0(PyTasksTransformTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PySvaPTransformd *X_0_t;
    const char *keywords[] = {"X_0_t", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PySvaPTransformd_Type, &X_0_t)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->target(*((PySvaPTransformd *) X_0_t)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksTransformTask_target__1(PyTasksTransformTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PySvaPTransformd *py_PTransformd;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    sva::PTransformd retval = self->obj->target();
    py_PTransformd = PyObject_New(PySvaPTransformd, &PySvaPTransformd_Type);
    py_PTransformd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_PTransformd->obj = new sva::PTransformd(retval);
    py_retval = Py_BuildValue((char *) "N", py_PTransformd);
    return py_retval;
}

PyObject * _wrap_PyTasksTransformTask_target(PyTasksTransformTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksTransformTask_target__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksTransformTask_target__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}



PyObject *
_wrap_PyTasksTransformTask_X_b_p__0(PyTasksTransformTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PySvaPTransformd *X_b_p;
    const char *keywords[] = {"X_b_p", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PySvaPTransformd_Type, &X_b_p)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->X_b_p(*((PySvaPTransformd *) X_b_p)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksTransformTask_X_b_p__1(PyTasksTransformTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PySvaPTransformd *py_PTransformd;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    sva::PTransformd retval = self->obj->X_b_p();
    py_PTransformd = PyObject_New(PySvaPTransformd, &PySvaPTransformd_Type);
    py_PTransformd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_PTransformd->obj = new sva::PTransformd(retval);
    py_retval = Py_BuildValue((char *) "N", py_PTransformd);
    return py_retval;
}

PyObject * _wrap_PyTasksTransformTask_X_b_p(PyTasksTransformTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksTransformTask_X_b_p__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksTransformTask_X_b_p__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksTransformTask_update(PyTasksTransformTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyRbdMultiBody *mb;
    PyRbdMultiBodyConfig *mbc;
    std::vector<sva::MotionVecd> mbcs_value;
    const char *keywords[] = {"mb", "mbc", "mbcs", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O&", (char **) keywords, &PyRbdMultiBody_Type, &mb, &PyRbdMultiBodyConfig_Type, &mbc, _wrap_convert_py2c__std__vector__lt___sva__MotionVecd___gt__, &mbcs_value)) {
        return NULL;
    }
    self->obj->update(*((PyRbdMultiBody *) mb)->obj, *((PyRbdMultiBodyConfig *) mbc)->obj, mbcs_value);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksTransformTask_eval(PyTasksTransformTask *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd const & retval = self->obj->eval();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}



PyObject *
_wrap_PyTasksTransformTask_E_0_c__0(PyTasksTransformTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyEigenMatrix3d *X_0_t;
    const char *keywords[] = {"X_0_t", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyEigenMatrix3d_Type, &X_0_t)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->E_0_c(*((PyEigenMatrix3d *) X_0_t)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksTransformTask_E_0_c__1(PyTasksTransformTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PyEigenMatrix3d *py_Matrix3d;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    Eigen::Matrix3d retval = self->obj->E_0_c();
    py_Matrix3d = PyObject_New(PyEigenMatrix3d, &PyEigenMatrix3d_Type);
    py_Matrix3d->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Matrix3d->obj = new Eigen::Matrix3d(retval);
    py_retval = Py_BuildValue((char *) "N", py_Matrix3d);
    return py_retval;
}

PyObject * _wrap_PyTasksTransformTask_E_0_c(PyTasksTransformTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksTransformTask_E_0_c__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksTransformTask_E_0_c__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksTransformTask_speed(PyTasksTransformTask *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd const & retval = self->obj->speed();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}


PyObject *
_wrap_PyTasksTransformTask_jac(PyTasksTransformTask *self)
{
    PyObject *py_retval;
    PyEigenMatrixXd *py_MatrixXd;

    Eigen::MatrixXd const & retval = self->obj->jac();
    py_MatrixXd = PyObject_New(PyEigenMatrixXd, &PyEigenMatrixXd_Type);
    py_MatrixXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MatrixXd->obj = new Eigen::MatrixXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_MatrixXd);
    return py_retval;
}


PyObject *
_wrap_PyTasksTransformTask_normalAcc(PyTasksTransformTask *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd const & retval = self->obj->normalAcc();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}

static PyMethodDef PyTasksTransformTask_methods[] = {
    {(char *) "target", (PyCFunction) _wrap_PyTasksTransformTask_target, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "X_b_p", (PyCFunction) _wrap_PyTasksTransformTask_X_b_p, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "update", (PyCFunction) _wrap_PyTasksTransformTask_update, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "eval", (PyCFunction) _wrap_PyTasksTransformTask_eval, METH_NOARGS, NULL },
    {(char *) "E_0_c", (PyCFunction) _wrap_PyTasksTransformTask_E_0_c, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "speed", (PyCFunction) _wrap_PyTasksTransformTask_speed, METH_NOARGS, NULL },
    {(char *) "jac", (PyCFunction) _wrap_PyTasksTransformTask_jac, METH_NOARGS, NULL },
    {(char *) "normalAcc", (PyCFunction) _wrap_PyTasksTransformTask_normalAcc, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksTransformTask__tp_dealloc(PyTasksTransformTask *self)
{
        tasks::TransformTask *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksTransformTask__tp_richcompare (PyTasksTransformTask *PYBINDGEN_UNUSED(self), PyTasksTransformTask *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksTransformTask_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksTransformTask_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.TransformTask",            /* tp_name */
    sizeof(PyTasksTransformTask),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksTransformTask__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksTransformTask__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksTransformTask_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksTransformTask__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyTasksSurfaceTransformTask__tp_init(PyTasksSurfaceTransformTask *self, PyObject *args, PyObject *kwargs)
{
    PyRbdMultiBody *mb;
    const char *bodyName;
    Py_ssize_t bodyName_len;
    std::string bodyName_std;
    PySvaPTransformd *X_0_t;
    PySvaPTransformd *X_b_p = NULL;
    const char *keywords[] = {"mb", "bodyName", "X_0_t", "X_b_p", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!s#O!|O!", (char **) keywords, &PyRbdMultiBody_Type, &mb, &bodyName, &bodyName_len, &PySvaPTransformd_Type, &X_0_t, &PySvaPTransformd_Type, &X_b_p)) {
        return -1;
    }
    bodyName_std = std::string(bodyName, bodyName_len);
    self->obj = new tasks::SurfaceTransformTask(*((PyRbdMultiBody *) mb)->obj, bodyName_std, *((PySvaPTransformd *) X_0_t)->obj, (X_b_p ? (*((PySvaPTransformd *) X_b_p)->obj) : sva::PTransformd::Identity()));
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}


PyObject *
_wrap_PyTasksSurfaceTransformTask_normalAcc(PyTasksSurfaceTransformTask *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd const & retval = self->obj->normalAcc();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}



PyObject *
_wrap_PyTasksSurfaceTransformTask_X_b_p__0(PyTasksSurfaceTransformTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PySvaPTransformd *X_b_p;
    const char *keywords[] = {"X_b_p", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PySvaPTransformd_Type, &X_b_p)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->X_b_p(*((PySvaPTransformd *) X_b_p)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksSurfaceTransformTask_X_b_p__1(PyTasksSurfaceTransformTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PySvaPTransformd *py_PTransformd;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    sva::PTransformd retval = self->obj->X_b_p();
    py_PTransformd = PyObject_New(PySvaPTransformd, &PySvaPTransformd_Type);
    py_PTransformd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_PTransformd->obj = new sva::PTransformd(retval);
    py_retval = Py_BuildValue((char *) "N", py_PTransformd);
    return py_retval;
}

PyObject * _wrap_PyTasksSurfaceTransformTask_X_b_p(PyTasksSurfaceTransformTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksSurfaceTransformTask_X_b_p__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksSurfaceTransformTask_X_b_p__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyTasksSurfaceTransformTask_update(PyTasksSurfaceTransformTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyRbdMultiBody *mb;
    PyRbdMultiBodyConfig *mbc;
    std::vector<sva::MotionVecd> mbcs_value;
    const char *keywords[] = {"mb", "mbc", "mbcs", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O&", (char **) keywords, &PyRbdMultiBody_Type, &mb, &PyRbdMultiBodyConfig_Type, &mbc, _wrap_convert_py2c__std__vector__lt___sva__MotionVecd___gt__, &mbcs_value)) {
        return NULL;
    }
    self->obj->update(*((PyRbdMultiBody *) mb)->obj, *((PyRbdMultiBodyConfig *) mbc)->obj, mbcs_value);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksSurfaceTransformTask_eval(PyTasksSurfaceTransformTask *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd const & retval = self->obj->eval();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}


PyObject *
_wrap_PyTasksSurfaceTransformTask_speed(PyTasksSurfaceTransformTask *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd const & retval = self->obj->speed();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}


PyObject *
_wrap_PyTasksSurfaceTransformTask_jac(PyTasksSurfaceTransformTask *self)
{
    PyObject *py_retval;
    PyEigenMatrixXd *py_MatrixXd;

    Eigen::MatrixXd const & retval = self->obj->jac();
    py_MatrixXd = PyObject_New(PyEigenMatrixXd, &PyEigenMatrixXd_Type);
    py_MatrixXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MatrixXd->obj = new Eigen::MatrixXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_MatrixXd);
    return py_retval;
}



PyObject *
_wrap_PyTasksSurfaceTransformTask_target__0(PyTasksSurfaceTransformTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PySvaPTransformd *X_0_t;
    const char *keywords[] = {"X_0_t", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PySvaPTransformd_Type, &X_0_t)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->target(*((PySvaPTransformd *) X_0_t)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyTasksSurfaceTransformTask_target__1(PyTasksSurfaceTransformTask *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PySvaPTransformd *py_PTransformd;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    sva::PTransformd retval = self->obj->target();
    py_PTransformd = PyObject_New(PySvaPTransformd, &PySvaPTransformd_Type);
    py_PTransformd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_PTransformd->obj = new sva::PTransformd(retval);
    py_retval = Py_BuildValue((char *) "N", py_PTransformd);
    return py_retval;
}

PyObject * _wrap_PyTasksSurfaceTransformTask_target(PyTasksSurfaceTransformTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksSurfaceTransformTask_target__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksSurfaceTransformTask_target__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}

static PyMethodDef PyTasksSurfaceTransformTask_methods[] = {
    {(char *) "normalAcc", (PyCFunction) _wrap_PyTasksSurfaceTransformTask_normalAcc, METH_NOARGS, NULL },
    {(char *) "X_b_p", (PyCFunction) _wrap_PyTasksSurfaceTransformTask_X_b_p, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "update", (PyCFunction) _wrap_PyTasksSurfaceTransformTask_update, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "eval", (PyCFunction) _wrap_PyTasksSurfaceTransformTask_eval, METH_NOARGS, NULL },
    {(char *) "speed", (PyCFunction) _wrap_PyTasksSurfaceTransformTask_speed, METH_NOARGS, NULL },
    {(char *) "jac", (PyCFunction) _wrap_PyTasksSurfaceTransformTask_jac, METH_NOARGS, NULL },
    {(char *) "target", (PyCFunction) _wrap_PyTasksSurfaceTransformTask_target, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksSurfaceTransformTask__tp_dealloc(PyTasksSurfaceTransformTask *self)
{
        tasks::SurfaceTransformTask *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksSurfaceTransformTask__tp_richcompare (PyTasksSurfaceTransformTask *PYBINDGEN_UNUSED(self), PyTasksSurfaceTransformTask *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksSurfaceTransformTask_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksSurfaceTransformTask_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.SurfaceTransformTask",            /* tp_name */
    sizeof(PyTasksSurfaceTransformTask),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksSurfaceTransformTask__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksSurfaceTransformTask__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksSurfaceTransformTask_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksSurfaceTransformTask__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyTasksRelativeDistTask__tp_init(PyTasksRelativeDistTask *self, PyObject *args, PyObject *kwargs)
{
    PyRbdMultiBody *mb;
    double timestep;
    PyTasksRelativeDistTaskRbInfo *rbi1;
    PyTasksRelativeDistTaskRbInfo *rbi2;
    PyEigenVector3d *u1 = NULL;
    PyEigenVector3d *u2 = NULL;
    const char *keywords[] = {"mb", "timestep", "rbi1", "rbi2", "u1", "u2", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!dO!O!|O!O!", (char **) keywords, &PyRbdMultiBody_Type, &mb, &timestep, &PyTasksRelativeDistTaskRbInfo_Type, &rbi1, &PyTasksRelativeDistTaskRbInfo_Type, &rbi2, &PyEigenVector3d_Type, &u1, &PyEigenVector3d_Type, &u2)) {
        return -1;
    }
    self->obj = new tasks::RelativeDistTask(*((PyRbdMultiBody *) mb)->obj, timestep, *((PyTasksRelativeDistTaskRbInfo *) rbi1)->obj, *((PyTasksRelativeDistTaskRbInfo *) rbi2)->obj, (u1 ? (*((PyEigenVector3d *) u1)->obj) : Eigen::Vector3d::Zero()), (u2 ? (*((PyEigenVector3d *) u2)->obj) : Eigen::Vector3d::Zero()));
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}


PyObject *
_wrap_PyTasksRelativeDistTask_update(PyTasksRelativeDistTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyRbdMultiBody *mbs;
    PyRbdMultiBodyConfig *mbcs;
    std::vector<sva::MotionVecd> normalAccB_value;
    const char *keywords[] = {"mbs", "mbcs", "normalAccB", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O&", (char **) keywords, &PyRbdMultiBody_Type, &mbs, &PyRbdMultiBodyConfig_Type, &mbcs, _wrap_convert_py2c__std__vector__lt___sva__MotionVecd___gt__, &normalAccB_value)) {
        return NULL;
    }
    self->obj->update(*((PyRbdMultiBody *) mbs)->obj, *((PyRbdMultiBodyConfig *) mbcs)->obj, normalAccB_value);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksRelativeDistTask_eval(PyTasksRelativeDistTask *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd retval = self->obj->eval();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}


PyObject *
_wrap_PyTasksRelativeDistTask_jac(PyTasksRelativeDistTask *self)
{
    PyObject *py_retval;
    PyEigenMatrixXd *py_MatrixXd;

    Eigen::MatrixXd retval = self->obj->jac();
    py_MatrixXd = PyObject_New(PyEigenMatrixXd, &PyEigenMatrixXd_Type);
    py_MatrixXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MatrixXd->obj = new Eigen::MatrixXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_MatrixXd);
    return py_retval;
}

static PyMethodDef PyTasksRelativeDistTask_methods[] = {
    {(char *) "update", (PyCFunction) _wrap_PyTasksRelativeDistTask_update, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "eval", (PyCFunction) _wrap_PyTasksRelativeDistTask_eval, METH_NOARGS, NULL },
    {(char *) "jac", (PyCFunction) _wrap_PyTasksRelativeDistTask_jac, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksRelativeDistTask__tp_dealloc(PyTasksRelativeDistTask *self)
{
        tasks::RelativeDistTask *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksRelativeDistTask__tp_richcompare (PyTasksRelativeDistTask *PYBINDGEN_UNUSED(self), PyTasksRelativeDistTask *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksRelativeDistTask_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksRelativeDistTask_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.RelativeDistTask",            /* tp_name */
    sizeof(PyTasksRelativeDistTask),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksRelativeDistTask__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksRelativeDistTask__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksRelativeDistTask_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksRelativeDistTask__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyTasksVectorOrientationTask__tp_init(PyTasksVectorOrientationTask *self, PyObject *args, PyObject *kwargs)
{
    PyRbdMultiBody *mb;
    const char *bodyName;
    Py_ssize_t bodyName_len;
    std::string bodyName_std;
    PyEigenVector3d *bodyVector;
    PyEigenVector3d *targetVector;
    const char *keywords[] = {"mb", "bodyName", "bodyVector", "targetVector", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!s#O!O!", (char **) keywords, &PyRbdMultiBody_Type, &mb, &bodyName, &bodyName_len, &PyEigenVector3d_Type, &bodyVector, &PyEigenVector3d_Type, &targetVector)) {
        return -1;
    }
    bodyName_std = std::string(bodyName, bodyName_len);
    self->obj = new tasks::VectorOrientationTask(*((PyRbdMultiBody *) mb)->obj, bodyName_std, *((PyEigenVector3d *) bodyVector)->obj, *((PyEigenVector3d *) targetVector)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}


PyObject *
_wrap_PyTasksVectorOrientationTask_update(PyTasksVectorOrientationTask *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyRbdMultiBody *mb;
    PyRbdMultiBodyConfig *mbc;
    std::vector<sva::MotionVecd> normalAccB_value;
    const char *keywords[] = {"mb", "mbc", "normalAccB", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O&", (char **) keywords, &PyRbdMultiBody_Type, &mb, &PyRbdMultiBodyConfig_Type, &mbc, _wrap_convert_py2c__std__vector__lt___sva__MotionVecd___gt__, &normalAccB_value)) {
        return NULL;
    }
    self->obj->update(*((PyRbdMultiBody *) mb)->obj, *((PyRbdMultiBodyConfig *) mbc)->obj, normalAccB_value);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyTasksVectorOrientationTask_eval(PyTasksVectorOrientationTask *self)
{
    PyObject *py_retval;
    PyEigenVectorXd *py_VectorXd;

    Eigen::VectorXd retval = self->obj->eval();
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}


PyObject *
_wrap_PyTasksVectorOrientationTask_jac(PyTasksVectorOrientationTask *self)
{
    PyObject *py_retval;
    PyEigenMatrixXd *py_MatrixXd;

    Eigen::MatrixXd retval = self->obj->jac();
    py_MatrixXd = PyObject_New(PyEigenMatrixXd, &PyEigenMatrixXd_Type);
    py_MatrixXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MatrixXd->obj = new Eigen::MatrixXd(retval);
    py_retval = Py_BuildValue((char *) "N", py_MatrixXd);
    return py_retval;
}

static PyMethodDef PyTasksVectorOrientationTask_methods[] = {
    {(char *) "update", (PyCFunction) _wrap_PyTasksVectorOrientationTask_update, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "eval", (PyCFunction) _wrap_PyTasksVectorOrientationTask_eval, METH_NOARGS, NULL },
    {(char *) "jac", (PyCFunction) _wrap_PyTasksVectorOrientationTask_jac, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksVectorOrientationTask__tp_dealloc(PyTasksVectorOrientationTask *self)
{
        tasks::VectorOrientationTask *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksVectorOrientationTask__tp_richcompare (PyTasksVectorOrientationTask *PYBINDGEN_UNUSED(self), PyTasksVectorOrientationTask *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksVectorOrientationTask_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksVectorOrientationTask_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.VectorOrientationTask",            /* tp_name */
    sizeof(PyTasksVectorOrientationTask),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksVectorOrientationTask__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksVectorOrientationTask__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksVectorOrientationTask_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksVectorOrientationTask__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyTasksRelativeDistTaskRbInfo__tp_init__0(PyTasksRelativeDistTaskRbInfo *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new tasks::RelativeDistTask::rbInfo();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksRelativeDistTaskRbInfo__tp_init__1(PyTasksRelativeDistTaskRbInfo *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *bodyName;
    Py_ssize_t bodyName_len;
    std::string bodyName_std;
    PyEigenVector3d *r_b1_p;
    PyEigenVector3d *r_0_b2p;
    const char *keywords[] = {"bodyName", "r_b1_p", "r_0_b2p", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!O!", (char **) keywords, &bodyName, &bodyName_len, &PyEigenVector3d_Type, &r_b1_p, &PyEigenVector3d_Type, &r_0_b2p)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    bodyName_std = std::string(bodyName, bodyName_len);
    self->obj = new tasks::RelativeDistTask::rbInfo(bodyName_std, *((PyEigenVector3d *) r_b1_p)->obj, *((PyEigenVector3d *) r_0_b2p)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyTasksRelativeDistTaskRbInfo__tp_init(PyTasksRelativeDistTaskRbInfo *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyTasksRelativeDistTaskRbInfo__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksRelativeDistTaskRbInfo__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}

static PyMethodDef PyTasksRelativeDistTaskRbInfo_methods[] = {
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksRelativeDistTaskRbInfo__tp_dealloc(PyTasksRelativeDistTaskRbInfo *self)
{
        tasks::RelativeDistTask::rbInfo *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksRelativeDistTaskRbInfo__tp_richcompare (PyTasksRelativeDistTaskRbInfo *PYBINDGEN_UNUSED(self), PyTasksRelativeDistTaskRbInfo *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksRelativeDistTaskRbInfo_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksRelativeDistTaskRbInfo_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.RelativeDistTask.rbInfo",            /* tp_name */
    sizeof(PyTasksRelativeDistTaskRbInfo),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksRelativeDistTaskRbInfo__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksRelativeDistTaskRbInfo__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksRelativeDistTaskRbInfo_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksRelativeDistTaskRbInfo__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



static PyObject* _wrap_PyTasksQBound__get_lQBound(PyTasksQBound *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    Pystd__vector__lt__std__vector__lt__double__gt_____gt__ *py_std__vector__lt__std__vector__lt__double__gt_____gt__;

    py_std__vector__lt__std__vector__lt__double__gt_____gt__ = PyObject_New(Pystd__vector__lt__std__vector__lt__double__gt_____gt__, &Pystd__vector__lt__std__vector__lt__double__gt_____gt___Type);
    py_std__vector__lt__std__vector__lt__double__gt_____gt__->obj = new std::vector<std::vector<double> >(self->obj->lQBound);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt__std__vector__lt__double__gt_____gt__);
    return py_retval;
}
static int _wrap_PyTasksQBound__set_lQBound(PyTasksQBound *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O&", _wrap_convert_py2c__std__vector__lt___std__vector__lt___double___gt_____gt__, &self->obj->lQBound)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyTasksQBound__get_uQBound(PyTasksQBound *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    Pystd__vector__lt__std__vector__lt__double__gt_____gt__ *py_std__vector__lt__std__vector__lt__double__gt_____gt__;

    py_std__vector__lt__std__vector__lt__double__gt_____gt__ = PyObject_New(Pystd__vector__lt__std__vector__lt__double__gt_____gt__, &Pystd__vector__lt__std__vector__lt__double__gt_____gt___Type);
    py_std__vector__lt__std__vector__lt__double__gt_____gt__->obj = new std::vector<std::vector<double> >(self->obj->uQBound);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt__std__vector__lt__double__gt_____gt__);
    return py_retval;
}
static int _wrap_PyTasksQBound__set_uQBound(PyTasksQBound *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O&", _wrap_convert_py2c__std__vector__lt___std__vector__lt___double___gt_____gt__, &self->obj->uQBound)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyTasksQBound__getsets[] = {
    {
        (char*) "lQBound", /* attribute name */
        (getter) _wrap_PyTasksQBound__get_lQBound, /* C function to get the attribute */
        (setter) _wrap_PyTasksQBound__set_lQBound, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "uQBound", /* attribute name */
        (getter) _wrap_PyTasksQBound__get_uQBound, /* C function to get the attribute */
        (setter) _wrap_PyTasksQBound__set_uQBound, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyTasksQBound__tp_init__0(PyTasksQBound *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new tasks::QBound();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQBound__tp_init__1(PyTasksQBound *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyTasksQBound *ctor_arg;
    const char *keywords[] = {"ctor_arg", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksQBound_Type, &ctor_arg)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new tasks::QBound(*((PyTasksQBound *) ctor_arg)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQBound__tp_init__2(PyTasksQBound *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new tasks::QBound();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksQBound__tp_init__3(PyTasksQBound *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<std::vector<double> > lQB_value;
    std::vector<std::vector<double> > uQB_value;
    const char *keywords[] = {"lQB", "uQB", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O&", (char **) keywords, _wrap_convert_py2c__std__vector__lt___std__vector__lt___double___gt_____gt__, &lQB_value, _wrap_convert_py2c__std__vector__lt___std__vector__lt___double___gt_____gt__, &uQB_value)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new tasks::QBound(lQB_value, uQB_value);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyTasksQBound__tp_init(PyTasksQBound *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[4] = {0,};
    retval = _wrap_PyTasksQBound__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksQBound__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyTasksQBound__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    retval = _wrap_PyTasksQBound__tp_init__3(self, args, kwargs, &exceptions[3]);
    if (!exceptions[3]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        return retval;
    }
    error_list = PyList_New(4);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyList_SET_ITEM(error_list, 3, PyObject_Str(exceptions[3]));
    Py_DECREF(exceptions[3]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyTasksQBound__copy__(PyTasksQBound *self)
{

    PyTasksQBound *py_copy;
    py_copy = PyObject_New(PyTasksQBound, &PyTasksQBound_Type);
    py_copy->obj = new tasks::QBound(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return (PyObject*) py_copy;
}

static PyMethodDef PyTasksQBound_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyTasksQBound__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksQBound__tp_dealloc(PyTasksQBound *self)
{
        tasks::QBound *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksQBound__tp_richcompare (PyTasksQBound *PYBINDGEN_UNUSED(self), PyTasksQBound *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksQBound_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksQBound_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.QBound",            /* tp_name */
    sizeof(PyTasksQBound),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksQBound__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksQBound__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksQBound_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyTasksQBound__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksQBound__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



static PyObject* _wrap_PyTasksAlphaBound__get_lAlphaBound(PyTasksAlphaBound *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    Pystd__vector__lt__std__vector__lt__double__gt_____gt__ *py_std__vector__lt__std__vector__lt__double__gt_____gt__;

    py_std__vector__lt__std__vector__lt__double__gt_____gt__ = PyObject_New(Pystd__vector__lt__std__vector__lt__double__gt_____gt__, &Pystd__vector__lt__std__vector__lt__double__gt_____gt___Type);
    py_std__vector__lt__std__vector__lt__double__gt_____gt__->obj = new std::vector<std::vector<double> >(self->obj->lAlphaBound);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt__std__vector__lt__double__gt_____gt__);
    return py_retval;
}
static int _wrap_PyTasksAlphaBound__set_lAlphaBound(PyTasksAlphaBound *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O&", _wrap_convert_py2c__std__vector__lt___std__vector__lt___double___gt_____gt__, &self->obj->lAlphaBound)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyTasksAlphaBound__get_uAlphaBound(PyTasksAlphaBound *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    Pystd__vector__lt__std__vector__lt__double__gt_____gt__ *py_std__vector__lt__std__vector__lt__double__gt_____gt__;

    py_std__vector__lt__std__vector__lt__double__gt_____gt__ = PyObject_New(Pystd__vector__lt__std__vector__lt__double__gt_____gt__, &Pystd__vector__lt__std__vector__lt__double__gt_____gt___Type);
    py_std__vector__lt__std__vector__lt__double__gt_____gt__->obj = new std::vector<std::vector<double> >(self->obj->uAlphaBound);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt__std__vector__lt__double__gt_____gt__);
    return py_retval;
}
static int _wrap_PyTasksAlphaBound__set_uAlphaBound(PyTasksAlphaBound *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O&", _wrap_convert_py2c__std__vector__lt___std__vector__lt___double___gt_____gt__, &self->obj->uAlphaBound)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyTasksAlphaBound__getsets[] = {
    {
        (char*) "lAlphaBound", /* attribute name */
        (getter) _wrap_PyTasksAlphaBound__get_lAlphaBound, /* C function to get the attribute */
        (setter) _wrap_PyTasksAlphaBound__set_lAlphaBound, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "uAlphaBound", /* attribute name */
        (getter) _wrap_PyTasksAlphaBound__get_uAlphaBound, /* C function to get the attribute */
        (setter) _wrap_PyTasksAlphaBound__set_uAlphaBound, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyTasksAlphaBound__tp_init__0(PyTasksAlphaBound *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new tasks::AlphaBound();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksAlphaBound__tp_init__1(PyTasksAlphaBound *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyTasksAlphaBound *ctor_arg;
    const char *keywords[] = {"ctor_arg", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksAlphaBound_Type, &ctor_arg)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new tasks::AlphaBound(*((PyTasksAlphaBound *) ctor_arg)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksAlphaBound__tp_init__2(PyTasksAlphaBound *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new tasks::AlphaBound();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksAlphaBound__tp_init__3(PyTasksAlphaBound *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<std::vector<double> > lAB_value;
    std::vector<std::vector<double> > uAB_value;
    const char *keywords[] = {"lAB", "uAB", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O&", (char **) keywords, _wrap_convert_py2c__std__vector__lt___std__vector__lt___double___gt_____gt__, &lAB_value, _wrap_convert_py2c__std__vector__lt___std__vector__lt___double___gt_____gt__, &uAB_value)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new tasks::AlphaBound(lAB_value, uAB_value);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyTasksAlphaBound__tp_init(PyTasksAlphaBound *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[4] = {0,};
    retval = _wrap_PyTasksAlphaBound__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksAlphaBound__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyTasksAlphaBound__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    retval = _wrap_PyTasksAlphaBound__tp_init__3(self, args, kwargs, &exceptions[3]);
    if (!exceptions[3]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        return retval;
    }
    error_list = PyList_New(4);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyList_SET_ITEM(error_list, 3, PyObject_Str(exceptions[3]));
    Py_DECREF(exceptions[3]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyTasksAlphaBound__copy__(PyTasksAlphaBound *self)
{

    PyTasksAlphaBound *py_copy;
    py_copy = PyObject_New(PyTasksAlphaBound, &PyTasksAlphaBound_Type);
    py_copy->obj = new tasks::AlphaBound(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return (PyObject*) py_copy;
}

static PyMethodDef PyTasksAlphaBound_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyTasksAlphaBound__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksAlphaBound__tp_dealloc(PyTasksAlphaBound *self)
{
        tasks::AlphaBound *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksAlphaBound__tp_richcompare (PyTasksAlphaBound *PYBINDGEN_UNUSED(self), PyTasksAlphaBound *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksAlphaBound_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksAlphaBound_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.AlphaBound",            /* tp_name */
    sizeof(PyTasksAlphaBound),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksAlphaBound__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksAlphaBound__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksAlphaBound_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyTasksAlphaBound__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksAlphaBound__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



static PyObject* _wrap_PyTasksTorqueBound__get_lTorqueBound(PyTasksTorqueBound *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    Pystd__vector__lt__std__vector__lt__double__gt_____gt__ *py_std__vector__lt__std__vector__lt__double__gt_____gt__;

    py_std__vector__lt__std__vector__lt__double__gt_____gt__ = PyObject_New(Pystd__vector__lt__std__vector__lt__double__gt_____gt__, &Pystd__vector__lt__std__vector__lt__double__gt_____gt___Type);
    py_std__vector__lt__std__vector__lt__double__gt_____gt__->obj = new std::vector<std::vector<double> >(self->obj->lTorqueBound);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt__std__vector__lt__double__gt_____gt__);
    return py_retval;
}
static int _wrap_PyTasksTorqueBound__set_lTorqueBound(PyTasksTorqueBound *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O&", _wrap_convert_py2c__std__vector__lt___std__vector__lt___double___gt_____gt__, &self->obj->lTorqueBound)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyTasksTorqueBound__get_uTorqueBound(PyTasksTorqueBound *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    Pystd__vector__lt__std__vector__lt__double__gt_____gt__ *py_std__vector__lt__std__vector__lt__double__gt_____gt__;

    py_std__vector__lt__std__vector__lt__double__gt_____gt__ = PyObject_New(Pystd__vector__lt__std__vector__lt__double__gt_____gt__, &Pystd__vector__lt__std__vector__lt__double__gt_____gt___Type);
    py_std__vector__lt__std__vector__lt__double__gt_____gt__->obj = new std::vector<std::vector<double> >(self->obj->uTorqueBound);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt__std__vector__lt__double__gt_____gt__);
    return py_retval;
}
static int _wrap_PyTasksTorqueBound__set_uTorqueBound(PyTasksTorqueBound *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O&", _wrap_convert_py2c__std__vector__lt___std__vector__lt___double___gt_____gt__, &self->obj->uTorqueBound)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyTasksTorqueBound__getsets[] = {
    {
        (char*) "lTorqueBound", /* attribute name */
        (getter) _wrap_PyTasksTorqueBound__get_lTorqueBound, /* C function to get the attribute */
        (setter) _wrap_PyTasksTorqueBound__set_lTorqueBound, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "uTorqueBound", /* attribute name */
        (getter) _wrap_PyTasksTorqueBound__get_uTorqueBound, /* C function to get the attribute */
        (setter) _wrap_PyTasksTorqueBound__set_uTorqueBound, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyTasksTorqueBound__tp_init__0(PyTasksTorqueBound *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new tasks::TorqueBound();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksTorqueBound__tp_init__1(PyTasksTorqueBound *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyTasksTorqueBound *ctor_arg;
    const char *keywords[] = {"ctor_arg", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksTorqueBound_Type, &ctor_arg)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new tasks::TorqueBound(*((PyTasksTorqueBound *) ctor_arg)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksTorqueBound__tp_init__2(PyTasksTorqueBound *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new tasks::TorqueBound();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksTorqueBound__tp_init__3(PyTasksTorqueBound *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<std::vector<double> > lTB_value;
    std::vector<std::vector<double> > uTB_value;
    const char *keywords[] = {"lTB", "uTB", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O&", (char **) keywords, _wrap_convert_py2c__std__vector__lt___std__vector__lt___double___gt_____gt__, &lTB_value, _wrap_convert_py2c__std__vector__lt___std__vector__lt___double___gt_____gt__, &uTB_value)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new tasks::TorqueBound(lTB_value, uTB_value);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyTasksTorqueBound__tp_init(PyTasksTorqueBound *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[4] = {0,};
    retval = _wrap_PyTasksTorqueBound__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksTorqueBound__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyTasksTorqueBound__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    retval = _wrap_PyTasksTorqueBound__tp_init__3(self, args, kwargs, &exceptions[3]);
    if (!exceptions[3]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        return retval;
    }
    error_list = PyList_New(4);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyList_SET_ITEM(error_list, 3, PyObject_Str(exceptions[3]));
    Py_DECREF(exceptions[3]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyTasksTorqueBound__copy__(PyTasksTorqueBound *self)
{

    PyTasksTorqueBound *py_copy;
    py_copy = PyObject_New(PyTasksTorqueBound, &PyTasksTorqueBound_Type);
    py_copy->obj = new tasks::TorqueBound(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return (PyObject*) py_copy;
}

static PyMethodDef PyTasksTorqueBound_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyTasksTorqueBound__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksTorqueBound__tp_dealloc(PyTasksTorqueBound *self)
{
        tasks::TorqueBound *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksTorqueBound__tp_richcompare (PyTasksTorqueBound *PYBINDGEN_UNUSED(self), PyTasksTorqueBound *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksTorqueBound_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksTorqueBound_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.TorqueBound",            /* tp_name */
    sizeof(PyTasksTorqueBound),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksTorqueBound__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksTorqueBound__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksTorqueBound_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyTasksTorqueBound__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksTorqueBound__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



static PyObject* _wrap_PyTasksPolyTorqueBound__get_lPolyTorqueBound(PyTasksPolyTorqueBound *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    Pystd__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt__ *py_std__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt__;

    py_std__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt__ = PyObject_New(Pystd__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt__, &Pystd__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt___Type);
    py_std__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt__->obj = new std::vector<std::vector<Eigen::VectorXd> >(self->obj->lPolyTorqueBound);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt__);
    return py_retval;
}
static int _wrap_PyTasksPolyTorqueBound__set_lPolyTorqueBound(PyTasksPolyTorqueBound *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O&", _wrap_convert_py2c__std__vector__lt___std__vector__lt___Eigen__VectorXd___gt_____gt__, &self->obj->lPolyTorqueBound)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyTasksPolyTorqueBound__get_uPolyTorqueBound(PyTasksPolyTorqueBound *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    Pystd__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt__ *py_std__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt__;

    py_std__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt__ = PyObject_New(Pystd__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt__, &Pystd__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt___Type);
    py_std__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt__->obj = new std::vector<std::vector<Eigen::VectorXd> >(self->obj->uPolyTorqueBound);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt__);
    return py_retval;
}
static int _wrap_PyTasksPolyTorqueBound__set_uPolyTorqueBound(PyTasksPolyTorqueBound *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O&", _wrap_convert_py2c__std__vector__lt___std__vector__lt___Eigen__VectorXd___gt_____gt__, &self->obj->uPolyTorqueBound)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyTasksPolyTorqueBound__getsets[] = {
    {
        (char*) "lPolyTorqueBound", /* attribute name */
        (getter) _wrap_PyTasksPolyTorqueBound__get_lPolyTorqueBound, /* C function to get the attribute */
        (setter) _wrap_PyTasksPolyTorqueBound__set_lPolyTorqueBound, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "uPolyTorqueBound", /* attribute name */
        (getter) _wrap_PyTasksPolyTorqueBound__get_uPolyTorqueBound, /* C function to get the attribute */
        (setter) _wrap_PyTasksPolyTorqueBound__set_uPolyTorqueBound, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyTasksPolyTorqueBound__tp_init__0(PyTasksPolyTorqueBound *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new tasks::PolyTorqueBound();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksPolyTorqueBound__tp_init__1(PyTasksPolyTorqueBound *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyTasksPolyTorqueBound *ctor_arg;
    const char *keywords[] = {"ctor_arg", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyTasksPolyTorqueBound_Type, &ctor_arg)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new tasks::PolyTorqueBound(*((PyTasksPolyTorqueBound *) ctor_arg)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksPolyTorqueBound__tp_init__2(PyTasksPolyTorqueBound *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new tasks::PolyTorqueBound();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyTasksPolyTorqueBound__tp_init__3(PyTasksPolyTorqueBound *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector<std::vector<Eigen::VectorXd> > lPTB_value;
    std::vector<std::vector<Eigen::VectorXd> > uPTB_value;
    const char *keywords[] = {"lPTB", "uPTB", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O&", (char **) keywords, _wrap_convert_py2c__std__vector__lt___std__vector__lt___Eigen__VectorXd___gt_____gt__, &lPTB_value, _wrap_convert_py2c__std__vector__lt___std__vector__lt___Eigen__VectorXd___gt_____gt__, &uPTB_value)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new tasks::PolyTorqueBound(lPTB_value, uPTB_value);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyTasksPolyTorqueBound__tp_init(PyTasksPolyTorqueBound *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[4] = {0,};
    retval = _wrap_PyTasksPolyTorqueBound__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyTasksPolyTorqueBound__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyTasksPolyTorqueBound__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    retval = _wrap_PyTasksPolyTorqueBound__tp_init__3(self, args, kwargs, &exceptions[3]);
    if (!exceptions[3]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        return retval;
    }
    error_list = PyList_New(4);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyList_SET_ITEM(error_list, 3, PyObject_Str(exceptions[3]));
    Py_DECREF(exceptions[3]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyTasksPolyTorqueBound__copy__(PyTasksPolyTorqueBound *self)
{

    PyTasksPolyTorqueBound *py_copy;
    py_copy = PyObject_New(PyTasksPolyTorqueBound, &PyTasksPolyTorqueBound_Type);
    py_copy->obj = new tasks::PolyTorqueBound(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return (PyObject*) py_copy;
}

static PyMethodDef PyTasksPolyTorqueBound_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyTasksPolyTorqueBound__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyTasksPolyTorqueBound__tp_dealloc(PyTasksPolyTorqueBound *self)
{
        tasks::PolyTorqueBound *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyTasksPolyTorqueBound__tp_richcompare (PyTasksPolyTorqueBound *PYBINDGEN_UNUSED(self), PyTasksPolyTorqueBound *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyTasksPolyTorqueBound_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyTasksPolyTorqueBound_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.PolyTorqueBound",            /* tp_name */
    sizeof(PyTasksPolyTorqueBound),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyTasksPolyTorqueBound__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyTasksPolyTorqueBound__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyTasksPolyTorqueBound_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyTasksPolyTorqueBound__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyTasksPolyTorqueBound__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};


/* --- containers --- */



static void
Pystd__vector__lt__int__gt__Iter__tp_clear(Pystd__vector__lt__int__gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt__int__gt__Iter__tp_traverse(Pystd__vector__lt__int__gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt__int__gt____tp_dealloc(Pystd__vector__lt__int__gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt__int__gt__Iter__tp_dealloc(Pystd__vector__lt__int__gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt__int__gt____tp_iter(Pystd__vector__lt__int__gt__ *self)
{
    Pystd__vector__lt__int__gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt__int__gt__Iter, &Pystd__vector__lt__int__gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector<int>::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt__int__gt__Iter__tp_iter(Pystd__vector__lt__int__gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt__int__gt__Iter__tp_iternext(Pystd__vector__lt__int__gt__Iter *self)
{
    PyObject *py_retval;
    std::vector<int>::iterator iter;

    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_retval = Py_BuildValue((char *) "i", (*iter));
    return py_retval;
}

int _wrap_convert_py2c__int(PyObject *value, int *address)
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &*address)) {
        Py_DECREF(py_retval);
        return 0;
    }
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___int___gt__(PyObject *arg, std::vector<int> *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt__int__gt___Type)) {
        *container = *((Pystd__vector__lt__int__gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            int item;
            if (!_wrap_convert_py2c__int(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt__int__gt__ instance, or a list of int");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt__int__gt____tp_init(Pystd__vector__lt__int__gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector<int>;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___int___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt__int__gt___Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.Std__vector__lt__int__gt__",            /* tp_name */
    sizeof(Pystd__vector__lt__int__gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt__int__gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt__int__gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt__int__gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt__int__gt__Iter_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.Std__vector__lt__int__gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt__int__gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt__int__gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt__int__gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt__int__gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt__int__gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt__int__gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__vector__lt__std__string__gt__Iter__tp_clear(Pystd__vector__lt__std__string__gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt__std__string__gt__Iter__tp_traverse(Pystd__vector__lt__std__string__gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt__std__string__gt____tp_dealloc(Pystd__vector__lt__std__string__gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt__std__string__gt__Iter__tp_dealloc(Pystd__vector__lt__std__string__gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt__std__string__gt____tp_iter(Pystd__vector__lt__std__string__gt__ *self)
{
    Pystd__vector__lt__std__string__gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt__std__string__gt__Iter, &Pystd__vector__lt__std__string__gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector<std::string>::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt__std__string__gt__Iter__tp_iter(Pystd__vector__lt__std__string__gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt__std__string__gt__Iter__tp_iternext(Pystd__vector__lt__std__string__gt__Iter *self)
{
    PyObject *py_retval;
    std::vector<std::string>::iterator iter;

    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_retval = Py_BuildValue((char *) "s#", ((*iter)).c_str(), ((*iter)).size());
    return py_retval;
}

int _wrap_convert_py2c__std__string(PyObject *value, std::string *address)
{
    PyObject *py_retval;
    const char *retval_ptr;
    Py_ssize_t retval_len;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "s#", &retval_ptr, &retval_len)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = std::string(retval_ptr, retval_len);
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___std__string___gt__(PyObject *arg, std::vector<std::string> *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt__std__string__gt___Type)) {
        *container = *((Pystd__vector__lt__std__string__gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            std::string item;
            if (!_wrap_convert_py2c__std__string(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt__std__string__gt__ instance, or a list of std::string");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt__std__string__gt____tp_init(Pystd__vector__lt__std__string__gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector<std::string>;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___std__string___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt__std__string__gt___Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.Std__vector__lt__std__string__gt__",            /* tp_name */
    sizeof(Pystd__vector__lt__std__string__gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt__std__string__gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt__std__string__gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt__std__string__gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt__std__string__gt__Iter_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.Std__vector__lt__std__string__gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt__std__string__gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt__std__string__gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt__std__string__gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt__std__string__gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt__std__string__gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt__std__string__gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__vector__lt__double__gt__Iter__tp_clear(Pystd__vector__lt__double__gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt__double__gt__Iter__tp_traverse(Pystd__vector__lt__double__gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt__double__gt____tp_dealloc(Pystd__vector__lt__double__gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt__double__gt__Iter__tp_dealloc(Pystd__vector__lt__double__gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt__double__gt____tp_iter(Pystd__vector__lt__double__gt__ *self)
{
    Pystd__vector__lt__double__gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt__double__gt__Iter, &Pystd__vector__lt__double__gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector<double>::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt__double__gt__Iter__tp_iter(Pystd__vector__lt__double__gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt__double__gt__Iter__tp_iternext(Pystd__vector__lt__double__gt__Iter *self)
{
    PyObject *py_retval;
    std::vector<double>::iterator iter;

    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_retval = Py_BuildValue((char *) "d", (*iter));
    return py_retval;
}

int _wrap_convert_py2c__double(PyObject *value, double *address)
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &*address)) {
        Py_DECREF(py_retval);
        return 0;
    }
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___double___gt__(PyObject *arg, std::vector<double> *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt__double__gt___Type)) {
        *container = *((Pystd__vector__lt__double__gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            double item;
            if (!_wrap_convert_py2c__double(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt__double__gt__ instance, or a list of double");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt__double__gt____tp_init(Pystd__vector__lt__double__gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector<double>;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___double___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt__double__gt___Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.Std__vector__lt__double__gt__",            /* tp_name */
    sizeof(Pystd__vector__lt__double__gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt__double__gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt__double__gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt__double__gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt__double__gt__Iter_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.Std__vector__lt__double__gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt__double__gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt__double__gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt__double__gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt__double__gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt__double__gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt__double__gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__vector__lt__std__vector__lt__double__gt_____gt__Iter__tp_clear(Pystd__vector__lt__std__vector__lt__double__gt_____gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt__std__vector__lt__double__gt_____gt__Iter__tp_traverse(Pystd__vector__lt__std__vector__lt__double__gt_____gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt__std__vector__lt__double__gt_____gt____tp_dealloc(Pystd__vector__lt__std__vector__lt__double__gt_____gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt__std__vector__lt__double__gt_____gt__Iter__tp_dealloc(Pystd__vector__lt__std__vector__lt__double__gt_____gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt__std__vector__lt__double__gt_____gt____tp_iter(Pystd__vector__lt__std__vector__lt__double__gt_____gt__ *self)
{
    Pystd__vector__lt__std__vector__lt__double__gt_____gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt__std__vector__lt__double__gt_____gt__Iter, &Pystd__vector__lt__std__vector__lt__double__gt_____gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector<std::vector<double> >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt__std__vector__lt__double__gt_____gt__Iter__tp_iter(Pystd__vector__lt__std__vector__lt__double__gt_____gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt__std__vector__lt__double__gt_____gt__Iter__tp_iternext(Pystd__vector__lt__std__vector__lt__double__gt_____gt__Iter *self)
{
    PyObject *py_retval;
    std::vector<std::vector<double> >::iterator iter;
    Pystd__vector__lt__double__gt__ *py_std__vector__lt__double__gt__;

    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_std__vector__lt__double__gt__ = PyObject_New(Pystd__vector__lt__double__gt__, &Pystd__vector__lt__double__gt___Type);
    py_std__vector__lt__double__gt__->obj = new std::vector<double>((*iter));
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt__double__gt__);
    return py_retval;
}

int _wrap_convert_py2c__std__vector__lt___std__vector__lt___double___gt_____gt__(PyObject *arg, std::vector<std::vector<double> > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt__std__vector__lt__double__gt_____gt___Type)) {
        *container = *((Pystd__vector__lt__std__vector__lt__double__gt_____gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            std::vector< double > item;
            if (!_wrap_convert_py2c__std__vector__lt___double___gt__(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt__std__vector__lt__double__gt_____gt__ instance, or a list of std::vector< double >");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt__std__vector__lt__double__gt_____gt____tp_init(Pystd__vector__lt__std__vector__lt__double__gt_____gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector<std::vector<double> >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___std__vector__lt___double___gt_____gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt__std__vector__lt__double__gt_____gt___Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.Std__vector__lt__std__vector__lt__double__gt_____gt__",            /* tp_name */
    sizeof(Pystd__vector__lt__std__vector__lt__double__gt_____gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt__std__vector__lt__double__gt_____gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt__std__vector__lt__double__gt_____gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt__std__vector__lt__double__gt_____gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt__std__vector__lt__double__gt_____gt__Iter_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.Std__vector__lt__std__vector__lt__double__gt_____gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt__std__vector__lt__double__gt_____gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt__std__vector__lt__double__gt_____gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt__std__vector__lt__double__gt_____gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt__std__vector__lt__double__gt_____gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt__std__vector__lt__double__gt_____gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt__std__vector__lt__double__gt_____gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__vector__lt__rbd__MultiBody__gt__Iter__tp_clear(Pystd__vector__lt__rbd__MultiBody__gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt__rbd__MultiBody__gt__Iter__tp_traverse(Pystd__vector__lt__rbd__MultiBody__gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt__rbd__MultiBody__gt____tp_dealloc(Pystd__vector__lt__rbd__MultiBody__gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt__rbd__MultiBody__gt__Iter__tp_dealloc(Pystd__vector__lt__rbd__MultiBody__gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt__rbd__MultiBody__gt____tp_iter(Pystd__vector__lt__rbd__MultiBody__gt__ *self)
{
    Pystd__vector__lt__rbd__MultiBody__gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt__rbd__MultiBody__gt__Iter, &Pystd__vector__lt__rbd__MultiBody__gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector<rbd::MultiBody>::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt__rbd__MultiBody__gt__Iter__tp_iter(Pystd__vector__lt__rbd__MultiBody__gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt__rbd__MultiBody__gt__Iter__tp_iternext(Pystd__vector__lt__rbd__MultiBody__gt__Iter *self)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBody>::iterator iter;
    PyRbdMultiBody *py_MultiBody;

    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_MultiBody = PyObject_New(PyRbdMultiBody, &PyRbdMultiBody_Type);
    py_MultiBody->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MultiBody->obj = new rbd::MultiBody((*iter));
    py_retval = Py_BuildValue((char *) "N", py_MultiBody);
    return py_retval;
}

int _wrap_convert_py2c__rbd__MultiBody(PyObject *value, rbd::MultiBody *address)
{
    PyObject *py_retval;
    PyRbdMultiBody *tmp_MultiBody;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyRbdMultiBody_Type, &tmp_MultiBody)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = *tmp_MultiBody->obj;
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__(PyObject *arg, std::vector<rbd::MultiBody> *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt__rbd__MultiBody__gt___Type)) {
        *container = *((Pystd__vector__lt__rbd__MultiBody__gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            rbd::MultiBody item;
            if (!_wrap_convert_py2c__rbd__MultiBody(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt__rbd__MultiBody__gt__ instance, or a list of rbd::MultiBody");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt__rbd__MultiBody__gt____tp_init(Pystd__vector__lt__rbd__MultiBody__gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector<rbd::MultiBody>;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___rbd__MultiBody___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt__rbd__MultiBody__gt___Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.Std__vector__lt__rbd__MultiBody__gt__",            /* tp_name */
    sizeof(Pystd__vector__lt__rbd__MultiBody__gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt__rbd__MultiBody__gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt__rbd__MultiBody__gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt__rbd__MultiBody__gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt__rbd__MultiBody__gt__Iter_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.Std__vector__lt__rbd__MultiBody__gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt__rbd__MultiBody__gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt__rbd__MultiBody__gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt__rbd__MultiBody__gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt__rbd__MultiBody__gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt__rbd__MultiBody__gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt__rbd__MultiBody__gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__vector__lt__rbd__MultiBodyConfig__gt__Iter__tp_clear(Pystd__vector__lt__rbd__MultiBodyConfig__gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt__rbd__MultiBodyConfig__gt__Iter__tp_traverse(Pystd__vector__lt__rbd__MultiBodyConfig__gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt__rbd__MultiBodyConfig__gt____tp_dealloc(Pystd__vector__lt__rbd__MultiBodyConfig__gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt__rbd__MultiBodyConfig__gt__Iter__tp_dealloc(Pystd__vector__lt__rbd__MultiBodyConfig__gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt__rbd__MultiBodyConfig__gt____tp_iter(Pystd__vector__lt__rbd__MultiBodyConfig__gt__ *self)
{
    Pystd__vector__lt__rbd__MultiBodyConfig__gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt__rbd__MultiBodyConfig__gt__Iter, &Pystd__vector__lt__rbd__MultiBodyConfig__gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector<rbd::MultiBodyConfig>::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt__rbd__MultiBodyConfig__gt__Iter__tp_iter(Pystd__vector__lt__rbd__MultiBodyConfig__gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt__rbd__MultiBodyConfig__gt__Iter__tp_iternext(Pystd__vector__lt__rbd__MultiBodyConfig__gt__Iter *self)
{
    PyObject *py_retval;
    std::vector<rbd::MultiBodyConfig>::iterator iter;
    PyRbdMultiBodyConfig *py_MultiBodyConfig;

    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_MultiBodyConfig = PyObject_New(PyRbdMultiBodyConfig, &PyRbdMultiBodyConfig_Type);
    py_MultiBodyConfig->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MultiBodyConfig->obj = new rbd::MultiBodyConfig((*iter));
    py_retval = Py_BuildValue((char *) "N", py_MultiBodyConfig);
    return py_retval;
}

int _wrap_convert_py2c__rbd__MultiBodyConfig(PyObject *value, rbd::MultiBodyConfig *address)
{
    PyObject *py_retval;
    PyRbdMultiBodyConfig *tmp_MultiBodyConfig;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyRbdMultiBodyConfig_Type, &tmp_MultiBodyConfig)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = *tmp_MultiBodyConfig->obj;
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___rbd__MultiBodyConfig___gt__(PyObject *arg, std::vector<rbd::MultiBodyConfig> *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt__rbd__MultiBodyConfig__gt___Type)) {
        *container = *((Pystd__vector__lt__rbd__MultiBodyConfig__gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            rbd::MultiBodyConfig item;
            if (!_wrap_convert_py2c__rbd__MultiBodyConfig(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt__rbd__MultiBodyConfig__gt__ instance, or a list of rbd::MultiBodyConfig");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt__rbd__MultiBodyConfig__gt____tp_init(Pystd__vector__lt__rbd__MultiBodyConfig__gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector<rbd::MultiBodyConfig>;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___rbd__MultiBodyConfig___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt__rbd__MultiBodyConfig__gt___Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.Std__vector__lt__rbd__MultiBodyConfig__gt__",            /* tp_name */
    sizeof(Pystd__vector__lt__rbd__MultiBodyConfig__gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt__rbd__MultiBodyConfig__gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt__rbd__MultiBodyConfig__gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt__rbd__MultiBodyConfig__gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt__rbd__MultiBodyConfig__gt__Iter_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.Std__vector__lt__rbd__MultiBodyConfig__gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt__rbd__MultiBodyConfig__gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt__rbd__MultiBodyConfig__gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt__rbd__MultiBodyConfig__gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt__rbd__MultiBodyConfig__gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt__rbd__MultiBodyConfig__gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt__rbd__MultiBodyConfig__gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__vector__lt__sva__MotionVecd__gt__Iter__tp_clear(Pystd__vector__lt__sva__MotionVecd__gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt__sva__MotionVecd__gt__Iter__tp_traverse(Pystd__vector__lt__sva__MotionVecd__gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt__sva__MotionVecd__gt____tp_dealloc(Pystd__vector__lt__sva__MotionVecd__gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt__sva__MotionVecd__gt__Iter__tp_dealloc(Pystd__vector__lt__sva__MotionVecd__gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt__sva__MotionVecd__gt____tp_iter(Pystd__vector__lt__sva__MotionVecd__gt__ *self)
{
    Pystd__vector__lt__sva__MotionVecd__gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt__sva__MotionVecd__gt__Iter, &Pystd__vector__lt__sva__MotionVecd__gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector<sva::MotionVecd>::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt__sva__MotionVecd__gt__Iter__tp_iter(Pystd__vector__lt__sva__MotionVecd__gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt__sva__MotionVecd__gt__Iter__tp_iternext(Pystd__vector__lt__sva__MotionVecd__gt__Iter *self)
{
    PyObject *py_retval;
    std::vector<sva::MotionVecd>::iterator iter;
    PySvaMotionVecd *py_MotionVecd;

    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_MotionVecd = PyObject_New(PySvaMotionVecd, &PySvaMotionVecd_Type);
    py_MotionVecd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MotionVecd->obj = new sva::MotionVecd((*iter));
    py_retval = Py_BuildValue((char *) "N", py_MotionVecd);
    return py_retval;
}

int _wrap_convert_py2c__sva__MotionVecd(PyObject *value, sva::MotionVecd *address)
{
    PyObject *py_retval;
    PySvaMotionVecd *tmp_MotionVecd;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PySvaMotionVecd_Type, &tmp_MotionVecd)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = *tmp_MotionVecd->obj;
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___sva__MotionVecd___gt__(PyObject *arg, std::vector<sva::MotionVecd> *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt__sva__MotionVecd__gt___Type)) {
        *container = *((Pystd__vector__lt__sva__MotionVecd__gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            sva::MotionVecd item;
            if (!_wrap_convert_py2c__sva__MotionVecd(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt__sva__MotionVecd__gt__ instance, or a list of sva::MotionVecd");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt__sva__MotionVecd__gt____tp_init(Pystd__vector__lt__sva__MotionVecd__gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector<sva::MotionVecd>;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___sva__MotionVecd___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt__sva__MotionVecd__gt___Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.Std__vector__lt__sva__MotionVecd__gt__",            /* tp_name */
    sizeof(Pystd__vector__lt__sva__MotionVecd__gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt__sva__MotionVecd__gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt__sva__MotionVecd__gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt__sva__MotionVecd__gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt__sva__MotionVecd__gt__Iter_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.Std__vector__lt__sva__MotionVecd__gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt__sva__MotionVecd__gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt__sva__MotionVecd__gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt__sva__MotionVecd__gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt__sva__MotionVecd__gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt__sva__MotionVecd__gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt__sva__MotionVecd__gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__vector__lt__std__vector__lt__sva__MotionVecd__gt_____gt__Iter__tp_clear(Pystd__vector__lt__std__vector__lt__sva__MotionVecd__gt_____gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt__std__vector__lt__sva__MotionVecd__gt_____gt__Iter__tp_traverse(Pystd__vector__lt__std__vector__lt__sva__MotionVecd__gt_____gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt__std__vector__lt__sva__MotionVecd__gt_____gt____tp_dealloc(Pystd__vector__lt__std__vector__lt__sva__MotionVecd__gt_____gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt__std__vector__lt__sva__MotionVecd__gt_____gt__Iter__tp_dealloc(Pystd__vector__lt__std__vector__lt__sva__MotionVecd__gt_____gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt__std__vector__lt__sva__MotionVecd__gt_____gt____tp_iter(Pystd__vector__lt__std__vector__lt__sva__MotionVecd__gt_____gt__ *self)
{
    Pystd__vector__lt__std__vector__lt__sva__MotionVecd__gt_____gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt__std__vector__lt__sva__MotionVecd__gt_____gt__Iter, &Pystd__vector__lt__std__vector__lt__sva__MotionVecd__gt_____gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector<std::vector<sva::MotionVecd> >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt__std__vector__lt__sva__MotionVecd__gt_____gt__Iter__tp_iter(Pystd__vector__lt__std__vector__lt__sva__MotionVecd__gt_____gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt__std__vector__lt__sva__MotionVecd__gt_____gt__Iter__tp_iternext(Pystd__vector__lt__std__vector__lt__sva__MotionVecd__gt_____gt__Iter *self)
{
    PyObject *py_retval;
    std::vector<std::vector<sva::MotionVecd> >::iterator iter;
    Pystd__vector__lt__sva__MotionVecd__gt__ *py_std__vector__lt__sva__MotionVecd__gt__;

    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_std__vector__lt__sva__MotionVecd__gt__ = PyObject_New(Pystd__vector__lt__sva__MotionVecd__gt__, &Pystd__vector__lt__sva__MotionVecd__gt___Type);
    py_std__vector__lt__sva__MotionVecd__gt__->obj = new std::vector<sva::MotionVecd>((*iter));
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt__sva__MotionVecd__gt__);
    return py_retval;
}

int _wrap_convert_py2c__std__vector__lt___std__vector__lt___sva__MotionVecd___gt_____gt__(PyObject *arg, std::vector<std::vector<sva::MotionVecd> > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt__std__vector__lt__sva__MotionVecd__gt_____gt___Type)) {
        *container = *((Pystd__vector__lt__std__vector__lt__sva__MotionVecd__gt_____gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            std::vector< sva::MotionVecd > item;
            if (!_wrap_convert_py2c__std__vector__lt___sva__MotionVecd___gt__(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt__std__vector__lt__sva__MotionVecd__gt_____gt__ instance, or a list of std::vector< sva::MotionVecd >");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt__std__vector__lt__sva__MotionVecd__gt_____gt____tp_init(Pystd__vector__lt__std__vector__lt__sva__MotionVecd__gt_____gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector<std::vector<sva::MotionVecd> >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___std__vector__lt___sva__MotionVecd___gt_____gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt__std__vector__lt__sva__MotionVecd__gt_____gt___Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.Std__vector__lt__std__vector__lt__sva__MotionVecd__gt_____gt__",            /* tp_name */
    sizeof(Pystd__vector__lt__std__vector__lt__sva__MotionVecd__gt_____gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt__std__vector__lt__sva__MotionVecd__gt_____gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt__std__vector__lt__sva__MotionVecd__gt_____gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt__std__vector__lt__sva__MotionVecd__gt_____gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt__std__vector__lt__sva__MotionVecd__gt_____gt__Iter_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.Std__vector__lt__std__vector__lt__sva__MotionVecd__gt_____gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt__std__vector__lt__sva__MotionVecd__gt_____gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt__std__vector__lt__sva__MotionVecd__gt_____gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt__std__vector__lt__sva__MotionVecd__gt_____gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt__std__vector__lt__sva__MotionVecd__gt_____gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt__std__vector__lt__sva__MotionVecd__gt_____gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt__std__vector__lt__sva__MotionVecd__gt_____gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__vector__lt__tasks__qp__FrictionCone__gt__Iter__tp_clear(Pystd__vector__lt__tasks__qp__FrictionCone__gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt__tasks__qp__FrictionCone__gt__Iter__tp_traverse(Pystd__vector__lt__tasks__qp__FrictionCone__gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt__tasks__qp__FrictionCone__gt____tp_dealloc(Pystd__vector__lt__tasks__qp__FrictionCone__gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt__tasks__qp__FrictionCone__gt__Iter__tp_dealloc(Pystd__vector__lt__tasks__qp__FrictionCone__gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt__tasks__qp__FrictionCone__gt____tp_iter(Pystd__vector__lt__tasks__qp__FrictionCone__gt__ *self)
{
    Pystd__vector__lt__tasks__qp__FrictionCone__gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt__tasks__qp__FrictionCone__gt__Iter, &Pystd__vector__lt__tasks__qp__FrictionCone__gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector<tasks::qp::FrictionCone>::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt__tasks__qp__FrictionCone__gt__Iter__tp_iter(Pystd__vector__lt__tasks__qp__FrictionCone__gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt__tasks__qp__FrictionCone__gt__Iter__tp_iternext(Pystd__vector__lt__tasks__qp__FrictionCone__gt__Iter *self)
{
    PyObject *py_retval;
    std::vector<tasks::qp::FrictionCone>::iterator iter;
    PyTasksQpFrictionCone *py_FrictionCone;

    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_FrictionCone = PyObject_New(PyTasksQpFrictionCone, &PyTasksQpFrictionCone_Type);
    py_FrictionCone->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_FrictionCone->obj = new tasks::qp::FrictionCone((*iter));
    py_retval = Py_BuildValue((char *) "N", py_FrictionCone);
    return py_retval;
}

int _wrap_convert_py2c__tasks__qp__FrictionCone(PyObject *value, tasks::qp::FrictionCone *address)
{
    PyObject *py_retval;
    PyTasksQpFrictionCone *tmp_FrictionCone;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyTasksQpFrictionCone_Type, &tmp_FrictionCone)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = *tmp_FrictionCone->obj;
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___tasks__qp__FrictionCone___gt__(PyObject *arg, std::vector<tasks::qp::FrictionCone> *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt__tasks__qp__FrictionCone__gt___Type)) {
        *container = *((Pystd__vector__lt__tasks__qp__FrictionCone__gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            tasks::qp::FrictionCone item;
            if (!_wrap_convert_py2c__tasks__qp__FrictionCone(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt__tasks__qp__FrictionCone__gt__ instance, or a list of tasks::qp::FrictionCone");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt__tasks__qp__FrictionCone__gt____tp_init(Pystd__vector__lt__tasks__qp__FrictionCone__gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector<tasks::qp::FrictionCone>;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___tasks__qp__FrictionCone___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt__tasks__qp__FrictionCone__gt___Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.Std__vector__lt__tasks__qp__FrictionCone__gt__",            /* tp_name */
    sizeof(Pystd__vector__lt__tasks__qp__FrictionCone__gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt__tasks__qp__FrictionCone__gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt__tasks__qp__FrictionCone__gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt__tasks__qp__FrictionCone__gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt__tasks__qp__FrictionCone__gt__Iter_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.Std__vector__lt__tasks__qp__FrictionCone__gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt__tasks__qp__FrictionCone__gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt__tasks__qp__FrictionCone__gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt__tasks__qp__FrictionCone__gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt__tasks__qp__FrictionCone__gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt__tasks__qp__FrictionCone__gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt__tasks__qp__FrictionCone__gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__vector__lt__tasks__qp__UnilateralContact__gt__Iter__tp_clear(Pystd__vector__lt__tasks__qp__UnilateralContact__gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt__tasks__qp__UnilateralContact__gt__Iter__tp_traverse(Pystd__vector__lt__tasks__qp__UnilateralContact__gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt__tasks__qp__UnilateralContact__gt____tp_dealloc(Pystd__vector__lt__tasks__qp__UnilateralContact__gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt__tasks__qp__UnilateralContact__gt__Iter__tp_dealloc(Pystd__vector__lt__tasks__qp__UnilateralContact__gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt__tasks__qp__UnilateralContact__gt____tp_iter(Pystd__vector__lt__tasks__qp__UnilateralContact__gt__ *self)
{
    Pystd__vector__lt__tasks__qp__UnilateralContact__gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt__tasks__qp__UnilateralContact__gt__Iter, &Pystd__vector__lt__tasks__qp__UnilateralContact__gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector<tasks::qp::UnilateralContact>::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt__tasks__qp__UnilateralContact__gt__Iter__tp_iter(Pystd__vector__lt__tasks__qp__UnilateralContact__gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt__tasks__qp__UnilateralContact__gt__Iter__tp_iternext(Pystd__vector__lt__tasks__qp__UnilateralContact__gt__Iter *self)
{
    PyObject *py_retval;
    std::vector<tasks::qp::UnilateralContact>::iterator iter;
    PyTasksQpUnilateralContact *py_UnilateralContact;

    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_UnilateralContact = PyObject_New(PyTasksQpUnilateralContact, &PyTasksQpUnilateralContact_Type);
    py_UnilateralContact->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_UnilateralContact->obj = new tasks::qp::UnilateralContact((*iter));
    py_retval = Py_BuildValue((char *) "N", py_UnilateralContact);
    return py_retval;
}

int _wrap_convert_py2c__tasks__qp__UnilateralContact(PyObject *value, tasks::qp::UnilateralContact *address)
{
    PyObject *py_retval;
    PyTasksQpUnilateralContact *tmp_UnilateralContact;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyTasksQpUnilateralContact_Type, &tmp_UnilateralContact)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = *tmp_UnilateralContact->obj;
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___tasks__qp__UnilateralContact___gt__(PyObject *arg, std::vector<tasks::qp::UnilateralContact> *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt__tasks__qp__UnilateralContact__gt___Type)) {
        *container = *((Pystd__vector__lt__tasks__qp__UnilateralContact__gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            tasks::qp::UnilateralContact item;
            if (!_wrap_convert_py2c__tasks__qp__UnilateralContact(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt__tasks__qp__UnilateralContact__gt__ instance, or a list of tasks::qp::UnilateralContact");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt__tasks__qp__UnilateralContact__gt____tp_init(Pystd__vector__lt__tasks__qp__UnilateralContact__gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector<tasks::qp::UnilateralContact>;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___tasks__qp__UnilateralContact___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt__tasks__qp__UnilateralContact__gt___Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.Std__vector__lt__tasks__qp__UnilateralContact__gt__",            /* tp_name */
    sizeof(Pystd__vector__lt__tasks__qp__UnilateralContact__gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt__tasks__qp__UnilateralContact__gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt__tasks__qp__UnilateralContact__gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt__tasks__qp__UnilateralContact__gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt__tasks__qp__UnilateralContact__gt__Iter_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.Std__vector__lt__tasks__qp__UnilateralContact__gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt__tasks__qp__UnilateralContact__gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt__tasks__qp__UnilateralContact__gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt__tasks__qp__UnilateralContact__gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt__tasks__qp__UnilateralContact__gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt__tasks__qp__UnilateralContact__gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt__tasks__qp__UnilateralContact__gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__vector__lt__tasks__qp__BilateralContact__gt__Iter__tp_clear(Pystd__vector__lt__tasks__qp__BilateralContact__gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt__tasks__qp__BilateralContact__gt__Iter__tp_traverse(Pystd__vector__lt__tasks__qp__BilateralContact__gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt__tasks__qp__BilateralContact__gt____tp_dealloc(Pystd__vector__lt__tasks__qp__BilateralContact__gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt__tasks__qp__BilateralContact__gt__Iter__tp_dealloc(Pystd__vector__lt__tasks__qp__BilateralContact__gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt__tasks__qp__BilateralContact__gt____tp_iter(Pystd__vector__lt__tasks__qp__BilateralContact__gt__ *self)
{
    Pystd__vector__lt__tasks__qp__BilateralContact__gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt__tasks__qp__BilateralContact__gt__Iter, &Pystd__vector__lt__tasks__qp__BilateralContact__gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector<tasks::qp::BilateralContact>::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt__tasks__qp__BilateralContact__gt__Iter__tp_iter(Pystd__vector__lt__tasks__qp__BilateralContact__gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt__tasks__qp__BilateralContact__gt__Iter__tp_iternext(Pystd__vector__lt__tasks__qp__BilateralContact__gt__Iter *self)
{
    PyObject *py_retval;
    std::vector<tasks::qp::BilateralContact>::iterator iter;
    PyTasksQpBilateralContact *py_BilateralContact;

    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_BilateralContact = PyObject_New(PyTasksQpBilateralContact, &PyTasksQpBilateralContact_Type);
    py_BilateralContact->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_BilateralContact->obj = new tasks::qp::BilateralContact((*iter));
    py_retval = Py_BuildValue((char *) "N", py_BilateralContact);
    return py_retval;
}

int _wrap_convert_py2c__tasks__qp__BilateralContact(PyObject *value, tasks::qp::BilateralContact *address)
{
    PyObject *py_retval;
    PyTasksQpBilateralContact *tmp_BilateralContact;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyTasksQpBilateralContact_Type, &tmp_BilateralContact)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = *tmp_BilateralContact->obj;
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___tasks__qp__BilateralContact___gt__(PyObject *arg, std::vector<tasks::qp::BilateralContact> *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt__tasks__qp__BilateralContact__gt___Type)) {
        *container = *((Pystd__vector__lt__tasks__qp__BilateralContact__gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            tasks::qp::BilateralContact item;
            if (!_wrap_convert_py2c__tasks__qp__BilateralContact(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt__tasks__qp__BilateralContact__gt__ instance, or a list of tasks::qp::BilateralContact");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt__tasks__qp__BilateralContact__gt____tp_init(Pystd__vector__lt__tasks__qp__BilateralContact__gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector<tasks::qp::BilateralContact>;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___tasks__qp__BilateralContact___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt__tasks__qp__BilateralContact__gt___Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.Std__vector__lt__tasks__qp__BilateralContact__gt__",            /* tp_name */
    sizeof(Pystd__vector__lt__tasks__qp__BilateralContact__gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt__tasks__qp__BilateralContact__gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt__tasks__qp__BilateralContact__gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt__tasks__qp__BilateralContact__gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt__tasks__qp__BilateralContact__gt__Iter_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.Std__vector__lt__tasks__qp__BilateralContact__gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt__tasks__qp__BilateralContact__gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt__tasks__qp__BilateralContact__gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt__tasks__qp__BilateralContact__gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt__tasks__qp__BilateralContact__gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt__tasks__qp__BilateralContact__gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt__tasks__qp__BilateralContact__gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__vector__lt__tasks__qp__JointStiffness__gt__Iter__tp_clear(Pystd__vector__lt__tasks__qp__JointStiffness__gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt__tasks__qp__JointStiffness__gt__Iter__tp_traverse(Pystd__vector__lt__tasks__qp__JointStiffness__gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt__tasks__qp__JointStiffness__gt____tp_dealloc(Pystd__vector__lt__tasks__qp__JointStiffness__gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt__tasks__qp__JointStiffness__gt__Iter__tp_dealloc(Pystd__vector__lt__tasks__qp__JointStiffness__gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt__tasks__qp__JointStiffness__gt____tp_iter(Pystd__vector__lt__tasks__qp__JointStiffness__gt__ *self)
{
    Pystd__vector__lt__tasks__qp__JointStiffness__gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt__tasks__qp__JointStiffness__gt__Iter, &Pystd__vector__lt__tasks__qp__JointStiffness__gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector<tasks::qp::JointStiffness>::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt__tasks__qp__JointStiffness__gt__Iter__tp_iter(Pystd__vector__lt__tasks__qp__JointStiffness__gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt__tasks__qp__JointStiffness__gt__Iter__tp_iternext(Pystd__vector__lt__tasks__qp__JointStiffness__gt__Iter *self)
{
    PyObject *py_retval;
    std::vector<tasks::qp::JointStiffness>::iterator iter;
    PyTasksQpJointStiffness *py_JointStiffness;

    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_JointStiffness = PyObject_New(PyTasksQpJointStiffness, &PyTasksQpJointStiffness_Type);
    py_JointStiffness->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_JointStiffness->obj = new tasks::qp::JointStiffness((*iter));
    py_retval = Py_BuildValue((char *) "N", py_JointStiffness);
    return py_retval;
}

int _wrap_convert_py2c__tasks__qp__JointStiffness(PyObject *value, tasks::qp::JointStiffness *address)
{
    PyObject *py_retval;
    PyTasksQpJointStiffness *tmp_JointStiffness;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyTasksQpJointStiffness_Type, &tmp_JointStiffness)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = *tmp_JointStiffness->obj;
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___tasks__qp__JointStiffness___gt__(PyObject *arg, std::vector<tasks::qp::JointStiffness> *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt__tasks__qp__JointStiffness__gt___Type)) {
        *container = *((Pystd__vector__lt__tasks__qp__JointStiffness__gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            tasks::qp::JointStiffness item;
            if (!_wrap_convert_py2c__tasks__qp__JointStiffness(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt__tasks__qp__JointStiffness__gt__ instance, or a list of tasks::qp::JointStiffness");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt__tasks__qp__JointStiffness__gt____tp_init(Pystd__vector__lt__tasks__qp__JointStiffness__gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector<tasks::qp::JointStiffness>;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___tasks__qp__JointStiffness___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt__tasks__qp__JointStiffness__gt___Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.Std__vector__lt__tasks__qp__JointStiffness__gt__",            /* tp_name */
    sizeof(Pystd__vector__lt__tasks__qp__JointStiffness__gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt__tasks__qp__JointStiffness__gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt__tasks__qp__JointStiffness__gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt__tasks__qp__JointStiffness__gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt__tasks__qp__JointStiffness__gt__Iter_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.Std__vector__lt__tasks__qp__JointStiffness__gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt__tasks__qp__JointStiffness__gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt__tasks__qp__JointStiffness__gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt__tasks__qp__JointStiffness__gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt__tasks__qp__JointStiffness__gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt__tasks__qp__JointStiffness__gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt__tasks__qp__JointStiffness__gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__vector__lt__tasks__qp__JointGains__gt__Iter__tp_clear(Pystd__vector__lt__tasks__qp__JointGains__gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt__tasks__qp__JointGains__gt__Iter__tp_traverse(Pystd__vector__lt__tasks__qp__JointGains__gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt__tasks__qp__JointGains__gt____tp_dealloc(Pystd__vector__lt__tasks__qp__JointGains__gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt__tasks__qp__JointGains__gt__Iter__tp_dealloc(Pystd__vector__lt__tasks__qp__JointGains__gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt__tasks__qp__JointGains__gt____tp_iter(Pystd__vector__lt__tasks__qp__JointGains__gt__ *self)
{
    Pystd__vector__lt__tasks__qp__JointGains__gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt__tasks__qp__JointGains__gt__Iter, &Pystd__vector__lt__tasks__qp__JointGains__gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector<tasks::qp::JointGains>::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt__tasks__qp__JointGains__gt__Iter__tp_iter(Pystd__vector__lt__tasks__qp__JointGains__gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt__tasks__qp__JointGains__gt__Iter__tp_iternext(Pystd__vector__lt__tasks__qp__JointGains__gt__Iter *self)
{
    PyObject *py_retval;
    std::vector<tasks::qp::JointGains>::iterator iter;
    PyTasksQpJointGains *py_JointGains;

    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_JointGains = PyObject_New(PyTasksQpJointGains, &PyTasksQpJointGains_Type);
    py_JointGains->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_JointGains->obj = new tasks::qp::JointGains((*iter));
    py_retval = Py_BuildValue((char *) "N", py_JointGains);
    return py_retval;
}

int _wrap_convert_py2c__tasks__qp__JointGains(PyObject *value, tasks::qp::JointGains *address)
{
    PyObject *py_retval;
    PyTasksQpJointGains *tmp_JointGains;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyTasksQpJointGains_Type, &tmp_JointGains)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = *tmp_JointGains->obj;
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___tasks__qp__JointGains___gt__(PyObject *arg, std::vector<tasks::qp::JointGains> *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt__tasks__qp__JointGains__gt___Type)) {
        *container = *((Pystd__vector__lt__tasks__qp__JointGains__gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            tasks::qp::JointGains item;
            if (!_wrap_convert_py2c__tasks__qp__JointGains(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt__tasks__qp__JointGains__gt__ instance, or a list of tasks::qp::JointGains");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt__tasks__qp__JointGains__gt____tp_init(Pystd__vector__lt__tasks__qp__JointGains__gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector<tasks::qp::JointGains>;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___tasks__qp__JointGains___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt__tasks__qp__JointGains__gt___Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.Std__vector__lt__tasks__qp__JointGains__gt__",            /* tp_name */
    sizeof(Pystd__vector__lt__tasks__qp__JointGains__gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt__tasks__qp__JointGains__gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt__tasks__qp__JointGains__gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt__tasks__qp__JointGains__gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt__tasks__qp__JointGains__gt__Iter_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.Std__vector__lt__tasks__qp__JointGains__gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt__tasks__qp__JointGains__gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt__tasks__qp__JointGains__gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt__tasks__qp__JointGains__gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt__tasks__qp__JointGains__gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt__tasks__qp__JointGains__gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt__tasks__qp__JointGains__gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__vector__lt__tasks__qp__SpringJoint__gt__Iter__tp_clear(Pystd__vector__lt__tasks__qp__SpringJoint__gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt__tasks__qp__SpringJoint__gt__Iter__tp_traverse(Pystd__vector__lt__tasks__qp__SpringJoint__gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt__tasks__qp__SpringJoint__gt____tp_dealloc(Pystd__vector__lt__tasks__qp__SpringJoint__gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt__tasks__qp__SpringJoint__gt__Iter__tp_dealloc(Pystd__vector__lt__tasks__qp__SpringJoint__gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt__tasks__qp__SpringJoint__gt____tp_iter(Pystd__vector__lt__tasks__qp__SpringJoint__gt__ *self)
{
    Pystd__vector__lt__tasks__qp__SpringJoint__gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt__tasks__qp__SpringJoint__gt__Iter, &Pystd__vector__lt__tasks__qp__SpringJoint__gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector<tasks::qp::SpringJoint>::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt__tasks__qp__SpringJoint__gt__Iter__tp_iter(Pystd__vector__lt__tasks__qp__SpringJoint__gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt__tasks__qp__SpringJoint__gt__Iter__tp_iternext(Pystd__vector__lt__tasks__qp__SpringJoint__gt__Iter *self)
{
    PyObject *py_retval;
    std::vector<tasks::qp::SpringJoint>::iterator iter;
    PyTasksQpSpringJoint *py_SpringJoint;

    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_SpringJoint = PyObject_New(PyTasksQpSpringJoint, &PyTasksQpSpringJoint_Type);
    py_SpringJoint->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_SpringJoint->obj = new tasks::qp::SpringJoint((*iter));
    py_retval = Py_BuildValue((char *) "N", py_SpringJoint);
    return py_retval;
}

int _wrap_convert_py2c__tasks__qp__SpringJoint(PyObject *value, tasks::qp::SpringJoint *address)
{
    PyObject *py_retval;
    PyTasksQpSpringJoint *tmp_SpringJoint;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyTasksQpSpringJoint_Type, &tmp_SpringJoint)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = *tmp_SpringJoint->obj;
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___tasks__qp__SpringJoint___gt__(PyObject *arg, std::vector<tasks::qp::SpringJoint> *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt__tasks__qp__SpringJoint__gt___Type)) {
        *container = *((Pystd__vector__lt__tasks__qp__SpringJoint__gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            tasks::qp::SpringJoint item;
            if (!_wrap_convert_py2c__tasks__qp__SpringJoint(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt__tasks__qp__SpringJoint__gt__ instance, or a list of tasks::qp::SpringJoint");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt__tasks__qp__SpringJoint__gt____tp_init(Pystd__vector__lt__tasks__qp__SpringJoint__gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector<tasks::qp::SpringJoint>;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___tasks__qp__SpringJoint___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt__tasks__qp__SpringJoint__gt___Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.Std__vector__lt__tasks__qp__SpringJoint__gt__",            /* tp_name */
    sizeof(Pystd__vector__lt__tasks__qp__SpringJoint__gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt__tasks__qp__SpringJoint__gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt__tasks__qp__SpringJoint__gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt__tasks__qp__SpringJoint__gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt__tasks__qp__SpringJoint__gt__Iter_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.Std__vector__lt__tasks__qp__SpringJoint__gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt__tasks__qp__SpringJoint__gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt__tasks__qp__SpringJoint__gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt__tasks__qp__SpringJoint__gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt__tasks__qp__SpringJoint__gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt__tasks__qp__SpringJoint__gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt__tasks__qp__SpringJoint__gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__vector__lt__Eigen__Vector3d__gt__Iter__tp_clear(Pystd__vector__lt__Eigen__Vector3d__gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt__Eigen__Vector3d__gt__Iter__tp_traverse(Pystd__vector__lt__Eigen__Vector3d__gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt__Eigen__Vector3d__gt____tp_dealloc(Pystd__vector__lt__Eigen__Vector3d__gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt__Eigen__Vector3d__gt__Iter__tp_dealloc(Pystd__vector__lt__Eigen__Vector3d__gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt__Eigen__Vector3d__gt____tp_iter(Pystd__vector__lt__Eigen__Vector3d__gt__ *self)
{
    Pystd__vector__lt__Eigen__Vector3d__gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt__Eigen__Vector3d__gt__Iter, &Pystd__vector__lt__Eigen__Vector3d__gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector<Eigen::Vector3d>::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt__Eigen__Vector3d__gt__Iter__tp_iter(Pystd__vector__lt__Eigen__Vector3d__gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt__Eigen__Vector3d__gt__Iter__tp_iternext(Pystd__vector__lt__Eigen__Vector3d__gt__Iter *self)
{
    PyObject *py_retval;
    std::vector<Eigen::Vector3d>::iterator iter;
    PyEigenVector3d *py_Vector3d;

    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_Vector3d = PyObject_New(PyEigenVector3d, &PyEigenVector3d_Type);
    py_Vector3d->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Vector3d->obj = new Eigen::Vector3d((*iter));
    py_retval = Py_BuildValue((char *) "N", py_Vector3d);
    return py_retval;
}

int _wrap_convert_py2c__Eigen__Vector3d(PyObject *value, Eigen::Vector3d *address)
{
    PyObject *py_retval;
    PyEigenVector3d *tmp_Vector3d;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyEigenVector3d_Type, &tmp_Vector3d)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = *tmp_Vector3d->obj;
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___Eigen__Vector3d___gt__(PyObject *arg, std::vector<Eigen::Vector3d> *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt__Eigen__Vector3d__gt___Type)) {
        *container = *((Pystd__vector__lt__Eigen__Vector3d__gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            Eigen::Vector3d item;
            if (!_wrap_convert_py2c__Eigen__Vector3d(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt__Eigen__Vector3d__gt__ instance, or a list of Eigen::Vector3d");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt__Eigen__Vector3d__gt____tp_init(Pystd__vector__lt__Eigen__Vector3d__gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector<Eigen::Vector3d>;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___Eigen__Vector3d___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt__Eigen__Vector3d__gt___Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.Std__vector__lt__Eigen__Vector3d__gt__",            /* tp_name */
    sizeof(Pystd__vector__lt__Eigen__Vector3d__gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt__Eigen__Vector3d__gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt__Eigen__Vector3d__gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt__Eigen__Vector3d__gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt__Eigen__Vector3d__gt__Iter_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.Std__vector__lt__Eigen__Vector3d__gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt__Eigen__Vector3d__gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt__Eigen__Vector3d__gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt__Eigen__Vector3d__gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt__Eigen__Vector3d__gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt__Eigen__Vector3d__gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt__Eigen__Vector3d__gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__vector__lt__Eigen__Matrix3d__gt__Iter__tp_clear(Pystd__vector__lt__Eigen__Matrix3d__gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt__Eigen__Matrix3d__gt__Iter__tp_traverse(Pystd__vector__lt__Eigen__Matrix3d__gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt__Eigen__Matrix3d__gt____tp_dealloc(Pystd__vector__lt__Eigen__Matrix3d__gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt__Eigen__Matrix3d__gt__Iter__tp_dealloc(Pystd__vector__lt__Eigen__Matrix3d__gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt__Eigen__Matrix3d__gt____tp_iter(Pystd__vector__lt__Eigen__Matrix3d__gt__ *self)
{
    Pystd__vector__lt__Eigen__Matrix3d__gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt__Eigen__Matrix3d__gt__Iter, &Pystd__vector__lt__Eigen__Matrix3d__gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector<Eigen::Matrix3d>::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt__Eigen__Matrix3d__gt__Iter__tp_iter(Pystd__vector__lt__Eigen__Matrix3d__gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt__Eigen__Matrix3d__gt__Iter__tp_iternext(Pystd__vector__lt__Eigen__Matrix3d__gt__Iter *self)
{
    PyObject *py_retval;
    std::vector<Eigen::Matrix3d>::iterator iter;
    PyEigenMatrix3d *py_Matrix3d;

    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_Matrix3d = PyObject_New(PyEigenMatrix3d, &PyEigenMatrix3d_Type);
    py_Matrix3d->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Matrix3d->obj = new Eigen::Matrix3d((*iter));
    py_retval = Py_BuildValue((char *) "N", py_Matrix3d);
    return py_retval;
}

int _wrap_convert_py2c__Eigen__Matrix3d(PyObject *value, Eigen::Matrix3d *address)
{
    PyObject *py_retval;
    PyEigenMatrix3d *tmp_Matrix3d;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyEigenMatrix3d_Type, &tmp_Matrix3d)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = *tmp_Matrix3d->obj;
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___Eigen__Matrix3d___gt__(PyObject *arg, std::vector<Eigen::Matrix3d> *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt__Eigen__Matrix3d__gt___Type)) {
        *container = *((Pystd__vector__lt__Eigen__Matrix3d__gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            Eigen::Matrix3d item;
            if (!_wrap_convert_py2c__Eigen__Matrix3d(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt__Eigen__Matrix3d__gt__ instance, or a list of Eigen::Matrix3d");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt__Eigen__Matrix3d__gt____tp_init(Pystd__vector__lt__Eigen__Matrix3d__gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector<Eigen::Matrix3d>;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___Eigen__Matrix3d___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt__Eigen__Matrix3d__gt___Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.Std__vector__lt__Eigen__Matrix3d__gt__",            /* tp_name */
    sizeof(Pystd__vector__lt__Eigen__Matrix3d__gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt__Eigen__Matrix3d__gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt__Eigen__Matrix3d__gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt__Eigen__Matrix3d__gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt__Eigen__Matrix3d__gt__Iter_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.Std__vector__lt__Eigen__Matrix3d__gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt__Eigen__Matrix3d__gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt__Eigen__Matrix3d__gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt__Eigen__Matrix3d__gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt__Eigen__Matrix3d__gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt__Eigen__Matrix3d__gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt__Eigen__Matrix3d__gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__vector__lt__Eigen__VectorXd__gt__Iter__tp_clear(Pystd__vector__lt__Eigen__VectorXd__gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt__Eigen__VectorXd__gt__Iter__tp_traverse(Pystd__vector__lt__Eigen__VectorXd__gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt__Eigen__VectorXd__gt____tp_dealloc(Pystd__vector__lt__Eigen__VectorXd__gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt__Eigen__VectorXd__gt__Iter__tp_dealloc(Pystd__vector__lt__Eigen__VectorXd__gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt__Eigen__VectorXd__gt____tp_iter(Pystd__vector__lt__Eigen__VectorXd__gt__ *self)
{
    Pystd__vector__lt__Eigen__VectorXd__gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt__Eigen__VectorXd__gt__Iter, &Pystd__vector__lt__Eigen__VectorXd__gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector<Eigen::VectorXd>::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt__Eigen__VectorXd__gt__Iter__tp_iter(Pystd__vector__lt__Eigen__VectorXd__gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt__Eigen__VectorXd__gt__Iter__tp_iternext(Pystd__vector__lt__Eigen__VectorXd__gt__Iter *self)
{
    PyObject *py_retval;
    std::vector<Eigen::VectorXd>::iterator iter;
    PyEigenVectorXd *py_VectorXd;

    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_VectorXd = PyObject_New(PyEigenVectorXd, &PyEigenVectorXd_Type);
    py_VectorXd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXd->obj = new Eigen::VectorXd((*iter));
    py_retval = Py_BuildValue((char *) "N", py_VectorXd);
    return py_retval;
}

int _wrap_convert_py2c__Eigen__VectorXd(PyObject *value, Eigen::VectorXd *address)
{
    PyObject *py_retval;
    PyEigenVectorXd *tmp_VectorXd;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyEigenVectorXd_Type, &tmp_VectorXd)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = *tmp_VectorXd->obj;
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___Eigen__VectorXd___gt__(PyObject *arg, std::vector<Eigen::VectorXd> *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt__Eigen__VectorXd__gt___Type)) {
        *container = *((Pystd__vector__lt__Eigen__VectorXd__gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            Eigen::VectorXd item;
            if (!_wrap_convert_py2c__Eigen__VectorXd(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt__Eigen__VectorXd__gt__ instance, or a list of Eigen::VectorXd");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt__Eigen__VectorXd__gt____tp_init(Pystd__vector__lt__Eigen__VectorXd__gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector<Eigen::VectorXd>;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___Eigen__VectorXd___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt__Eigen__VectorXd__gt___Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.Std__vector__lt__Eigen__VectorXd__gt__",            /* tp_name */
    sizeof(Pystd__vector__lt__Eigen__VectorXd__gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt__Eigen__VectorXd__gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt__Eigen__VectorXd__gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt__Eigen__VectorXd__gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt__Eigen__VectorXd__gt__Iter_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.Std__vector__lt__Eigen__VectorXd__gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt__Eigen__VectorXd__gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt__Eigen__VectorXd__gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt__Eigen__VectorXd__gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt__Eigen__VectorXd__gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt__Eigen__VectorXd__gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt__Eigen__VectorXd__gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt__Iter__tp_clear(Pystd__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt__Iter__tp_traverse(Pystd__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt____tp_dealloc(Pystd__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt__Iter__tp_dealloc(Pystd__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt____tp_iter(Pystd__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt__ *self)
{
    Pystd__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt__Iter, &Pystd__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector<std::vector<Eigen::VectorXd> >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt__Iter__tp_iter(Pystd__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt__Iter__tp_iternext(Pystd__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt__Iter *self)
{
    PyObject *py_retval;
    std::vector<std::vector<Eigen::VectorXd> >::iterator iter;
    Pystd__vector__lt__Eigen__VectorXd__gt__ *py_std__vector__lt__Eigen__VectorXd__gt__;

    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_std__vector__lt__Eigen__VectorXd__gt__ = PyObject_New(Pystd__vector__lt__Eigen__VectorXd__gt__, &Pystd__vector__lt__Eigen__VectorXd__gt___Type);
    py_std__vector__lt__Eigen__VectorXd__gt__->obj = new std::vector<Eigen::VectorXd>((*iter));
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt__Eigen__VectorXd__gt__);
    return py_retval;
}

int _wrap_convert_py2c__std__vector__lt___std__vector__lt___Eigen__VectorXd___gt_____gt__(PyObject *arg, std::vector<std::vector<Eigen::VectorXd> > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt___Type)) {
        *container = *((Pystd__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            std::vector< Eigen::VectorXd > item;
            if (!_wrap_convert_py2c__std__vector__lt___Eigen__VectorXd___gt__(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt__ instance, or a list of std::vector< Eigen::VectorXd >");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt____tp_init(Pystd__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector<std::vector<Eigen::VectorXd> >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___std__vector__lt___Eigen__VectorXd___gt_____gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt___Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.Std__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt__",            /* tp_name */
    sizeof(Pystd__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt__Iter_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "_tasks.Std__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};


/* --- exceptions --- */


PyTypeObject *Py___std__domain_error_Type;


PyTypeObject *Py___std__out_of_range_Type;



PyMODINIT_FUNC
#if defined(__GNUC__) && __GNUC__ >= 4
__attribute__ ((visibility("default")))
#endif
init_tasks(void)
{
    PyObject *m;
    PyObject *submodule;
    m = Py_InitModule3((char *) "_tasks", _tasks_functions, NULL);
    if (m == NULL) {
        return;
    }
    /* Import the 'Eigen::Vector2d' class from module 'eigen3' */
    {
        PyObject *module = PyImport_ImportModule((char*) "eigen3");
        if (module == NULL) {
            return ;
        }
        _PyEigenVector2d_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Vector2d");

        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'Eigen::Vector3d' class from module 'eigen3' */
    {
        PyObject *module = PyImport_ImportModule((char*) "eigen3");
        if (module == NULL) {
            return ;
        }
        _PyEigenVector3d_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Vector3d");

        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'Eigen::Vector6d' class from module 'eigen3' */
    {
        PyObject *module = PyImport_ImportModule((char*) "eigen3");
        if (module == NULL) {
            return ;
        }
        _PyEigenVector6d_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Vector6d");

        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'Eigen::Matrix3d' class from module 'eigen3' */
    {
        PyObject *module = PyImport_ImportModule((char*) "eigen3");
        if (module == NULL) {
            return ;
        }
        _PyEigenMatrix3d_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Matrix3d");

        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'Eigen::Matrix6d' class from module 'eigen3' */
    {
        PyObject *module = PyImport_ImportModule((char*) "eigen3");
        if (module == NULL) {
            return ;
        }
        _PyEigenMatrix6d_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Matrix6d");

        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'Eigen::MatrixXd' class from module 'eigen3' */
    {
        PyObject *module = PyImport_ImportModule((char*) "eigen3");
        if (module == NULL) {
            return ;
        }
        _PyEigenMatrixXd_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "MatrixXd");

        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'Eigen::VectorXd' class from module 'eigen3' */
    {
        PyObject *module = PyImport_ImportModule((char*) "eigen3");
        if (module == NULL) {
            return ;
        }
        _PyEigenVectorXd_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "VectorXd");

        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'Eigen::Quaterniond' class from module 'eigen3' */
    {
        PyObject *module = PyImport_ImportModule((char*) "eigen3");
        if (module == NULL) {
            return ;
        }
        _PyEigenQuaterniond_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Quaterniond");

        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'sva::MotionVecd' class from module 'spacevecalg' */
    {
        PyObject *module = PyImport_ImportModule((char*) "spacevecalg");
        if (module == NULL) {
            return ;
        }
        _PySvaMotionVecd_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "MotionVecd");

        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'sva::ForceVecd' class from module 'spacevecalg' */
    {
        PyObject *module = PyImport_ImportModule((char*) "spacevecalg");
        if (module == NULL) {
            return ;
        }
        _PySvaForceVecd_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ForceVecd");

        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'sva::RBInertiad' class from module 'spacevecalg' */
    {
        PyObject *module = PyImport_ImportModule((char*) "spacevecalg");
        if (module == NULL) {
            return ;
        }
        _PySvaRBInertiad_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "RBInertiad");

        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'sva::ABInertiad' class from module 'spacevecalg' */
    {
        PyObject *module = PyImport_ImportModule((char*) "spacevecalg");
        if (module == NULL) {
            return ;
        }
        _PySvaABInertiad_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ABInertiad");

        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'sva::PTransformd' class from module 'spacevecalg' */
    {
        PyObject *module = PyImport_ImportModule((char*) "spacevecalg");
        if (module == NULL) {
            return ;
        }
        _PySvaPTransformd_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "PTransformd");

        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'rbd::Body' class from module 'rbdyn' */
    {
        PyObject *module = PyImport_ImportModule((char*) "rbdyn");
        if (module == NULL) {
            return ;
        }
        _PyRbdBody_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Body");

        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'rbd::Joint' class from module 'rbdyn' */
    {
        PyObject *module = PyImport_ImportModule((char*) "rbdyn");
        if (module == NULL) {
            return ;
        }
        _PyRbdJoint_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Joint");

        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'rbd::MultiBody' class from module 'rbdyn' */
    {
        PyObject *module = PyImport_ImportModule((char*) "rbdyn");
        if (module == NULL) {
            return ;
        }
        _PyRbdMultiBody_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "MultiBody");

        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'rbd::MultiBodyConfig' class from module 'rbdyn' */
    {
        PyObject *module = PyImport_ImportModule((char*) "rbdyn");
        if (module == NULL) {
            return ;
        }
        _PyRbdMultiBodyConfig_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "MultiBodyConfig");

        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'rbd::Jacobian' class from module 'rbdyn' */
    {
        PyObject *module = PyImport_ImportModule((char*) "rbdyn");
        if (module == NULL) {
            return ;
        }
        _PyRbdJacobian_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Jacobian");

        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'rbd::CoMJacobianDummy' class from module 'rbdyn' */
    {
        PyObject *module = PyImport_ImportModule((char*) "rbdyn");
        if (module == NULL) {
            return ;
        }
        _PyRbdCoMJacobianDummy_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "CoMJacobianDummy");

        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'rbd::ForwardDynamics' class from module 'rbdyn' */
    {
        PyObject *module = PyImport_ImportModule((char*) "rbdyn");
        if (module == NULL) {
            return ;
        }
        _PyRbdForwardDynamics_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ForwardDynamics");

        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'sch::S_Object' class from module 'sch' */
    {
        PyObject *module = PyImport_ImportModule((char*) "sch");
        if (module == NULL) {
            return ;
        }
        _PySchS_Object_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "S_Object");

        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'sch::CD_Pair' class from module 'sch' */
    {
        PyObject *module = PyImport_ImportModule((char*) "sch");
        if (module == NULL) {
            return ;
        }
        _PySchCD_Pair_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "CD_Pair");

        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Register the 'boost::timer::cpu_times' class */
    if (PyType_Ready(&PyBoostTimerCpu_times_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "cpu_times", (PyObject *) &PyBoostTimerCpu_times_Type);
    /* Register the 'tasks::PositionTask' class */
    if (PyType_Ready(&PyTasksPositionTask_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "PositionTask", (PyObject *) &PyTasksPositionTask_Type);
    /* Register the 'tasks::OrientationTask' class */
    if (PyType_Ready(&PyTasksOrientationTask_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "OrientationTask", (PyObject *) &PyTasksOrientationTask_Type);
    /* Register the 'tasks::SurfaceOrientationTask' class */
    if (PyType_Ready(&PyTasksSurfaceOrientationTask_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SurfaceOrientationTask", (PyObject *) &PyTasksSurfaceOrientationTask_Type);
    /* Register the 'tasks::GazeTask' class */
    if (PyType_Ready(&PyTasksGazeTask_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "GazeTask", (PyObject *) &PyTasksGazeTask_Type);
    /* Register the 'tasks::PositionBasedVisServoTask' class */
    if (PyType_Ready(&PyTasksPositionBasedVisServoTask_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "PositionBasedVisServoTask", (PyObject *) &PyTasksPositionBasedVisServoTask_Type);
    /* Register the 'tasks::PostureTask' class */
    if (PyType_Ready(&PyTasksPostureTask_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "PostureTask", (PyObject *) &PyTasksPostureTask_Type);
    /* Register the 'tasks::CoMTask' class */
    if (PyType_Ready(&PyTasksCoMTask_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "CoMTask", (PyObject *) &PyTasksCoMTask_Type);
    /* Register the 'tasks::MultiCoMTask' class */
    if (PyType_Ready(&PyTasksMultiCoMTask_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "MultiCoMTask", (PyObject *) &PyTasksMultiCoMTask_Type);
    /* Register the 'tasks::MomentumTask' class */
    if (PyType_Ready(&PyTasksMomentumTask_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "MomentumTask", (PyObject *) &PyTasksMomentumTask_Type);
    /* Register the 'tasks::LinVelocityTask' class */
    if (PyType_Ready(&PyTasksLinVelocityTask_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "LinVelocityTask", (PyObject *) &PyTasksLinVelocityTask_Type);
    /* Register the 'tasks::OrientationTrackingTask' class */
    if (PyType_Ready(&PyTasksOrientationTrackingTask_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "OrientationTrackingTask", (PyObject *) &PyTasksOrientationTrackingTask_Type);
    /* Register the 'tasks::MultiRobotTransformTask' class */
    if (PyType_Ready(&PyTasksMultiRobotTransformTask_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "MultiRobotTransformTask", (PyObject *) &PyTasksMultiRobotTransformTask_Type);
    /* Register the 'tasks::TransformTask' class */
    if (PyType_Ready(&PyTasksTransformTask_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "TransformTask", (PyObject *) &PyTasksTransformTask_Type);
    /* Register the 'tasks::SurfaceTransformTask' class */
    if (PyType_Ready(&PyTasksSurfaceTransformTask_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SurfaceTransformTask", (PyObject *) &PyTasksSurfaceTransformTask_Type);
    /* Register the 'tasks::RelativeDistTask' class */
    if (PyType_Ready(&PyTasksRelativeDistTask_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "RelativeDistTask", (PyObject *) &PyTasksRelativeDistTask_Type);
    /* Register the 'tasks::VectorOrientationTask' class */
    if (PyType_Ready(&PyTasksVectorOrientationTask_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "VectorOrientationTask", (PyObject *) &PyTasksVectorOrientationTask_Type);
    /* Register the 'tasks::RelativeDistTask::rbInfo' class */
    if (PyType_Ready(&PyTasksRelativeDistTaskRbInfo_Type)) {
        return;
    }
    PyDict_SetItemString((PyObject*) PyTasksRelativeDistTask_Type.tp_dict, (char *) "rbInfo", (PyObject *) &PyTasksRelativeDistTaskRbInfo_Type);
    /* Register the 'tasks::QBound' class */
    if (PyType_Ready(&PyTasksQBound_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "QBound", (PyObject *) &PyTasksQBound_Type);
    /* Register the 'tasks::AlphaBound' class */
    if (PyType_Ready(&PyTasksAlphaBound_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "AlphaBound", (PyObject *) &PyTasksAlphaBound_Type);
    /* Register the 'tasks::TorqueBound' class */
    if (PyType_Ready(&PyTasksTorqueBound_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "TorqueBound", (PyObject *) &PyTasksTorqueBound_Type);
    /* Register the 'tasks::PolyTorqueBound' class */
    if (PyType_Ready(&PyTasksPolyTorqueBound_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "PolyTorqueBound", (PyObject *) &PyTasksPolyTorqueBound_Type);
    /* Register the 'std::vector<int>' class */
    if (PyType_Ready(&Pystd__vector__lt__int__gt___Type)) {
        return;
    }
    if (PyType_Ready(&Pystd__vector__lt__int__gt__Iter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt__int__gt__", (PyObject *) &Pystd__vector__lt__int__gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt__int__gt__Iter", (PyObject *) &Pystd__vector__lt__int__gt__Iter_Type);
    /* Register the 'std::vector<std::string>' class */
    if (PyType_Ready(&Pystd__vector__lt__std__string__gt___Type)) {
        return;
    }
    if (PyType_Ready(&Pystd__vector__lt__std__string__gt__Iter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt__std__string__gt__", (PyObject *) &Pystd__vector__lt__std__string__gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt__std__string__gt__Iter", (PyObject *) &Pystd__vector__lt__std__string__gt__Iter_Type);
    /* Register the 'std::vector<double>' class */
    if (PyType_Ready(&Pystd__vector__lt__double__gt___Type)) {
        return;
    }
    if (PyType_Ready(&Pystd__vector__lt__double__gt__Iter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt__double__gt__", (PyObject *) &Pystd__vector__lt__double__gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt__double__gt__Iter", (PyObject *) &Pystd__vector__lt__double__gt__Iter_Type);
    /* Register the 'std::vector<std::vector<double> >' class */
    if (PyType_Ready(&Pystd__vector__lt__std__vector__lt__double__gt_____gt___Type)) {
        return;
    }
    if (PyType_Ready(&Pystd__vector__lt__std__vector__lt__double__gt_____gt__Iter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt__std__vector__lt__double__gt_____gt__", (PyObject *) &Pystd__vector__lt__std__vector__lt__double__gt_____gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt__std__vector__lt__double__gt_____gt__Iter", (PyObject *) &Pystd__vector__lt__std__vector__lt__double__gt_____gt__Iter_Type);
    /* Register the 'std::vector<rbd::MultiBody>' class */
    if (PyType_Ready(&Pystd__vector__lt__rbd__MultiBody__gt___Type)) {
        return;
    }
    if (PyType_Ready(&Pystd__vector__lt__rbd__MultiBody__gt__Iter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt__rbd__MultiBody__gt__", (PyObject *) &Pystd__vector__lt__rbd__MultiBody__gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt__rbd__MultiBody__gt__Iter", (PyObject *) &Pystd__vector__lt__rbd__MultiBody__gt__Iter_Type);
    /* Register the 'std::vector<rbd::MultiBodyConfig>' class */
    if (PyType_Ready(&Pystd__vector__lt__rbd__MultiBodyConfig__gt___Type)) {
        return;
    }
    if (PyType_Ready(&Pystd__vector__lt__rbd__MultiBodyConfig__gt__Iter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt__rbd__MultiBodyConfig__gt__", (PyObject *) &Pystd__vector__lt__rbd__MultiBodyConfig__gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt__rbd__MultiBodyConfig__gt__Iter", (PyObject *) &Pystd__vector__lt__rbd__MultiBodyConfig__gt__Iter_Type);
    /* Register the 'std::vector<sva::MotionVecd>' class */
    if (PyType_Ready(&Pystd__vector__lt__sva__MotionVecd__gt___Type)) {
        return;
    }
    if (PyType_Ready(&Pystd__vector__lt__sva__MotionVecd__gt__Iter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt__sva__MotionVecd__gt__", (PyObject *) &Pystd__vector__lt__sva__MotionVecd__gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt__sva__MotionVecd__gt__Iter", (PyObject *) &Pystd__vector__lt__sva__MotionVecd__gt__Iter_Type);
    /* Register the 'std::vector<std::vector<sva::MotionVecd> >' class */
    if (PyType_Ready(&Pystd__vector__lt__std__vector__lt__sva__MotionVecd__gt_____gt___Type)) {
        return;
    }
    if (PyType_Ready(&Pystd__vector__lt__std__vector__lt__sva__MotionVecd__gt_____gt__Iter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt__std__vector__lt__sva__MotionVecd__gt_____gt__", (PyObject *) &Pystd__vector__lt__std__vector__lt__sva__MotionVecd__gt_____gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt__std__vector__lt__sva__MotionVecd__gt_____gt__Iter", (PyObject *) &Pystd__vector__lt__std__vector__lt__sva__MotionVecd__gt_____gt__Iter_Type);
    /* Register the 'std::vector<tasks::qp::FrictionCone>' class */
    if (PyType_Ready(&Pystd__vector__lt__tasks__qp__FrictionCone__gt___Type)) {
        return;
    }
    if (PyType_Ready(&Pystd__vector__lt__tasks__qp__FrictionCone__gt__Iter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt__tasks__qp__FrictionCone__gt__", (PyObject *) &Pystd__vector__lt__tasks__qp__FrictionCone__gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt__tasks__qp__FrictionCone__gt__Iter", (PyObject *) &Pystd__vector__lt__tasks__qp__FrictionCone__gt__Iter_Type);
    /* Register the 'std::vector<tasks::qp::UnilateralContact>' class */
    if (PyType_Ready(&Pystd__vector__lt__tasks__qp__UnilateralContact__gt___Type)) {
        return;
    }
    if (PyType_Ready(&Pystd__vector__lt__tasks__qp__UnilateralContact__gt__Iter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt__tasks__qp__UnilateralContact__gt__", (PyObject *) &Pystd__vector__lt__tasks__qp__UnilateralContact__gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt__tasks__qp__UnilateralContact__gt__Iter", (PyObject *) &Pystd__vector__lt__tasks__qp__UnilateralContact__gt__Iter_Type);
    /* Register the 'std::vector<tasks::qp::BilateralContact>' class */
    if (PyType_Ready(&Pystd__vector__lt__tasks__qp__BilateralContact__gt___Type)) {
        return;
    }
    if (PyType_Ready(&Pystd__vector__lt__tasks__qp__BilateralContact__gt__Iter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt__tasks__qp__BilateralContact__gt__", (PyObject *) &Pystd__vector__lt__tasks__qp__BilateralContact__gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt__tasks__qp__BilateralContact__gt__Iter", (PyObject *) &Pystd__vector__lt__tasks__qp__BilateralContact__gt__Iter_Type);
    /* Register the 'std::vector<tasks::qp::JointStiffness>' class */
    if (PyType_Ready(&Pystd__vector__lt__tasks__qp__JointStiffness__gt___Type)) {
        return;
    }
    if (PyType_Ready(&Pystd__vector__lt__tasks__qp__JointStiffness__gt__Iter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt__tasks__qp__JointStiffness__gt__", (PyObject *) &Pystd__vector__lt__tasks__qp__JointStiffness__gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt__tasks__qp__JointStiffness__gt__Iter", (PyObject *) &Pystd__vector__lt__tasks__qp__JointStiffness__gt__Iter_Type);
    /* Register the 'std::vector<tasks::qp::JointGains>' class */
    if (PyType_Ready(&Pystd__vector__lt__tasks__qp__JointGains__gt___Type)) {
        return;
    }
    if (PyType_Ready(&Pystd__vector__lt__tasks__qp__JointGains__gt__Iter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt__tasks__qp__JointGains__gt__", (PyObject *) &Pystd__vector__lt__tasks__qp__JointGains__gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt__tasks__qp__JointGains__gt__Iter", (PyObject *) &Pystd__vector__lt__tasks__qp__JointGains__gt__Iter_Type);
    /* Register the 'std::vector<tasks::qp::SpringJoint>' class */
    if (PyType_Ready(&Pystd__vector__lt__tasks__qp__SpringJoint__gt___Type)) {
        return;
    }
    if (PyType_Ready(&Pystd__vector__lt__tasks__qp__SpringJoint__gt__Iter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt__tasks__qp__SpringJoint__gt__", (PyObject *) &Pystd__vector__lt__tasks__qp__SpringJoint__gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt__tasks__qp__SpringJoint__gt__Iter", (PyObject *) &Pystd__vector__lt__tasks__qp__SpringJoint__gt__Iter_Type);
    /* Register the 'std::vector<Eigen::Vector3d>' class */
    if (PyType_Ready(&Pystd__vector__lt__Eigen__Vector3d__gt___Type)) {
        return;
    }
    if (PyType_Ready(&Pystd__vector__lt__Eigen__Vector3d__gt__Iter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt__Eigen__Vector3d__gt__", (PyObject *) &Pystd__vector__lt__Eigen__Vector3d__gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt__Eigen__Vector3d__gt__Iter", (PyObject *) &Pystd__vector__lt__Eigen__Vector3d__gt__Iter_Type);
    /* Register the 'std::vector<Eigen::Matrix3d>' class */
    if (PyType_Ready(&Pystd__vector__lt__Eigen__Matrix3d__gt___Type)) {
        return;
    }
    if (PyType_Ready(&Pystd__vector__lt__Eigen__Matrix3d__gt__Iter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt__Eigen__Matrix3d__gt__", (PyObject *) &Pystd__vector__lt__Eigen__Matrix3d__gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt__Eigen__Matrix3d__gt__Iter", (PyObject *) &Pystd__vector__lt__Eigen__Matrix3d__gt__Iter_Type);
    /* Register the 'std::vector<Eigen::VectorXd>' class */
    if (PyType_Ready(&Pystd__vector__lt__Eigen__VectorXd__gt___Type)) {
        return;
    }
    if (PyType_Ready(&Pystd__vector__lt__Eigen__VectorXd__gt__Iter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt__Eigen__VectorXd__gt__", (PyObject *) &Pystd__vector__lt__Eigen__VectorXd__gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt__Eigen__VectorXd__gt__Iter", (PyObject *) &Pystd__vector__lt__Eigen__VectorXd__gt__Iter_Type);
    /* Register the 'std::vector<std::vector<Eigen::VectorXd> >' class */
    if (PyType_Ready(&Pystd__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt___Type)) {
        return;
    }
    if (PyType_Ready(&Pystd__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt__Iter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt__", (PyObject *) &Pystd__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt__Iter", (PyObject *) &Pystd__vector__lt__std__vector__lt__Eigen__VectorXd__gt_____gt__Iter_Type);
    /* Register the ' ::std::domain_error' exception */
    if ((Py___std__domain_error_Type = (PyTypeObject*) PyErr_NewException((char*)"_tasks.std::domain_error", NULL, NULL)) == NULL) {
        return;
    }
    Py_INCREF((PyObject *) Py___std__domain_error_Type);
    PyModule_AddObject(m, (char *) "std::domain_error", (PyObject *) Py___std__domain_error_Type);
    /* Register the ' ::std::out_of_range' exception */
    if ((Py___std__out_of_range_Type = (PyTypeObject*) PyErr_NewException((char*)"_tasks.std::out_of_range", NULL, NULL)) == NULL) {
        return;
    }
    Py_INCREF((PyObject *) Py___std__out_of_range_Type);
    PyModule_AddObject(m, (char *) "std::out_of_range", (PyObject *) Py___std__out_of_range_Type);
    submodule = init_tasks_qp();
    if (submodule == NULL) {
        return;
    }
    Py_INCREF(submodule);
    PyModule_AddObject(m, (char *) "qp", submodule);
}
