<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>Bounds.h</name>
    <path>/home/icubuser/mc/install/Tasks/src/</path>
    <filename>a00101</filename>
    <class kind="struct">tasks::QBound</class>
    <class kind="struct">tasks::AlphaBound</class>
    <class kind="struct">tasks::TorqueBound</class>
    <class kind="struct">tasks::PolyTorqueBound</class>
    <namespace>tasks</namespace>
  </compound>
  <compound kind="file">
    <name>GenQPSolver.h</name>
    <path>/home/icubuser/mc/install/Tasks/src/</path>
    <filename>a00102</filename>
    <class kind="class">tasks::qp::GenQPSolver</class>
    <namespace>rbd</namespace>
    <namespace>tasks</namespace>
    <namespace>tasks::qp</namespace>
    <member kind="function">
      <type>TASKS_DLLAPI GenQPSolver *</type>
      <name>createQPSolver</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>aada2800b4fa88d085376a20b1105b87e</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GenQPUtils.h</name>
    <path>/home/icubuser/mc/install/Tasks/src/</path>
    <filename>a00103</filename>
    <includes id="a00110" name="QPSolver.h" local="yes" imported="no">QPSolver.h</includes>
    <namespace>tasks</namespace>
    <namespace>tasks::qp</namespace>
    <member kind="function">
      <type>void</type>
      <name>fillQC</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a3acd478a67503f59d9247a42d049ccab</anchor>
      <arglist>(const std::vector&lt; Task * &gt; &amp;tasks, int nrVars, Eigen::MatrixXd &amp;Q, Eigen::VectorXd &amp;C)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fillEq</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a483f5734b17b8c4500a85814c867ebc9</anchor>
      <arglist>(const std::vector&lt; Equality * &gt; &amp;eq, int nrVars, int nrALines, Eigen::MatrixXd &amp;A, Eigen::VectorXd &amp;AL, Eigen::VectorXd &amp;AU)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fillInEq</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a77e5a5962c21c03aeda39abeeb516912</anchor>
      <arglist>(const std::vector&lt; Inequality * &gt; &amp;inEq, int nrVars, int nrALines, Eigen::MatrixXd &amp;A, Eigen::VectorXd &amp;AL, Eigen::VectorXd &amp;AU)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fillGenInEq</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>aab329f620a78124fb5d860881f293835</anchor>
      <arglist>(const std::vector&lt; GenInequality * &gt; &amp;genInEq, int nrVars, int nrALines, Eigen::MatrixXd &amp;A, Eigen::VectorXd &amp;AL, Eigen::VectorXd &amp;AU)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fillEq</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a4af6028d8957e20c500d0bb31a2b9231</anchor>
      <arglist>(const std::vector&lt; Equality * &gt; &amp;eq, int nrVars, int nrALines, Eigen::MatrixXd &amp;A, Eigen::VectorXd &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fillInEq</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a5f31965982894310938eeee89933c06f</anchor>
      <arglist>(const std::vector&lt; Inequality * &gt; &amp;inEq, int nrVars, int nrALines, Eigen::MatrixXd &amp;A, Eigen::VectorXd &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fillGenInEq</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a0194ab22689c282d9e6205c973bce141</anchor>
      <arglist>(const std::vector&lt; GenInequality * &gt; &amp;genInEq, int nrVars, int nrALines, Eigen::MatrixXd &amp;A, Eigen::VectorXd &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillBound</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>aca70e0c2bf7e2fe95b1817865ae65bd8</anchor>
      <arglist>(const std::vector&lt; Bound * &gt; &amp;bounds, Eigen::VectorXd &amp;XL, Eigen::VectorXd &amp;XU)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printConstr</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a65d9ff284da05686474a0fb01276bbce</anchor>
      <arglist>(const Eigen::VectorXd &amp;result, T *constr, int line, std::ostream &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printConstr</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a9694a15e3e5b744843aa6dae4fa134da</anchor>
      <arglist>(const Eigen::VectorXd &amp;result, Equality *constr, int line, std::ostream &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printConstr</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>abda68512c902b700787e7eea478cd71a</anchor>
      <arglist>(const Eigen::VectorXd &amp;result, Inequality *constr, int line, std::ostream &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printConstr</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a92dd7d7ce7ea80e3cf096e82061d0b66</anchor>
      <arglist>(const Eigen::VectorXd &amp;result, GenInequality *constr, int line, std::ostream &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>constrErrorMsg</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a1d2dfd5d6e03be7321854fb1e2bc32df</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const Eigen::VectorXd &amp;result, int ALine, const std::vector&lt; T * &gt; &amp;constr, int &amp;start, int &amp;end, std::ostream &amp;out)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>DIAG_CONSTANT</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a31e12b1cde7cfcf43f25004aab165bb3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LSSOLQPSolver.h</name>
    <path>/home/icubuser/mc/install/Tasks/src/</path>
    <filename>a00104</filename>
    <includes id="a00102" name="GenQPSolver.h" local="yes" imported="no">GenQPSolver.h</includes>
    <class kind="class">tasks::qp::LSSOLQPSolver</class>
    <namespace>tasks</namespace>
    <namespace>tasks::qp</namespace>
  </compound>
  <compound kind="file">
    <name>QLDQPSolver.h</name>
    <path>/home/icubuser/mc/install/Tasks/src/</path>
    <filename>a00105</filename>
    <includes id="a00102" name="GenQPSolver.h" local="yes" imported="no">GenQPSolver.h</includes>
    <class kind="class">tasks::qp::QLDQPSolver</class>
    <namespace>tasks</namespace>
    <namespace>tasks::qp</namespace>
  </compound>
  <compound kind="file">
    <name>QPConstr.h</name>
    <path>/home/icubuser/mc/install/Tasks/src/</path>
    <filename>a00106</filename>
    <includes id="a00110" name="QPSolver.h" local="yes" imported="no">QPSolver.h</includes>
    <class kind="class">tasks::qp::JointLimitsConstr</class>
    <class kind="class">tasks::qp::DamperJointLimitsConstr</class>
    <class kind="class">tasks::qp::CollisionConstr</class>
    <class kind="class">tasks::qp::CoMIncPlaneConstr</class>
    <class kind="class">tasks::qp::GripperTorqueConstr</class>
    <class kind="class">tasks::qp::BoundedSpeedConstr</class>
    <class kind="class">tasks::qp::ImageConstr</class>
    <class kind="class">tasks::qp::JointAccConstr</class>
    <class kind="class">tasks::qp::LambdaConstr</class>
    <namespace>sch</namespace>
    <namespace>tasks</namespace>
    <namespace>tasks::qp</namespace>
    <member kind="function">
      <type>TASKS_DLLAPI sch::Matrix4x4</type>
      <name>tosch</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a2887fd65f669f54a2aaaa911c724a089</anchor>
      <arglist>(const sva::PTransformd &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>QPContactConstr.h</name>
    <path>/home/icubuser/mc/install/Tasks/src/</path>
    <filename>a00107</filename>
    <includes id="a00110" name="QPSolver.h" local="yes" imported="no">QPSolver.h</includes>
    <class kind="class">tasks::qp::ContactConstrCommon</class>
    <class kind="struct">tasks::qp::ContactConstrCommon::ContactCommon</class>
    <class kind="class">tasks::qp::ContactConstr</class>
    <class kind="struct">tasks::qp::ContactConstr::ContactSideData</class>
    <class kind="struct">tasks::qp::ContactConstr::ContactData</class>
    <class kind="class">tasks::qp::ContactAccConstr</class>
    <class kind="class">tasks::qp::ContactSpeedConstr</class>
    <class kind="class">tasks::qp::ContactPosConstr</class>
    <namespace>tasks</namespace>
    <namespace>tasks::qp</namespace>
  </compound>
  <compound kind="file">
    <name>QPContacts.h</name>
    <path>/home/icubuser/mc/install/Tasks/src/</path>
    <filename>a00108</filename>
    <class kind="struct">tasks::qp::FrictionCone</class>
    <class kind="struct">tasks::qp::ContactId</class>
    <class kind="struct">tasks::qp::UnilateralContact</class>
    <class kind="struct">tasks::qp::BilateralContact</class>
    <namespace>tasks</namespace>
    <namespace>tasks::qp</namespace>
  </compound>
  <compound kind="file">
    <name>QPMotionConstr.h</name>
    <path>/home/icubuser/mc/install/Tasks/src/</path>
    <filename>a00109</filename>
    <includes id="a00110" name="QPSolver.h" local="yes" imported="no">QPSolver.h</includes>
    <class kind="class">tasks::qp::PositiveLambda</class>
    <class kind="class">tasks::qp::MotionConstrCommon</class>
    <class kind="struct">tasks::qp::MotionConstrCommon::ContactData</class>
    <class kind="class">tasks::qp::MotionConstr</class>
    <class kind="struct">tasks::qp::SpringJoint</class>
    <class kind="class">tasks::qp::MotionSpringConstr</class>
    <class kind="struct">tasks::qp::MotionSpringConstr::SpringJointData</class>
    <class kind="class">tasks::qp::MotionPolyConstr</class>
    <namespace>tasks</namespace>
    <namespace>tasks::qp</namespace>
  </compound>
  <compound kind="file">
    <name>QPSolver.h</name>
    <path>/home/icubuser/mc/install/Tasks/src/</path>
    <filename>a00110</filename>
    <includes id="a00111" name="QPSolverData.h" local="yes" imported="no">QPSolverData.h</includes>
    <includes id="a00108" name="QPContacts.h" local="yes" imported="no">QPContacts.h</includes>
    <class kind="class">tasks::qp::QPSolver</class>
    <class kind="class">tasks::qp::Constraint</class>
    <class kind="class">tasks::qp::ConstraintFunction</class>
    <class kind="class">tasks::qp::Equality</class>
    <class kind="class">tasks::qp::Inequality</class>
    <class kind="class">tasks::qp::GenInequality</class>
    <class kind="class">tasks::qp::Bound</class>
    <class kind="class">tasks::qp::Task</class>
    <class kind="class">tasks::qp::HighLevelTask</class>
    <class kind="struct">tasks::qp::constr_traits</class>
    <class kind="struct">tasks::qp::constr_traits&lt; Equality &gt;</class>
    <class kind="struct">tasks::qp::constr_traits&lt; Inequality &gt;</class>
    <class kind="struct">tasks::qp::constr_traits&lt; GenInequality &gt;</class>
    <namespace>rbd</namespace>
    <namespace>tasks</namespace>
    <namespace>tasks::qp</namespace>
  </compound>
  <compound kind="file">
    <name>QPSolverData.h</name>
    <path>/home/icubuser/mc/install/Tasks/src/</path>
    <filename>a00111</filename>
    <includes id="a00108" name="QPContacts.h" local="yes" imported="no">QPContacts.h</includes>
    <class kind="class">tasks::qp::SolverData</class>
    <namespace>rbd</namespace>
    <namespace>tasks</namespace>
    <namespace>tasks::qp</namespace>
  </compound>
  <compound kind="file">
    <name>QPTasks.h</name>
    <path>/home/icubuser/mc/install/Tasks/src/</path>
    <filename>a00112</filename>
    <includes id="a00113" name="Tasks.h" local="yes" imported="no">Tasks.h</includes>
    <includes id="a00110" name="QPSolver.h" local="yes" imported="no">QPSolver.h</includes>
    <includes id="a00109" name="QPMotionConstr.h" local="yes" imported="no">QPMotionConstr.h</includes>
    <class kind="class">tasks::qp::SetPointTaskCommon</class>
    <class kind="class">tasks::qp::SetPointTask</class>
    <class kind="class">tasks::qp::TrackingTask</class>
    <class kind="class">tasks::qp::TrajectoryTask</class>
    <class kind="class">tasks::qp::PIDTask</class>
    <class kind="class">tasks::qp::TargetObjectiveTask</class>
    <class kind="class">tasks::qp::JointsSelector</class>
    <class kind="struct">tasks::qp::JointsSelector::SelectedData</class>
    <class kind="struct">tasks::qp::JointStiffness</class>
    <class kind="struct">tasks::qp::JointGains</class>
    <class kind="class">tasks::qp::TorqueTask</class>
    <class kind="class">tasks::qp::PostureTask</class>
    <class kind="class">tasks::qp::PositionTask</class>
    <class kind="class">tasks::qp::OrientationTask</class>
    <class kind="class">tasks::qp::TransformTaskCommon</class>
    <class kind="class">tasks::qp::SurfaceTransformTask</class>
    <class kind="class">tasks::qp::TransformTask</class>
    <class kind="class">tasks::qp::SurfaceOrientationTask</class>
    <class kind="class">tasks::qp::GazeTask</class>
    <class kind="class">tasks::qp::PositionBasedVisServoTask</class>
    <class kind="class">tasks::qp::CoMTask</class>
    <class kind="class">tasks::qp::MultiCoMTask</class>
    <class kind="class">tasks::qp::MultiRobotTransformTask</class>
    <class kind="class">tasks::qp::MomentumTask</class>
    <class kind="class">tasks::qp::ContactTask</class>
    <class kind="class">tasks::qp::GripperTorqueTask</class>
    <class kind="class">tasks::qp::LinVelocityTask</class>
    <class kind="class">tasks::qp::OrientationTrackingTask</class>
    <class kind="class">tasks::qp::RelativeDistTask</class>
    <class kind="class">tasks::qp::VectorOrientationTask</class>
    <class kind="class">tasks::qp::ForceMinimizationTask</class>
    <class kind="class">tasks::qp::ForceSmoothDotTask</class>
    <namespace>rbd</namespace>
    <namespace>tasks</namespace>
    <namespace>tasks::qp</namespace>
  </compound>
  <compound kind="file">
    <name>Tasks.h</name>
    <path>/home/icubuser/mc/install/Tasks/src/</path>
    <filename>a00113</filename>
    <class kind="class">tasks::PositionTask</class>
    <class kind="class">tasks::OrientationTask</class>
    <class kind="class">tasks::TransformTaskCommon</class>
    <class kind="class">tasks::SurfaceTransformTask</class>
    <class kind="class">tasks::TransformTask</class>
    <class kind="class">tasks::MultiRobotTransformTask</class>
    <class kind="class">tasks::SurfaceOrientationTask</class>
    <class kind="class">tasks::GazeTask</class>
    <class kind="class">tasks::PositionBasedVisServoTask</class>
    <class kind="class">tasks::PostureTask</class>
    <class kind="class">tasks::CoMTask</class>
    <class kind="class">tasks::MultiCoMTask</class>
    <class kind="class">tasks::MomentumTask</class>
    <class kind="class">tasks::LinVelocityTask</class>
    <class kind="class">tasks::OrientationTrackingTask</class>
    <class kind="class">tasks::RelativeDistTask</class>
    <class kind="class">tasks::VectorOrientationTask</class>
    <namespace>rbd</namespace>
    <namespace>tasks</namespace>
  </compound>
  <compound kind="file">
    <name>utils.h</name>
    <path>/home/icubuser/mc/install/Tasks/src/</path>
    <filename>a00114</filename>
    <namespace>tasks</namespace>
    <namespace>tasks::qp</namespace>
    <member kind="function">
      <type>int</type>
      <name>findJointFromVector</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>ac4a39f2423f38a93bb34cd5d0dba891c</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, int line, bool withBase)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compareDof</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a9d2ad288554eb8df94fadd7bfc77009d</anchor>
      <arglist>(const rbd::MultiBody &amp;mb1, const rbd::MultiBody &amp;mb2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tasks::AlphaBound</name>
    <filename>a00002.html</filename>
    <member kind="function">
      <type></type>
      <name>AlphaBound</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a5810daa83803edea5dfe2778e2fbca06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlphaBound</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ae0e37a2fff651a7fca0f817c57b8d98f</anchor>
      <arglist>(std::vector&lt; std::vector&lt; double &gt;&gt; lAB, std::vector&lt; std::vector&lt; double &gt;&gt; uAB)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>lAlphaBound</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a47628045f7248f1147c17f17fa16d554</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>uAlphaBound</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>adfb664f324979f6c87525b6442061b7f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tasks::qp::BilateralContact</name>
    <filename>a00003.html</filename>
    <member kind="function">
      <type></type>
      <name>BilateralContact</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a9cfc6f3d62925ea67cf4a2e25728f6ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BilateralContact</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a263ac7d857ffad2213ba250dcd76e7c9</anchor>
      <arglist>(int r1Index, int r2Index, const std::string &amp;r1BodyName, const std::string &amp;r2BodyName, std::vector&lt; Eigen::Vector3d &gt; r1Points, const std::vector&lt; Eigen::Matrix3d &gt; &amp;r1Frames, const sva::PTransformd &amp;X_b1_b2, int nrGen, double mu, const sva::PTransformd &amp;X_b1_cf=sva::PTransformd::Identity())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BilateralContact</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>abba7b029ab9aba37ca2f45a12438d839</anchor>
      <arglist>(int r1Index, int r2Index, const std::string &amp;r1BodyName, const std::string &amp;r2BodyName, int ambId, std::vector&lt; Eigen::Vector3d &gt; r1Points, const std::vector&lt; Eigen::Matrix3d &gt; &amp;r1Frames, const sva::PTransformd &amp;X_b1_b2, int nrGen, double mu, const sva::PTransformd &amp;X_b1_cf=sva::PTransformd::Identity())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BilateralContact</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a81df6ab75193f9ab40d139b032afb1ac</anchor>
      <arglist>(const ContactId &amp;cId, std::vector&lt; Eigen::Vector3d &gt; r1Points, const std::vector&lt; Eigen::Matrix3d &gt; &amp;r1Frames, const sva::PTransformd &amp;X_b1_b2, int nrGen, double mu, const sva::PTransformd &amp;X_b1_cf=sva::PTransformd::Identity())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BilateralContact</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>acdfe3e8f299cd16fcca9d8f2e1b5ff15</anchor>
      <arglist>(const UnilateralContact &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>force</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>abc1d7d5f48f63ffd5560d270cfd8cff2</anchor>
      <arglist>(const Eigen::VectorXd &amp;lambda, int point, const std::vector&lt; FrictionCone &gt; &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>force</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>aaab7f75802c6da0b5c5364dac3b06d2f</anchor>
      <arglist>(const Eigen::VectorXd &amp;lambda, const std::vector&lt; FrictionCone &gt; &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>sva::ForceVecd</type>
      <name>force</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a09d4e806e911133a5451d7ae793bd1df</anchor>
      <arglist>(const Eigen::VectorXd &amp;lambda, const std::vector&lt; Eigen::Vector3d &gt; &amp;r_b_pi, const std::vector&lt; FrictionCone &gt; &amp;c_pi_b) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nrLambda</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a20d5c2dc1bc2d6e8a4e469370a77d290</anchor>
      <arglist>(int point) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nrLambda</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>ae9c6df470b4f5d06b69f606a1a213138</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>sForce</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a3e505eb076fe9e717a3998d146d40120</anchor>
      <arglist>(const Eigen::VectorXd &amp;lambda, int point, const std::vector&lt; FrictionCone &gt; &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>sForce</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a1f17cc87165201fa6456a3c3dfd46bef</anchor>
      <arglist>(const Eigen::VectorXd &amp;lambda, const std::vector&lt; FrictionCone &gt; &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>sva::ForceVecd</type>
      <name>sForce</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a9924d6c0bbf0323b71734abb5b1e883e</anchor>
      <arglist>(const Eigen::VectorXd &amp;lambda, const std::vector&lt; Eigen::Vector3d &gt; &amp;r_b_pi, const std::vector&lt; FrictionCone &gt; &amp;c_pi_b) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sNrLambda</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a34d6c4c26757827d9f25152f14bcb4f7</anchor>
      <arglist>(int point) const </arglist>
    </member>
    <member kind="variable">
      <type>ContactId</type>
      <name>contactId</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a332d3c0c5db19b3ea3d7f3e12a903364</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Eigen::Vector3d &gt;</type>
      <name>r1Points</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>aaa53327f1e4010109daaca0472cdfa87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Eigen::Vector3d &gt;</type>
      <name>r2Points</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a8e70de174d9453af6728a12bd194c163</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; FrictionCone &gt;</type>
      <name>r1Cones</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a0820756bc6d3dfec5acba3d29bb09ab3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; FrictionCone &gt;</type>
      <name>r2Cones</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a87ac911696ce421a9ba1f83b98785986</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sva::PTransformd</type>
      <name>X_b1_b2</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>aea4bdb13ab0da1cbc451e8b752f5efb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sva::PTransformd</type>
      <name>X_b1_cf</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>ae34273f6228a00ce4b185c83f1b233b2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::Bound</name>
    <filename>a00004.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Bound</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>abb2191b36aa4861bbcc8b11d5f0981fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>beginVar</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a33f4adaf796f3bf03434c17180964471</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>Lower</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>ab08d340c6b7f5dd7307364107d74d9e6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>Upper</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a746cb55b47bdd05c2340322775b24b00</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>nameBound</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a50430e962bb811543e95d3a370bf8765</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>descBound</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a96f8c46c1d310d925bb60f42e7832211</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int i)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToSolver</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a19d04f6b7e27be0083f199820b25f85a</anchor>
      <arglist>(QPSolver &amp;sol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromSolver</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>aff1b28131a0e28f0b6396b084128858c</anchor>
      <arglist>(QPSolver &amp;sol)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::BoundedSpeedConstr</name>
    <filename>a00005.html</filename>
    <base>ConstraintFunction&lt; GenInequality &gt;</base>
    <member kind="function">
      <type></type>
      <name>BoundedSpeedConstr</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a9e2c07951b0339b0dca31e7dfc65282e</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, double timeStep)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addBoundedSpeed</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a7743272ac4add00739a1f9f5ecb7f305</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::string &amp;bodyName, const Eigen::Vector3d &amp;bodyPoint, const Eigen::MatrixXd &amp;dof, const Eigen::VectorXd &amp;speed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addBoundedSpeed</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a3c1bded8210ad455e89a24a0ab1da223</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::string &amp;bodyName, const Eigen::Vector3d &amp;bodyPoint, const Eigen::MatrixXd &amp;dof, const Eigen::VectorXd &amp;lowerSpeed, const Eigen::VectorXd &amp;upperSpeed)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeBoundedSpeed</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>aef0f41ce8156689fe319357df8b8a467</anchor>
      <arglist>(const std::string &amp;bodyName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetBoundedSpeeds</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a10746908e9ca63745fd2e03660e876f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>nrBoundedSpeeds</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a7abeafcc16eee56ba77dc7d50443ea3d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateBoundedSpeeds</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a6cd62f18bdb9f5c4dbb747a37b9de443</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateNrVars</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a3a2138368ef632763692ca6cfd7ea937</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>ad5efe77a77c4a13c243feaad3381cdb4</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbc, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>nameGenInEq</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>aacadf314aff5041d0bcc302a2c9077ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>descGenInEq</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a560151f77568033ce84d0687212166cf</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mb, int line)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>maxGenInEq</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>aec13b63bf524925bfc0f2943db751d49</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>AGenInEq</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>ab3eb3e17a1918f097b3eeb6e910c3a6b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>LowerGenInEq</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>ac01798127099435ff25684a26a02b373</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>UpperGenInEq</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>ac0653473fd034ff50cf28c654c5bc4e4</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::CollisionConstr</name>
    <filename>a00006.html</filename>
    <base>ConstraintFunction&lt; Inequality &gt;</base>
    <member kind="function">
      <type></type>
      <name>CollisionConstr</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>a6cbd77cac9be76d2b470ede58f805e6e</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, double step)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCollision</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>a5219663aa6329f878b922596d1a2cbce</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int collId, int r1Index, const std::string &amp;r1BodyName, sch::S_Object *body1, const sva::PTransformd &amp;X_op1_o1, int r2Index, const std::string &amp;r2BodyName, sch::S_Object *body2, const sva::PTransformd &amp;X_op2_o2, double di, double ds, double damping, double dampingOff=0.)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>rmCollision</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>a378178fcd1de3da1e6a0472c0f04f42e</anchor>
      <arglist>(int collId)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>nrCollisions</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>aff1fcb20327d44f7f96efc141f9af007</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>a851836fff090ddb145583d0945be3d8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateNrCollisions</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>a0f5c6818508abc7debd6f6d1673d7ede</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateNrVars</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>af87ecbece4245a3f4bd26fcda48c73a8</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>acf68cb9fc70fb33383307f74610950f3</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>nameInEq</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>a0ffde2a07b52fad21d66ad46a69b0f4b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>descInEq</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>a60d9e2b3c0aa10c04c6eeb5463910e4f</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int line)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>nrInEq</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>a619774d7d340f72613868ae03c85edd0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>maxInEq</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>a7197320c3922976583112c8b6efd012e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>AInEq</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>a2a40d96be9d0ca98436860454ca2e8ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>bInEq</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>a883f60f2c52ad8480d611af108f9de55</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::CoMIncPlaneConstr</name>
    <filename>a00007.html</filename>
    <base>ConstraintFunction&lt; Inequality &gt;</base>
    <member kind="function">
      <type></type>
      <name>CoMIncPlaneConstr</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a8d06d7750347b3548de72faae5394406</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, double step)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPlane</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>ab4ff9ded4f0e0fcbbaf64bb7a9fc9d0a</anchor>
      <arglist>(int planeId, const Eigen::Vector3d &amp;normal, double offset, double di, double ds, double damping, double dampingOff=0.)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPlane</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a842c6c78a0ebbc92999997d2cb74ebae</anchor>
      <arglist>(int planeId, const Eigen::Vector3d &amp;normal, double offset, double di, double ds, double damping, const Eigen::Vector3d &amp;speed, const Eigen::Vector3d &amp;normalDot, double dampingOff=0.)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>rmPlane</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>ac6a9eb3a427aefd92dde43a9cad9f2af</anchor>
      <arglist>(int planeId)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>nrPlanes</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a389ac301cafd6945618abfddf6555f1f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>aa28f3741c6fb07f9c5d95967209bebb2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateNrPlanes</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>ad425d494b96f1aeaa34d3380ce8618df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateNrVars</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a2f298ed2b312f6b393639485c60e85dd</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>adeb74c75bfeb1c5c66b3a1ef81b5351d</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>nameInEq</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>ae49f21a659caa0b1c34027bb408ccd53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>descInEq</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a5ce772b2a45a6e924c2bce8f1efe4bc4</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int line)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>nrInEq</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a26489be745855033503b6e94868836e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>maxInEq</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a138a750ab08fd5bde36d8d5a4a575b2a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>AInEq</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>aee798dad0b7b1e3aba234651fbeb9235</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>bInEq</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a2c56c7f3ffd4b8f48b48ff39e1a11096</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::CoMTask</name>
    <filename>a00008.html</filename>
    <base>tasks::qp::HighLevelTask</base>
    <member kind="function">
      <type></type>
      <name>CoMTask</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a405b0a71a500f45461809a6a834ce4ef</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const Eigen::Vector3d &amp;com)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CoMTask</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a6639488dffbba63388705c3909f1e31b</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const Eigen::Vector3d &amp;com, std::vector&lt; double &gt; weight)</arglist>
    </member>
    <member kind="function">
      <type>tasks::CoMTask &amp;</type>
      <name>task</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a6ef18cded54fee2dc7337160a10f0c3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>com</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a01fd2792379cee017ed2a4091c3b8fe5</anchor>
      <arglist>(const Eigen::Vector3d &amp;com)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d</type>
      <name>com</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a777ab0b95b530d442751037f6ba98e12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateInertialParameters</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ab0ab49b7c66a39613e1765c13b841ddf</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dim</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>abcce27b79bc4bfe6561c25063281ec92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a4d348895d59174e6fa0d4e7c722d99ef</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>afdc77e551e00a97a38068ba054acfa85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a579c3b1f61cdae7be76b21ead36d035c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a6e191f0ff001f97f0aa20c90d231ee92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>aa5c66de42ec9f1c8b28505dee1724e6e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::CoMTask</name>
    <filename>a00009.html</filename>
    <member kind="function">
      <type></type>
      <name>CoMTask</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>ad4b7c8e51cc745de698e3d6bd2a2339e</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const Eigen::Vector3d &amp;com)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CoMTask</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>aecc4822eec67f013d9a8db414f019acb</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const Eigen::Vector3d &amp;com, std::vector&lt; double &gt; weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>com</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>abad06b1bf9cabf9863797b740c99d4d6</anchor>
      <arglist>(const Eigen::Vector3d &amp;com)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d</type>
      <name>com</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a2cad012e70767685b5597fe75b10cabd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateInertialParameters</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a68c6af543ca48f350185a2ea2b8062e3</anchor>
      <arglist>(const rbd::MultiBody &amp;mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a7f91a91ff834b70bdb04960ad215fabb</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a289f61cc6113eeb7b8db231312f3872e</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc, const Eigen::Vector3d &amp;com, const std::vector&lt; sva::MotionVecd &gt; &amp;normalAccB)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateDot</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>afe3cc241625aad1536805f62c0e6aa76</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>ad89a55e7995c90940617fdf4f341e6b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a73d3321cb85f85d9c18cb8738e70a506</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>ab74c15a9923ad68f2a64c044f6fdcc20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>afab1b4651d6484944ad543da7eb4e5df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jacDot</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a2cdc34378760c34d06e19c814f344de7</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tasks::qp::constr_traits</name>
    <filename>a00010.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>tasks::qp::constr_traits&lt; Equality &gt;</name>
    <filename>a00011.html</filename>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>maxLines</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a1eea3c95ba23ce37db1faeb5af34677b</anchor>
      <arglist>(const Equality *constr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>nrLines</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a36380c882892eaf391510a7f5824b69f</anchor>
      <arglist>(const Equality *constr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>name</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a03a20222632a0ba476c07807de9aa1e9</anchor>
      <arglist>(const Equality *constr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>desc</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>ab01de7dfb3bdce7a14c6dea9273dd149</anchor>
      <arglist>(Equality *constr, const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int i)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tasks::qp::constr_traits&lt; GenInequality &gt;</name>
    <filename>a00012.html</filename>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>maxLines</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>ab8952085364f79663c7f4ff4cee717e1</anchor>
      <arglist>(const GenInequality *constr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>nrLines</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>abbd8f0aeeb0557ecc7e9da467a0bff55</anchor>
      <arglist>(const GenInequality *constr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>name</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a2dd694ea42f2356e22a4c2283ce829b0</anchor>
      <arglist>(const GenInequality *constr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>desc</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a018ab4e248a49fb23efd8e8b6899baec</anchor>
      <arglist>(GenInequality *constr, const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int i)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tasks::qp::constr_traits&lt; Inequality &gt;</name>
    <filename>a00013.html</filename>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>maxLines</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a5139859fb109800ff919d1d3fd820170</anchor>
      <arglist>(const Inequality *constr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>nrLines</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a3f3e45c0bc6602f14b42581e67cd1ae3</anchor>
      <arglist>(const Inequality *constr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>name</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a73b01543c02f1856d9435897337e38de</anchor>
      <arglist>(const Inequality *constr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>desc</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>abb43b3d4896366aa9a8251f48336dab9</anchor>
      <arglist>(Inequality *constr, const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int i)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::Constraint</name>
    <filename>a00014.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Constraint</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>ab0a2de8684c5cb2901578a345ec0c162</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>updateNrVars</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a1d20144cd73582d7f597f4806bfdc132</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;msb, const SolverData &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>acaa7ba68e4d9fcbf627c048aef01dc43</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::ConstraintFunction</name>
    <filename>a00015.html</filename>
    <templarg>Fun</templarg>
    <base>tasks::qp::Constraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConstraintFunction</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a43bbf05e31926b2e19f0fdd86669d9b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToSolver</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aff67c3cdc38c098ddcd8a2b47bc55946</anchor>
      <arglist>(QPSolver &amp;sol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToSolver</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a1156de5e1b49d1d91319fd96cb936b7a</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, QPSolver &amp;sol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromSolver</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a454bf752ccf215aa991d036eaf1c3223</anchor>
      <arglist>(QPSolver &amp;sol)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstraintFunction&lt; Bound &gt;</name>
    <filename>a00015.html</filename>
    <base>tasks::qp::Constraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConstraintFunction</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a43bbf05e31926b2e19f0fdd86669d9b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToSolver</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aff67c3cdc38c098ddcd8a2b47bc55946</anchor>
      <arglist>(QPSolver &amp;sol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToSolver</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a1156de5e1b49d1d91319fd96cb936b7a</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, QPSolver &amp;sol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromSolver</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a454bf752ccf215aa991d036eaf1c3223</anchor>
      <arglist>(QPSolver &amp;sol)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstraintFunction&lt; Equality &gt;</name>
    <filename>a00015.html</filename>
    <base>tasks::qp::Constraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConstraintFunction</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a43bbf05e31926b2e19f0fdd86669d9b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToSolver</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aff67c3cdc38c098ddcd8a2b47bc55946</anchor>
      <arglist>(QPSolver &amp;sol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToSolver</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a1156de5e1b49d1d91319fd96cb936b7a</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, QPSolver &amp;sol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromSolver</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a454bf752ccf215aa991d036eaf1c3223</anchor>
      <arglist>(QPSolver &amp;sol)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstraintFunction&lt; GenInequality &gt;</name>
    <filename>a00015.html</filename>
    <base>tasks::qp::Constraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConstraintFunction</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a43bbf05e31926b2e19f0fdd86669d9b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToSolver</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aff67c3cdc38c098ddcd8a2b47bc55946</anchor>
      <arglist>(QPSolver &amp;sol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToSolver</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a1156de5e1b49d1d91319fd96cb936b7a</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, QPSolver &amp;sol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromSolver</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a454bf752ccf215aa991d036eaf1c3223</anchor>
      <arglist>(QPSolver &amp;sol)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstraintFunction&lt; Inequality &gt;</name>
    <filename>a00015.html</filename>
    <base>tasks::qp::Constraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConstraintFunction</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a43bbf05e31926b2e19f0fdd86669d9b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToSolver</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aff67c3cdc38c098ddcd8a2b47bc55946</anchor>
      <arglist>(QPSolver &amp;sol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToSolver</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a1156de5e1b49d1d91319fd96cb936b7a</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, QPSolver &amp;sol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromSolver</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a454bf752ccf215aa991d036eaf1c3223</anchor>
      <arglist>(QPSolver &amp;sol)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::ContactAccConstr</name>
    <filename>a00016.html</filename>
    <base>tasks::qp::ContactConstr</base>
    <member kind="function">
      <type></type>
      <name>ContactAccConstr</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a8a06c411889b12ea13c7434ee8a6dfdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>aa14fa21706de81248135aad38edac869</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>nameEq</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a79a267460b2699d5abf1876f334dbc1f</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tasks::qp::ContactConstrCommon::ContactCommon</name>
    <filename>a00017.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a3f78c883313b5dfe50f2c7847d11fbf5</anchor>
      <arglist>(const ContactCommon &amp;cc) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad2ea405fe4f488d57550c4954980fa9c</anchor>
      <arglist>(const ContactCommon &amp;cc) const </arglist>
    </member>
    <member kind="variable">
      <type>ContactId</type>
      <name>cId</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad53d259f4e7a95dfb4ac949bf30488dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sva::PTransformd</type>
      <name>X_b1_cf</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a7486abed0e3e28e648c2e2d91b280c83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sva::PTransformd</type>
      <name>X_b1_b2</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a3fdbc4c04005859afe2c6f77a4cec997</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::ContactConstr</name>
    <filename>a00018.html</filename>
    <base>ConstraintFunction&lt; Equality &gt;</base>
    <base>tasks::qp::ContactConstrCommon</base>
    <class kind="struct">tasks::qp::ContactConstr::ContactData</class>
    <class kind="struct">tasks::qp::ContactConstr::ContactSideData</class>
    <member kind="function">
      <type></type>
      <name>ContactConstr</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a75afc5afe626485023d9fd8a009b0bc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateDofContacts</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>af0d84076bf6065d360bf5c6fe25f19d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateNrVars</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>aa30cb765eec107617ac0cd9aa16efea1</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>descEq</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>af5a1c7afd5b4ce4655bc363e99d64b1c</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int line)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>nrEq</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a45374de4ce0a2b1c8cb154f20e0682c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>maxEq</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>af0e12230005ae7bbd28322deac58d6c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>AEq</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a1ec30bc43c4e1302451b035b0b5d438b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>bEq</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a680fc00ecb400a22d5c848b4ef4042f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNrEq</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>ab48ef13bdf935a36c4561e39340adc20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ContactData &gt;</type>
      <name>cont_</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a462e49a9b481e139b98cd4e9749cd6c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::MatrixXd</type>
      <name>fullJac_</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>abeee7362aae0d198aff26ac2b52f0dc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::MatrixXd</type>
      <name>dofJac_</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a942694b22e0994fb66534f3bc2209d31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::MatrixXd</type>
      <name>A_</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>ade743f34680958185eff28e9a982b7e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>b_</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>aa375b908543d69711b1dd45ece31a865</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nrEq_</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>ac4cc65374a5649c54fade59e4a60de09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>totalAlphaD_</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>aef4970931649dddbf92ec649e44ebd95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>timeStep_</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>ae9e38fabd9625b3cbe4b592630cf3250</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::ContactConstrCommon</name>
    <filename>a00019.html</filename>
    <class kind="struct">tasks::qp::ContactConstrCommon::ContactCommon</class>
    <member kind="function">
      <type>bool</type>
      <name>addVirtualContact</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a7c55dda527a78e05b4831360910bfd14</anchor>
      <arglist>(const ContactId &amp;contactId)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeVirtualContact</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>aedef34aeec93e2935de172e1cea9b522</anchor>
      <arglist>(const ContactId &amp;contactId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetVirtualContacts</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a838f717847de788786039ae40d99939c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addDofContact</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>ac5123de1300b7ecb492a82bdf4ff598a</anchor>
      <arglist>(const ContactId &amp;contactId, const Eigen::MatrixXd &amp;dof)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeDofContact</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a31ac823a2b09a9e5da7a4b825f8377eb</anchor>
      <arglist>(const ContactId &amp;contactId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetDofContacts</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>adecc38cbf40aa9b7b4ef2d91197bf816</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::set&lt; ContactCommon &gt;</type>
      <name>contactCommonInContact</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a9ef854ece354fa70691e835d4b1b113f</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; ContactId &gt;</type>
      <name>virtualContacts_</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a2f2a4442ff0cbee3b172ffbf89eb7ac7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; ContactId, Eigen::MatrixXd &gt;</type>
      <name>dofContacts_</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>aff630a43bf34b2a1888d3935934eadd4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tasks::qp::MotionConstrCommon::ContactData</name>
    <filename>a00020.html</filename>
    <member kind="function">
      <type></type>
      <name>ContactData</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>af86854939284b75c42d49cb3d55f080c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ContactData</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ac29543610a2c5ffa91e625ee7eb61cd4</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const std::string &amp;bodyName, int lambdaBegin, std::vector&lt; Eigen::Vector3d &gt; points, const std::vector&lt; FrictionCone &gt; &amp;cones)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>bodyIndex</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>abd85910b4e703019994cc83af67770ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>lambdaBegin</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a5fe6588a69311d8d5503c6d9be453745</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>rbd::Jacobian</type>
      <name>jac</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ac649c8ba8ad31888ad6f95d3c2720793</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Eigen::Vector3d &gt;</type>
      <name>points</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a9ac2def7191a2deae13dec4b80fcdfbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Eigen::Matrix&lt; double, 3, Eigen::Dynamic &gt; &gt;</type>
      <name>minusGenerators</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>aa9db81d279ff9dcfc93c849301597ca8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tasks::qp::ContactConstr::ContactData</name>
    <filename>a00021.html</filename>
    <member kind="function">
      <type></type>
      <name>ContactData</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a3ab1f7d913208fd934bf01bd7cffa8c5</anchor>
      <arglist>(std::vector&lt; ContactSideData &gt; csds, const Eigen::MatrixXd &amp;d, int b1, int b2, const sva::PTransformd &amp;X_bb, const sva::PTransformd &amp;X_bcf, const ContactId &amp;cId)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; ContactSideData &gt;</type>
      <name>contacts</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a8eaacc04f628b6ef37f84e711153da3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::MatrixXd</type>
      <name>dof</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a4d025b4a9ad0dc05a96b571d42fedb29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>b1Index</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a060e74dde561d3e2b2b744c7e413b4bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>b2Index</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a5b7a1d42371e09c6453d6fc09b29a395</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sva::PTransformd</type>
      <name>X_b1_b2</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>afa20a55cc3a2d0ee4726aea8d0e20af4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sva::PTransformd</type>
      <name>X_b1_cf</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>aec6ce54631e347b5845b6bb24cc206a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ContactId</type>
      <name>contactId</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a73463d49bc2a0f6e8e08b17c465278d9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tasks::qp::ContactId</name>
    <filename>a00022.html</filename>
    <member kind="function">
      <type></type>
      <name>ContactId</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>aa7e0d2976319c9a3c7600c18d322090b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ContactId</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a83b93d52de3ea6d4d0d4b370f126ae50</anchor>
      <arglist>(int r1Index, int r2Index, const std::string &amp;r1BodyName, const std::string &amp;r2BodyName, int ambiguityId=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>acc72a4179b93a84f48975acaa127257b</anchor>
      <arglist>(const ContactId &amp;cId) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a3f97aa2de47daa307478b84c8e045d11</anchor>
      <arglist>(const ContactId &amp;cId) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a6df70365734228f2c4cc61f633bfda16</anchor>
      <arglist>(const ContactId &amp;cId) const </arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>r1Index</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>aa0f853c4f1786b8a23a0252dcbf2678a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>r2Index</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a58515743f8024e51dc07e65a3f0447d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>r1BodyName</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a47acc85ec19a848ec185d379dbd7c9ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>r2BodyName</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>aec152e04a89289523099fd8ebe816e8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ambiguityId</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a7777bc784fa6025d8f024e89f01193ca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::ContactPosConstr</name>
    <filename>a00023.html</filename>
    <base>tasks::qp::ContactConstr</base>
    <member kind="function">
      <type></type>
      <name>ContactPosConstr</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a0dd6dd620e5f1189e9f013df23e87a20</anchor>
      <arglist>(double timeStep)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a49c6a5029370a29957bf2e229880d71d</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>nameEq</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a77175df03a6ecd3f79c0b6514281b1b7</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tasks::qp::ContactConstr::ContactSideData</name>
    <filename>a00024.html</filename>
    <member kind="function">
      <type></type>
      <name>ContactSideData</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a3663b30e14d97d6988a460c476227bf2</anchor>
      <arglist>(int rI, int aDB, double s, const rbd::Jacobian &amp;j, const sva::PTransformd &amp;Xbp)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>robotIndex</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ab8b5fe032fa924722e9e9936033ac11a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>alphaDBegin</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a27973de260230b1e17d787f4b6e7a9e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>bodyIndex</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a74063f68fc100833abeafd911ffaae50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>sign</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a9a1118815c57748be2b8695e29635743</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>rbd::Jacobian</type>
      <name>jac</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a75766cd05463f9bea05b7bc5cbc44cb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sva::PTransformd</type>
      <name>X_b_p</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ac0b9f181c4ccd6109ed924ba9f69af4e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::ContactSpeedConstr</name>
    <filename>a00025.html</filename>
    <base>tasks::qp::ContactConstr</base>
    <member kind="function">
      <type></type>
      <name>ContactSpeedConstr</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>aa3baa9f28a7458f7994dc736d7304ccb</anchor>
      <arglist>(double timeStep)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a22a8b2f8afe6e93e5d9f86acf27141f6</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>nameEq</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a8e47ad9b4b5d471bb9024d15fbf9c914</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::ContactTask</name>
    <filename>a00026.html</filename>
    <base>tasks::qp::Task</base>
    <member kind="function">
      <type></type>
      <name>ContactTask</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a037148c6db1475dc6f36c42bc9e6317c</anchor>
      <arglist>(ContactId contactId, double stiffness, double weight)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::pair&lt; int, int &gt;</type>
      <name>begin</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a2be65cea715944f4c56129348406a708</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>error</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>aad6d0b80121acdc77a7e5551eebeb92b</anchor>
      <arglist>(const Eigen::Vector3d &amp;error)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>errorD</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a714afedfd93d1be2fc4baae72112b70e</anchor>
      <arglist>(const Eigen::Vector3d &amp;errorD)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateNrVars</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>ab3aad3b952e03d76c3d4ed9ae69a27a5</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a2ba094b2bc93313e758546ee39fa3b45</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>Q</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a056e77d70e7633638d32d23adb318663</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>C</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>aa7ad512f6fb329718106601f9f3c1840</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::DamperJointLimitsConstr</name>
    <filename>a00027.html</filename>
    <base>ConstraintFunction&lt; Bound &gt;</base>
    <member kind="function">
      <type></type>
      <name>DamperJointLimitsConstr</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>ab0e3959cb5a9a6e07fce811e23ec308d</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const QBound &amp;qBound, const AlphaBound &amp;aBound, double interPercent, double securityPercent, double damperOffset, double step)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateNrVars</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a4e945a39c9828b37242224438f0578d4</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a0a2126cc6751ca3b7da93a6fe42e9d34</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>nameBound</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>afa53e6836297662c69f6840cef1e3eff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>descBound</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>ad205ef773cf3f0e4971eb0ceb1f34fa5</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int line)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>beginVar</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a622f3dc457f56079b16c9d21a618f757</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>Lower</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>ad80108f2aca1936a96b2139d91221431</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>Upper</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>aea69c9b772f201c9edf0a0fc69bc59e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>computeDamping</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a2a14b03bb1f27d332e2cb7b1c3c3d085</anchor>
      <arglist>(double alpha, double dist, double iDist, double sDist)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>computeDamper</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a32a63d6ca7eb4d04fba359574ec5bb73</anchor>
      <arglist>(double dist, double iDist, double sDist, double damping)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::Equality</name>
    <filename>a00028.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Equality</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a3989011420947815653a39839aa306d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>maxEq</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a16167f0876c15eea964a2444e7174f5a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>nrEq</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a30e285ad2009e94077332d09f1a43324</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>AEq</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>ae8a5859b8789be2ab522d2e9aa32ec20</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>bEq</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>ada49ed453361019ecb1b22dfe48d4ae3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>nameEq</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a89a44401b4eda6d61119a9c10ddc8f15</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>descEq</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a3a8b70096b0c432643b828bbdf39d536</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int i)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToSolver</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a9b875aff84a6d42b7c56260af6da0541</anchor>
      <arglist>(QPSolver &amp;sol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromSolver</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>ae79bc2e4b409d910f70028a44a0d776c</anchor>
      <arglist>(QPSolver &amp;sol)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::ForceMinimizationTask</name>
    <filename>a00029.html</filename>
    <base>tasks::qp::Task</base>
    <member kind="function">
      <type></type>
      <name>ForceMinimizationTask</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>aaab2deb4804f6fe5d25e3e9a8cce7633</anchor>
      <arglist>(double weight)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateNrVars</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>aa688890ef303ef3e32a3ed4abfcf8b5c</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a68f255513ac4fe035e36572d8b4ce6c2</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::pair&lt; int, int &gt;</type>
      <name>begin</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>ab7ee922393a45628e4803842f0328038</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>Q</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a4d04f08472d8e1d0db91e9ff236b3380</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>C</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a3adba75f0df0f9070363ed808d28b979</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::ForceSmoothDotTask</name>
    <filename>a00030.html</filename>
    <base>tasks::qp::Task</base>
    <member kind="function">
      <type></type>
      <name>ForceSmoothDotTask</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a7b1c094838cb7160abbd0328f763cc2d</anchor>
      <arglist>(double weight)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateNrVars</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a5660f4453cd6c52bda37ae07e22f2b8a</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a0e09a914794750a147a7954c15f2a91b</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_lambda</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a3633fca9025a727ee5da05e91df631ba</anchor>
      <arglist>(Eigen::VectorXd &amp;lambda1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::pair&lt; int, int &gt;</type>
      <name>begin</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a7c643d0b477eabf02fcf374b564ca565</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>Q</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a0431adbfa2fc6701d2d16c227fef4077</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>C</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a3dceeec0ec85f0201c221a4943541938</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tasks::qp::FrictionCone</name>
    <filename>a00031.html</filename>
    <member kind="function">
      <type></type>
      <name>FrictionCone</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a6f26952821a8a90a13706f60fcde3678</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FrictionCone</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>ad5e1ee09db9cad55aaa5e81f827724dd</anchor>
      <arglist>(const Eigen::Matrix3d &amp;frame, int nrGen, double mu, double direction=1.)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Eigen::Vector3d &gt;</type>
      <name>generators</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a21e18e3e28defbb740615260a07489c1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::GazeTask</name>
    <filename>a00032.html</filename>
    <base>tasks::qp::HighLevelTask</base>
    <member kind="function">
      <type></type>
      <name>GazeTask</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a37c7e3e10fc054e0435dc7656c141565</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const std::string &amp;bodyName, const Eigen::Vector2d &amp;point2d, double depthEstimate, const sva::PTransformd &amp;X_b_gaze, const Eigen::Vector2d &amp;point2d_ref=Eigen::Vector2d::Zero())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GazeTask</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a538a7e6844f23921d4649f5169d8a4da</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const std::string &amp;bodyName, const Eigen::Vector3d &amp;point3d, const sva::PTransformd &amp;X_b_gaze, const Eigen::Vector2d &amp;point2d_ref=Eigen::Vector2d::Zero())</arglist>
    </member>
    <member kind="function">
      <type>tasks::GazeTask &amp;</type>
      <name>task</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ae619a255082dbbb29eae5c8155751564</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>error</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a66de6c7e95ddb0d5779460fc740dc09a</anchor>
      <arglist>(const Eigen::Vector2d &amp;point2d, const Eigen::Vector2d &amp;point2d_ref=Eigen::Vector2d::Zero())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>error</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ac08fc99e6870186c4c5a745294051563</anchor>
      <arglist>(const Eigen::Vector3d &amp;point3d, const Eigen::Vector2d &amp;point2d_ref=Eigen::Vector2d::Zero())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dim</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>af304569132cf0251518cc9390266bc23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8ddf958bafb6bd327c56e3065bd2b6c1</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a2edfb30ad8321ec934f85c202ea44f75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a4900f9066229b36d2eb009a4c3910b1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a2713777b900f37706631fe31a0cfede0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a50b9d87ad9db426d65d855b4fd391637</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::GazeTask</name>
    <filename>a00033.html</filename>
    <member kind="function">
      <type></type>
      <name>GazeTask</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>aba1bfe65a758ea66b3861eb8f165c160</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const std::string &amp;bodyName, const Eigen::Vector2d &amp;point2d, double depthEstimate, const sva::PTransformd &amp;X_b_gaze, const Eigen::Vector2d &amp;point2d_ref=Eigen::Vector2d::Zero())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GazeTask</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a12599ce7b03170f7b9d33e521cfc417d</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const std::string &amp;bodyName, const Eigen::Vector3d &amp;point3d, const sva::PTransformd &amp;X_b_gaze, const Eigen::Vector2d &amp;point2d_ref=Eigen::Vector2d::Zero())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GazeTask</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a87332fab30a87c03822bf31efcda8aeb</anchor>
      <arglist>(const GazeTask &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GazeTask</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a3c9dfcd5e71d7af7f8d94476fbe9bb72</anchor>
      <arglist>(GazeTask &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>GazeTask &amp;</type>
      <name>operator=</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a6d434428030eeca446ced9a18d19c60c</anchor>
      <arglist>(const GazeTask &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>GazeTask &amp;</type>
      <name>operator=</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a69d250bddb913512147c7850906402b8</anchor>
      <arglist>(GazeTask &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>error</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a7a3a5341868b40b92cc1632695ec4ade</anchor>
      <arglist>(const Eigen::Vector2d &amp;point2d, const Eigen::Vector2d &amp;point2d_ref=Eigen::Vector2d::Zero())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>error</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a6aaf67f35aab816daa37233c713583c6</anchor>
      <arglist>(const Eigen::Vector3d &amp;point3d, const Eigen::Vector2d &amp;point2d_ref=Eigen::Vector2d::Zero())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a38f3201c5c73d5f8604deec4e5dca994</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc, const std::vector&lt; sva::MotionVecd &gt; &amp;normalAccB)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a6864e9981b298e8ab67645d5b1aa446c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a7619fb259b6b791d16da8e2a32b462c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a4be9152ff9a35babed966ba073e66be0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>ad0b794dbb73ebb961c442608fee20571</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jacDot</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>ad49801e0233810ac8226cec1ad39b175</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::GenInequality</name>
    <filename>a00034.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenInequality</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>acc4aa2bbdb2392a856830b123cea0aae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>maxGenInEq</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>aeb0ca1c17412db12a0b356cf49db1153</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>nrGenInEq</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a0824ef1fa7cca3bc979437b08c316dbe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>AGenInEq</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a325d9d056bb2f4384f2dd5d7782c7d67</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>LowerGenInEq</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>afbc386b920f098adbf97579136f7aafe</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>UpperGenInEq</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>ab9e1c4057da5a53adb8f42ab0a3de2c9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>nameGenInEq</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>ab8b53c19e88c1e5b2dfe20f323406e4e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>descGenInEq</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a9d2a100b0cac057ed8ab9551c313c258</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int i)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToSolver</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a43a34f4730c9c55f8534d0f0b6a18a10</anchor>
      <arglist>(QPSolver &amp;sol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromSolver</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a0cb32ca9ea02aef63634de1e915ba1d7</anchor>
      <arglist>(QPSolver &amp;sol)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::GenQPSolver</name>
    <filename>a00035.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenQPSolver</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>abc3b4a33780f8fe00fd5d3385dbaf808</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>updateSize</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>aaf305726925f3693e24dd82b473817e3</anchor>
      <arglist>(int nrVars, int nrEq, int nrInEq, int nrGenInEq)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>updateMatrix</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a7c72a60336439e940e2976d327dd98dd</anchor>
      <arglist>(const std::vector&lt; Task * &gt; &amp;tasks, const std::vector&lt; Equality * &gt; &amp;eqConstr, const std::vector&lt; Inequality * &gt; &amp;inEqConstr, const std::vector&lt; GenInequality * &gt; &amp;genInEqConstr, const std::vector&lt; Bound * &gt; &amp;boundConstr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>solve</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>afb9f3d99281925cd65cf1f9b29ce89ac</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>result</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a5b2bbb5cd5e65aeec71466a98bbc7d7e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::ostream &amp;</type>
      <name>errorMsg</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a54b51f336322baaca38f31c9b0f5df98</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; Task * &gt; &amp;tasks, const std::vector&lt; Equality * &gt; &amp;eqConstr, const std::vector&lt; Inequality * &gt; &amp;inEqConstr, const std::vector&lt; GenInequality * &gt; &amp;genInEqConstr, const std::vector&lt; Bound * &gt; &amp;boundConstr, std::ostream &amp;out) const =0</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>default_qp_solver</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>ad8ee5e4fad141ae5f5e8b73e3842e847</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::GripperTorqueConstr</name>
    <filename>a00036.html</filename>
    <base>ConstraintFunction&lt; Inequality &gt;</base>
    <member kind="function">
      <type></type>
      <name>GripperTorqueConstr</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a158480db320f0d977606763c0ca30320</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGripper</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a286eb4df1d89354be9b233791446cfab</anchor>
      <arglist>(const ContactId &amp;cId, double torqueLimit, const Eigen::Vector3d &amp;origin, const Eigen::Vector3d &amp;axis)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>rmGripper</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a7bcbd18c45c3b8492e53a9a03cf954a4</anchor>
      <arglist>(const ContactId &amp;cId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a6e4afbeb7025bb621f9c88ce71a544fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateNrVars</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>adcbe941d5e6609a7357dc2b885436ee7</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mb, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>ad6f7eec133734486d0e5c7d36c7646e6</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mb, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbc, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>nameInEq</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a58d13515ec0ed6da9e3a545ac66cce10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>descInEq</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>ac27d72d7e6525da43a25c81e473f4c74</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mb, int line)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>maxInEq</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>acd163dbd3b5d853e24b5ab546fd77b36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>AInEq</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>accf1e1671ae48bcb72c1939d9e0a5c58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>bInEq</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>ae618e3a4d7fb26fd76ec17afbdf0457c</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::GripperTorqueTask</name>
    <filename>a00037.html</filename>
    <base>tasks::qp::Task</base>
    <member kind="function">
      <type></type>
      <name>GripperTorqueTask</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>abd65c8e12ea38c8ca91a0caa344166f0</anchor>
      <arglist>(ContactId contactId, const Eigen::Vector3d &amp;origin, const Eigen::Vector3d &amp;axis, double weight)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::pair&lt; int, int &gt;</type>
      <name>begin</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a2a9c5d7af61ab61a1bd8ec4428b4de70</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateNrVars</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>ae06a9ab5b887e8d1b72d507c4aa54328</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a87bc192224ddb3b150bcaa9b50246f47</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>Q</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a06ea9fd1c43cdfe71ce5e4b407fb7738</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>C</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>aa1dc54f02a89ac49661f1974393d19c7</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::HighLevelTask</name>
    <filename>a00038.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HighLevelTask</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>ac11194ec5a81fc18b68209eadfcbf9cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>dim</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>aed24cd07ba6490a8508c2fcbc52e33f6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>a6af9649e3cd0adc1643a029333897d02</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>a843ba46006369277b515a6a22cbe08f9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>af7a1c4c56697a44df3e692e76a42dc49</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>a39cc67617b7d74386e638f1e5b0da083</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>ad5b4b5ca67ce2b059cb44b4e00918b38</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::ImageConstr</name>
    <filename>a00039.html</filename>
    <base>ConstraintFunction&lt; Inequality &gt;</base>
    <member kind="function">
      <type></type>
      <name>ImageConstr</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a985c69282468b3d03abdd56b5306a7fc</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const std::string &amp;bName, const sva::PTransformd &amp;X_b_gaze, double step, double constrDirection=1.)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageConstr</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a3b290ac691818ff86205030eafa730f2</anchor>
      <arglist>(const ImageConstr &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageConstr</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>adf0dd8a09a53250bcda351cbfffb2dbf</anchor>
      <arglist>(ImageConstr &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>ImageConstr &amp;</type>
      <name>operator=</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a7221bfd17d45d7208a1d02fd74d4dcbf</anchor>
      <arglist>(const ImageConstr &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ImageConstr &amp;</type>
      <name>operator=</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>ad28102162a710241e4bef0b6f7555ade</anchor>
      <arglist>(ImageConstr &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLimits</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a165ccf87f8ee29b59718f9b9f26eb020</anchor>
      <arglist>(const Eigen::Vector2d &amp;min, const Eigen::Vector2d &amp;max, const double iPercent, const double sPercent, const double damping, const double dampingOffsetPercent)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addPoint</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>ade42c4411d70987dd9d7cf815fd20636</anchor>
      <arglist>(const Eigen::Vector2d &amp;point2d, const double depthEstimate)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addPoint</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>adf5ee87ea11a6cab6f9effb1628c0d93</anchor>
      <arglist>(const Eigen::Vector3d &amp;point3d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPoint</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a5c8b1d26e4c8c970a8b02746913491aa</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::string &amp;bName, const sva::PTransformd &amp;X_b_p=sva::PTransformd::Identity())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>af8e70d3cc1064425d610a60e6238352d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updatePoint</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>acdf39d5bf2e7f92f8e55a709d8af7cff</anchor>
      <arglist>(const int pointId, const Eigen::Vector2d &amp;point2d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updatePoint</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a68e323a8724a33f79e07de4052cb9629</anchor>
      <arglist>(const int pointId, const Eigen::Vector2d &amp;point2d, const double depthEstimate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updatePoint</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a6ce14c0643087decf45aeb77fd3bc0aa</anchor>
      <arglist>(const int pointId, const Eigen::Vector3d &amp;point3d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeComponents</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a33ccfd992094d6c78eaf85f52daca6cb</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc, const SolverData &amp;data, const Eigen::Vector2d &amp;point2d, const double depth, rbd::Jacobian &amp;jac, const int bodyIndex, const sva::PTransformd &amp;X_b_p, Eigen::MatrixXd &amp;fullJacobian, Eigen::Vector2d &amp;bCommonTerm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateNrVars</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a23ef6ffd5f66666c81c01965daba5ea3</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>ae6d4c6af9692608c584c8a6f1e257012</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>nameInEq</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>ad3138d95c076c482361b9cfb126ac360</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>descInEq</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>ab554c70b01c52d067b1b1b2d65b3114b</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int line)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>nrInEq</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a41168d2b35768c1fb0bf149baf851dbb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>maxInEq</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>ab3fefdb1f81c57ba9ece5509d88c262c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>AInEq</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a5452f34929f332dbc239c72f619df3e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>bInEq</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a27cdd3ac7d6aa46ba84a857052f08310</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::Inequality</name>
    <filename>a00040.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Inequality</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a8971f0b14e1d2ea3e5b126692ff6fcf8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>maxInEq</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a8881dfaffbeff43b333cf9d30675f67f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>nrInEq</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a827636676790ab9fc84d6fe341f31b00</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>AInEq</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a7aa735890ecd53799b4a1604188b9b21</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>bInEq</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>ac3bdd0a2b50b6560f33b0e5fdd106bfa</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>nameInEq</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>ae498b14de5f3bb6786e04828c74ea88b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>descInEq</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>af5215e8d2075f290375e9e4342cfb801</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int i)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToSolver</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>ace2e121e878fea4264e37d5cb15dc868</anchor>
      <arglist>(QPSolver &amp;sol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromSolver</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a6b76e75f578ae739fa31aecbddc937fc</anchor>
      <arglist>(QPSolver &amp;sol)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::JointAccConstr</name>
    <filename>a00041.html</filename>
    <base>ConstraintFunction&lt; Bound &gt;</base>
    <member kind="function">
      <type></type>
      <name>JointAccConstr</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a31a81c77c61d866340a147c08732d467</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, double slack=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_alphaD</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>af0631059bd4d989b1be5240d142acece</anchor>
      <arglist>(Eigen::VectorXd &amp;alphad_des)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateNrVars</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a26010c6729445d73cf1372504f79b86d</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a0b07b04db5cca627c4d48a2c25be8108</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>nameBound</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a63183e481838da6c7e7c92db57ff9c17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>descBound</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>ab1d388fa159f51845ea5f26390ded06a</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int line)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>beginVar</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a1165f52572586d67a29d396ad0b01d5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>maxEq</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>af7e5a89acafe52b5f790524991a78b86</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>nrEq</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a316e975611ac8847aa86aee39af64b37</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>Lower</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a5bff5527c00161dfb86bcabda5fa3bcc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>Upper</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a055a32cc254476fa25a330a05a3fb866</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tasks::qp::JointGains</name>
    <filename>a00042.html</filename>
    <member kind="function">
      <type></type>
      <name>JointGains</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>add0cd36307b044425a1175e82be95c8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JointGains</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a5518172f15ccd822adeb64786855a9cb</anchor>
      <arglist>(const std::string &amp;jName, double stif)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JointGains</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a84e051a4f37a2a15de59b3d900953f87</anchor>
      <arglist>(const std::string &amp;jName, double stif, double damp)</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>jointName</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a08d3a7fa0479efaaa54f8e49301e280f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>stiffness</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>ab0a41a5153da3a170bafea2c4453a7a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>damping</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a590ae8fd57e2a1e708491f05f3262ad7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::JointLimitsConstr</name>
    <filename>a00043.html</filename>
    <base>ConstraintFunction&lt; Bound &gt;</base>
    <member kind="function">
      <type></type>
      <name>JointLimitsConstr</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a79767272482e70fc2f72c97458a7d752</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, QBound bound, double step)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateNrVars</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a1111b414928906d149c4f7db2700d78d</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>af3645fe895f0d58ebd85af95cee0170d</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>nameBound</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>ac17f66e4cf9dac1c287e5a0e92248816</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>descBound</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a99a5770280cb96622684c52fe81043e2</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int line)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>beginVar</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>ac5781886a9b5aef692c7f0b140a62a1e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>Lower</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a5dc0659d463b9536214da3b83f5db0ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>Upper</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>aacf71fb30418d08f6323b6fd0aa25d95</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::JointsSelector</name>
    <filename>a00044.html</filename>
    <base>tasks::qp::HighLevelTask</base>
    <class kind="struct">tasks::qp::JointsSelector::SelectedData</class>
    <member kind="function">
      <type></type>
      <name>JointsSelector</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a75375dfa12416551b0f1d6e8835addd3</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, HighLevelTask *hl, const std::vector&lt; std::string &gt; &amp;selectedJointsName)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; SelectedData &gt;</type>
      <name>selectedJoints</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a7d186469793e27a4ed7a54edcc7d8193</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dim</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a2da34bb437142fc0a5448f2f8d70ab83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a908339c391af378abb76b02d6a3e7993</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a6b3e5a119a4c7735e935cbd494819cf6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a40ecbb7e9a3ad977b668eaf4168a719a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>ae5a4b15b68b44a31d3d632afa1e1041c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a8b577d797e9eed93d8e4b919e144a367</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static JointsSelector</type>
      <name>ActiveJoints</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a1a77d026c1fe5211b95cae74910da98b</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, HighLevelTask *hl, const std::vector&lt; std::string &gt; &amp;activeJointsName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static JointsSelector</type>
      <name>UnactiveJoints</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>aae714f4156f8eb905fa3aace3d303fc9</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, HighLevelTask *hl, const std::vector&lt; std::string &gt; &amp;unactiveJointsName)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tasks::qp::JointStiffness</name>
    <filename>a00045.html</filename>
    <member kind="function">
      <type></type>
      <name>JointStiffness</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a980bad314fc5bfe87b586df8195e6520</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JointStiffness</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a8c087e0882456550df07bda258fa420a</anchor>
      <arglist>(const std::string &amp;jName, double stif)</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>jointName</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>ad4bedc4f72672de6e850add50e757853</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>stiffness</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>ad533f855fbb99ea34bad2832042c973e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::LambdaConstr</name>
    <filename>a00046.html</filename>
    <base>ConstraintFunction&lt; Equality &gt;</base>
    <member kind="function">
      <type></type>
      <name>LambdaConstr</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>ac803fe8dd699b18b43cd7dabad8874a0</anchor>
      <arglist>(int robotIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_lambda</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>ac2022f0da0992b636df6eeb262e09ba2</anchor>
      <arglist>(Eigen::VectorXd &amp;lambda_des)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateNrVars</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>ad3b2ce2bb68a8bb20cd5149ef19e3746</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a308e8ae2c473b33c376427c6ff5e61bd</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbc, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>nameEq</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a81233302dcc2e461d9ff7278901e69de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>descEq</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a43acace7d5d621f30bef86b9aaa1d126</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int line)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>beginVar</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a1c90776f5f60ddc58e5ca68b1954cd13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>maxEq</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a224b2313cc792569109a4badfa975946</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>nrEq</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>abb5792cdcf64c9e931a75b7f6f86a2cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>AEq</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a65275205534cd5b6d82958c1faee1c38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>bEq</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a63bb798dc11fea4e5a2a482b8fba0ded</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::LinVelocityTask</name>
    <filename>a00047.html</filename>
    <base>tasks::qp::HighLevelTask</base>
    <member kind="function">
      <type></type>
      <name>LinVelocityTask</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>ae921424aba1fecef6930c77b806ac926</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const std::string &amp;bodyName, const Eigen::Vector3d &amp;vel, const Eigen::Vector3d &amp;bodyPoint=Eigen::Vector3d::Zero())</arglist>
    </member>
    <member kind="function">
      <type>tasks::LinVelocityTask &amp;</type>
      <name>task</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a7e3bb105336bad70048f7e23d9e47033</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>velocity</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a7e8ca63a563784c7ed90c2c36d71eca0</anchor>
      <arglist>(const Eigen::Vector3d &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>velocity</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>ad2ef5910140a364e8f598d8fabc426d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bodyPoint</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a941b5b6c91e6ef5e4fe8b17f292960b9</anchor>
      <arglist>(const Eigen::Vector3d &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>bodyPoint</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a529060db7ae536679c8f671636b5f86f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dim</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a8a2638aea03724c35a28eff3e0f902c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a08761d55162b1fb3bb2673dec2e3e42d</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a0eb49a401acbcf7e8161985de2577bd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>abb54c45a211348b4ebf0e5709906f0e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>af9770bf1237a0db73380d9e0151f2d87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>aa67eb8e53005797ad009e21f1e1f76b2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::LinVelocityTask</name>
    <filename>a00048.html</filename>
    <member kind="function">
      <type></type>
      <name>LinVelocityTask</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a5cd35cfbfb12de24095edf651e58700f</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const std::string &amp;bodyName, const Eigen::Vector3d &amp;vel, const Eigen::Vector3d &amp;bodyPoint=Eigen::Vector3d::Zero())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>velocity</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a9ced043d1c378186715551e512a7574d</anchor>
      <arglist>(const Eigen::Vector3d &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>velocity</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a97006348fc2e010083c70b874fd0123c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bodyPoint</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>aa27b5d80826e16b98918d7c80b31c769</anchor>
      <arglist>(const Eigen::Vector3d &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>bodyPoint</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>ae844424fb6d92b9bb4421e48ca2f8e6c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a01ac37878ebe04770a55233ef64e5c62</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a8c8da46a5b3abe0893135fc40fcb3075</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc, const std::vector&lt; sva::MotionVecd &gt; &amp;normalAccB)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateDot</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a291555f05786d8fac07082085d0b6f36</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>afa9ce92a9b2b79be11b5a7c995010ec7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a4643bad99a755d2ca2ca73b2a80bf912</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>ace56ca66a07831a2575ff281dd3fb8f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>af07871a32bee95d421c610945f02b370</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jacDot</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a84ae3c792d0b51bd1776536911efd9dc</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::LSSOLQPSolver</name>
    <filename>a00049.html</filename>
    <base>tasks::qp::GenQPSolver</base>
    <member kind="function">
      <type></type>
      <name>LSSOLQPSolver</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>aa645ba408bf6eb66104caf2c95b2ea44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateSize</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>ad0866aa00d27ebd946774ee5862c55e2</anchor>
      <arglist>(int nrVars, int nrEq, int nrInEq, int nrGenInEq)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateMatrix</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a5eed8478f413c578057efaa4a3a7684d</anchor>
      <arglist>(const std::vector&lt; Task * &gt; &amp;tasks, const std::vector&lt; Equality * &gt; &amp;eqConstr, const std::vector&lt; Inequality * &gt; &amp;inEqConstr, const std::vector&lt; GenInequality * &gt; &amp;genInEqConstr, const std::vector&lt; Bound * &gt; &amp;boundConstr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>solve</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a5b3e5522e4d633bb6b7c59b945a4f11b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>result</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>af9aaae8d96fa2469dce321cea201a69d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>errorMsg</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a710a1f1b2e91b05fac21228fad56f2e8</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; Task * &gt; &amp;tasks, const std::vector&lt; Equality * &gt; &amp;eqConstr, const std::vector&lt; Inequality * &gt; &amp;inEqConstr, const std::vector&lt; GenInequality * &gt; &amp;genInEqConstr, const std::vector&lt; Bound * &gt; &amp;boundConstr, std::ostream &amp;out) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::MomentumTask</name>
    <filename>a00050.html</filename>
    <base>tasks::qp::HighLevelTask</base>
    <member kind="function">
      <type></type>
      <name>MomentumTask</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>af2696f6c37fc2fe6b4976cae7f3ad882</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const sva::ForceVecd &amp;mom)</arglist>
    </member>
    <member kind="function">
      <type>tasks::MomentumTask &amp;</type>
      <name>task</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>aa09068452fc37a606b39bfbd125773a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>momentum</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>ab00abc708b5628eb27e36146dea5064e</anchor>
      <arglist>(const sva::ForceVecd &amp;mom)</arglist>
    </member>
    <member kind="function">
      <type>const sva::ForceVecd</type>
      <name>momentum</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>aacfe57e9e9670bcd71e6b259d5741568</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dim</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>af0022e350f72f54dc6f3244e5c7028f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a76a8df3e34afbb4d2d921d0c4583acea</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mb, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbc, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>ac5876a6ddd21a3e0e8b58004df93c489</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a80d616e3efb0884c5cd2c40274afbe5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>af060ad6f9958cbb66eb9f2486d271e0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a1530660a4fbb3808a7593e9057bae39e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::MomentumTask</name>
    <filename>a00051.html</filename>
    <member kind="function">
      <type></type>
      <name>MomentumTask</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a7f72fc82102c98e12fb7c05a88576943</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const sva::ForceVecd mom)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>momentum</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>ada28df5a2923384ea391fe592c776b64</anchor>
      <arglist>(const sva::ForceVecd &amp;mom)</arglist>
    </member>
    <member kind="function">
      <type>const sva::ForceVecd</type>
      <name>momentum</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a3dda8977ad22f59024f37da5b252e700</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>af27f19f834631cb7b9e06128b8dbb00c</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a22c6f63e7a56e20bf9293955781f3a95</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc, const std::vector&lt; sva::MotionVecd &gt; &amp;normalAccB)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateDot</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a0093f5739a9c2078d7ea883e7f477f7b</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a7269a359475bbe931b2b2262aefb5cfa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a75f397e34e4eb220428ce9b4e28a2b87</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a2b5fd4bbce5a9841957209cd58b42a25</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>ab4a22b81eb59f47e29b81eb107ced331</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jacDot</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a54966b2c170616b1a09b8a968101b1ad</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::MotionConstr</name>
    <filename>a00052.html</filename>
    <base>tasks::qp::MotionConstrCommon</base>
    <member kind="function">
      <type></type>
      <name>MotionConstr</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a5dc804e968c47791630468c06584d2d2</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const TorqueBound &amp;tb)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>abf577470d36589e452535045431e674f</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd</type>
      <name>matrix</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a6d1987d41708ec4f54492a00df3a8879</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Eigen::MatrixXd</type>
      <name>contactMatrix</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a392675cb972c47829e8e2d8667589895</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const rbd::ForwardDynamics</type>
      <name>fd</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>ae0223199ac4f6da62bc5994cc612384d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>torqueL_</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a2dc3ec557ec06e2e2937fe7157753977</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>torqueU_</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a87385049d7441292c5250ec072e020d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::MotionConstrCommon</name>
    <filename>a00053.html</filename>
    <base>ConstraintFunction&lt; GenInequality &gt;</base>
    <class kind="struct">tasks::qp::MotionConstrCommon::ContactData</class>
    <member kind="function">
      <type></type>
      <name>MotionConstrCommon</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>ae71be277b8002ce97fe338eab8d084af</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeTorque</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a0f5c31134d11d698137ff7a7f16c25b6</anchor>
      <arglist>(const Eigen::VectorXd &amp;alphaD, const Eigen::VectorXd &amp;lambda)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>torque</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>ad48ab078f08472ac872bb827d2395533</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>torque</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a9bebeba82ad807c195bcaad90414a9d5</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateNrVars</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a896082d1b385150703048a1772a1c81e</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeMatrix</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a783cef81086c210b0430dff9829391f7</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mb, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>nameGenInEq</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>ab52ffb663ee2af9d48c625a59b806bfa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>descGenInEq</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a89c7bde2f2001957ea4e7bde7579b32d</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int line)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>maxGenInEq</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a3908c2d89470ea9e7b43a726e99362c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>AGenInEq</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>acc6f1106b6611b2b4e08b936fcdc4eed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>LowerGenInEq</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a11a1fca5889cd1f891f0e76334a75f7b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>UpperGenInEq</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>aebf52a578ad86ab878a3a970af28e65a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>robotIndex_</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a3843d4962b6ddfd6daebacb7d8e8c7f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>alphaDBegin_</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>abab4bc2b7dfe4ea581184b008702f9ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nrDof_</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a5f03c92906291ec277c53991dfaf42c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lambdaBegin_</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a35510f97cf24f0e6292ce4c10481ab1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>rbd::ForwardDynamics</type>
      <name>fd_</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>aa0b1ab80838be2a021ebec95522228dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::MatrixXd</type>
      <name>fullJacLambda_</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>add4e8d750eefe4d196f4b124d04bbba3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::MatrixXd</type>
      <name>jacTrans_</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a017d89ce7edd9cef0dded59fd5c92960</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::MatrixXd</type>
      <name>jacLambda_</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>afc04e4c41aa5201d796ad9d2e15c4728</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ContactData &gt;</type>
      <name>cont_</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a9447370a70ac6a0ac21d102b890447ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>curTorque_</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>af8dfcd48202dd0d87d0daa621eab9277</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::MatrixXd</type>
      <name>A_</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a2e1b827c418a55a43cb20133caa82d35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>AL_</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a8d3023d1d06e2565a9eea6d8bafbc6d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>AU_</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a8541b39617273f08843bc213c60baaf9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::MotionPolyConstr</name>
    <filename>a00054.html</filename>
    <base>tasks::qp::MotionConstrCommon</base>
    <member kind="function">
      <type></type>
      <name>MotionPolyConstr</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a93f49c72d7b08577c529416df3a10587</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const PolyTorqueBound &amp;ptb)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>afbc8f05242e49ecba6c066ea574ff11b</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Eigen::VectorXd &gt;</type>
      <name>torqueL_</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a0c79e9d0ac757a2fa79c822cf2f72ab7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Eigen::VectorXd &gt;</type>
      <name>torqueU_</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a1b6a5c6234adbd54efbbecca67bc9c4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>jointIndex_</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a1cb6d383d1f32142b8215f626496fe63</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::MotionSpringConstr</name>
    <filename>a00055.html</filename>
    <base>tasks::qp::MotionConstr</base>
    <class kind="struct">tasks::qp::MotionSpringConstr::SpringJointData</class>
    <member kind="function">
      <type></type>
      <name>MotionSpringConstr</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>aae4c8dbb6054294ea28eda06f032219a</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const TorqueBound &amp;tb, const std::vector&lt; SpringJoint &gt; &amp;springs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a86b987047b0376795d6a9f8512f45b7b</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbc, const SolverData &amp;data)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; SpringJointData &gt;</type>
      <name>springs_</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>aad13ef10076249984674dec4c1798299</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::MultiCoMTask</name>
    <filename>a00056.html</filename>
    <base>tasks::qp::Task</base>
    <member kind="function">
      <type></type>
      <name>MultiCoMTask</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a83d448ccdac0d5ea230e8434b45dcf5f</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mb, std::vector&lt; int &gt; robotIndexes, const Eigen::Vector3d &amp;com, double stiffness, double weight)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiCoMTask</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>aeb784606cbeff3dd1f11242220b0a321</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mb, std::vector&lt; int &gt; robotIndexes, const Eigen::Vector3d &amp;com, double stiffness, const Eigen::Vector3d &amp;dimWeight, double weight)</arglist>
    </member>
    <member kind="function">
      <type>tasks::MultiCoMTask &amp;</type>
      <name>task</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a8f73be76e6cfcb62ddce82f154531fc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>com</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a24e9620f39cd1373795f289dee790358</anchor>
      <arglist>(const Eigen::Vector3d &amp;com)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d</type>
      <name>com</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>abcc855d6d7fcc929f22f19c1323e45c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateInertialParameters</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a005cdfb54ff499a7dcae0a1844ec22b6</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stiffness</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>aa677a20d3e0cf3275b22051147e6d200</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffness</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a8221af719aa9467bc77dee576bb65150</anchor>
      <arglist>(double stiffness)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dimWeight</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>ab6ab2c8b3a202e1a486917d670f16d90</anchor>
      <arglist>(const Eigen::Vector3d &amp;dim)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>dimWeight</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a4de5cbc77dff41edb8e40d85fea61b4c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::pair&lt; int, int &gt;</type>
      <name>begin</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a062bdef635f770676487cdcd4c81f9ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateNrVars</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a69ee8ce277acb2d4c961c3f245ea769f</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a84c2db7cab2a39448e9da62ed2a1fd90</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>Q</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a7c3d3ea41b56384689c2f385bd85a28b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>C</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a2284c62d9096941dc156f0084052876f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>ae05671131b11746457977a8346efe93c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a2ea0ea9b72d3645e9169ee8934c93784</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::MultiCoMTask</name>
    <filename>a00057.html</filename>
    <member kind="function">
      <type></type>
      <name>MultiCoMTask</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a481fe0d7f675e85e5bd9b867693dfa33</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, std::vector&lt; int &gt; robotIndexes, const Eigen::Vector3d &amp;com)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>robotIndexes</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a2b7bf71e59826b6042615237e83a802b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>com</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a22b45d38d8c2f4e9cd4dca94f0a03177</anchor>
      <arglist>(const Eigen::Vector3d &amp;com)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d</type>
      <name>com</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>ae9e0ae8028a813d0b7222551b4d6f6f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateInertialParameters</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a0eddb2f22c0eb8c99c82bb20091d5c1b</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a5ff62c598d20e5fcb3369c796b41b65b</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a98822f979d05e4110cda215928c975b3</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const std::vector&lt; std::vector&lt; sva::MotionVecd &gt;&gt; &amp;normalAccB)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a12b29eecea86d5d97dd8ec8404c94a00</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const std::vector&lt; Eigen::Vector3d &gt; &amp;coms, const std::vector&lt; std::vector&lt; sva::MotionVecd &gt;&gt; &amp;normalAccB)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a6566a87c95ee4f0bcca7fb23e15b2a05</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a630f6bf47d36154c2bdf17e57d67f207</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>ade4415c7a2709524621e483168d35c51</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>ad01b6fe4dcd14ae290e9342a7cd9d975</anchor>
      <arglist>(int index) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::MultiRobotTransformTask</name>
    <filename>a00058.html</filename>
    <base>tasks::qp::Task</base>
    <member kind="function">
      <type></type>
      <name>MultiRobotTransformTask</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a438e347acb8969ab6a948c2e726bab66</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int r1Index, int r2Index, const std::string &amp;r1BodyName, const std::string &amp;r2BodyName, const sva::PTransformd &amp;X_r1b_r1s, const sva::PTransformd &amp;X_r2b_r2s, double stiffness, double weight)</arglist>
    </member>
    <member kind="function">
      <type>tasks::MultiRobotTransformTask &amp;</type>
      <name>task</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>ad333f1aa17a31d472a9548d1823dc012</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>X_r1b_r1s</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a3f042cc46b00c04c05133f2e319bc0e2</anchor>
      <arglist>(const sva::PTransformd &amp;X_r1b_r1s)</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>X_r1b_r1s</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>aa84b4a37c9f118222aba20d35fff8ada</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>X_r2b_r2s</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a79b01da25b40a7c24c449976394da2eb</anchor>
      <arglist>(const sva::PTransformd &amp;X_r2b_r2s)</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>X_r2b_r2s</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a4c8fdf86e544c1dec78dd09a92a09606</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stiffness</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a4f5a72d97d5efac3d6b0f200f85a4480</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffness</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>ab3e574aef688945a13ab3de0cda4924a</anchor>
      <arglist>(double stiffness)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dimWeight</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a3da35f9a95d597d82e640729611166bf</anchor>
      <arglist>(const Eigen::Vector6d &amp;dim)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>dimWeight</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>aa6a600a8a3188db312096d916ccd991b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::pair&lt; int, int &gt;</type>
      <name>begin</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a2835a8b6b3933d195bc0d9e8bee9e90d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateNrVars</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>aa45bda21341da9edf34eb4213f50389b</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a4935db733d290cdb7f9fe0cc000c3638</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>Q</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a62f9c05a81804d2b7fd24d6bee6031c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>C</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>acc5a56b4053dae4c5a9bd151a7b0883a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>aecffe00dd8523436b7715d1f2851cb28</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>ac0fdbcfda446ac7024f7d660acdae823</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::MultiRobotTransformTask</name>
    <filename>a00059.html</filename>
    <member kind="function">
      <type></type>
      <name>MultiRobotTransformTask</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a8f6e1b8388384c5089b9297d65a848d8</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int r1Index, int r2Index, const std::string &amp;r1BodyName, const std::string &amp;r2BodyName, const sva::PTransformd &amp;X_r1b_r1s, const sva::PTransformd &amp;X_r2b_r2s)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>r1Index</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a92ad69a29fcd1752fb915d3e37eaf915</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>r2Index</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>afef4204b0b8d64fdd4277aa53f6a5a88</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>X_r1b_r1s</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a1a9bbc561f3314f9eb435d94145c5567</anchor>
      <arglist>(const sva::PTransformd &amp;X_r1b_r1s)</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>X_r1b_r1s</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a771426e1013d7df2c2637557244f320e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>X_r2b_r2s</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>af7058dcac3a76234456ffc14d971c40c</anchor>
      <arglist>(const sva::PTransformd &amp;X_r2b_r2s)</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>X_r2b_r2s</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>ad165874fc245e2c9efcbe5e66500cee4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a251727256873e2bd2df730be58bd9781</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const std::vector&lt; std::vector&lt; sva::MotionVecd &gt;&gt; &amp;normalAccB)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>ad346c95ac6120aa4a01d21159c9f6396</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a7e11e3a9d61778b8ed90cb8a099d9084</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a27008f3c88e43325e1510e056204d67b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>aaeafff73729c4dd087b68403e26fde5c</anchor>
      <arglist>(int index) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::OrientationTask</name>
    <filename>a00060.html</filename>
    <base>tasks::qp::HighLevelTask</base>
    <member kind="function">
      <type></type>
      <name>OrientationTask</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a9ca2da9ac942d356c2d15af3e6142c5f</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robodIndex, const std::string &amp;bodyName, const Eigen::Quaterniond &amp;ori)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OrientationTask</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a0d09d04a207fbbc58c836a2a0a4eedc0</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robodIndex, const std::string &amp;bodyName, const Eigen::Matrix3d &amp;ori)</arglist>
    </member>
    <member kind="function">
      <type>tasks::OrientationTask &amp;</type>
      <name>task</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>adaebfcb08486fac0cd18b40199385ea6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>orientation</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a9de2c07ae093d84cc59539c10a71b4d8</anchor>
      <arglist>(const Eigen::Quaterniond &amp;ori)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>orientation</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>abd0659080c43b461360e23482f8d5846</anchor>
      <arglist>(const Eigen::Matrix3d &amp;ori)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Matrix3d &amp;</type>
      <name>orientation</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a4a655cf08ccdf7819ef33133bcfef32d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dim</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a0b00a0f0a23dd05c9ed627ccadb97533</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a2f54488a7813a8869084266c13498fc5</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>ae0820a08331d8469acde0a2eb60ac832</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a79674938168b9fdcf7af7d1524b6ab59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a90514deef0e7c41c7b06cb6cd93656ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a11f2d413854074d9f71d97928f6a0585</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::OrientationTask</name>
    <filename>a00061.html</filename>
    <member kind="function">
      <type></type>
      <name>OrientationTask</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>ad2446f810c20ba64897cd14ca9ac5111</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const std::string &amp;bodyName, const Eigen::Quaterniond &amp;ori)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OrientationTask</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a56ba8d07126797bb8979983637d148db</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const std::string &amp;bodyName, const Eigen::Matrix3d &amp;ori)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>orientation</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a49c880820a1b5c8df79dd9e334be3659</anchor>
      <arglist>(const Eigen::Quaterniond &amp;ori)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>orientation</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a66fd057c7e3881acde06654fe7b78b3f</anchor>
      <arglist>(const Eigen::Matrix3d &amp;ori)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Matrix3d &amp;</type>
      <name>orientation</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a9e1bbffe42362b135318827388f04a1a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a3742876c52257b6981ff0f3a1ba49187</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a0a3f138249bb1e3a50b38d2d146ce9bd</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc, const std::vector&lt; sva::MotionVecd &gt; &amp;normalAccB)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateDot</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a9eee6faa64e247fe82f8c7564fb4ef52</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a3a9ff29a6efc9f53174e3561b815785c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a402881a288b881e3a4561f6670731407</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>ac5df40591ba2a9524954ca3489fe2388</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a78e2f043e8ba0e84dd85273f97c9ef05</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jacDot</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a43b628e830d79d245bc7068c1c796a6a</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::OrientationTrackingTask</name>
    <filename>a00062.html</filename>
    <base>tasks::qp::HighLevelTask</base>
    <member kind="function">
      <type></type>
      <name>OrientationTrackingTask</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a9093bee511f486da7ef68cbd8675fffe</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const std::string &amp;bodyName, const Eigen::Vector3d &amp;bodyPoint, const Eigen::Vector3d &amp;bodyAxis, const std::vector&lt; std::string &gt; &amp;trackingJointsName, const Eigen::Vector3d &amp;trackedPoint)</arglist>
    </member>
    <member kind="function">
      <type>tasks::OrientationTrackingTask &amp;</type>
      <name>task</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>af19b576f25879b9372466010f75b45a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>trackedPoint</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a5dad8875dc7ea013ca5642959e1fc590</anchor>
      <arglist>(const Eigen::Vector3d &amp;tp)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>trackedPoint</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>aad0af76625583405e5b79e0bab4eed70</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bodyPoint</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>ac00a77ee9ba777f8d4787d2de7b8d2d1</anchor>
      <arglist>(const Eigen::Vector3d &amp;bp)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>bodyPoint</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a357dd9c669964202214ba792eb39bab0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bodyAxis</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a96cd54d60050fbf75507938f666364e1</anchor>
      <arglist>(const Eigen::Vector3d &amp;ba)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>bodyAxis</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a9cd22c4a1a126f356de08ec46ab4ab98</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dim</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a9c266b2716b913096eb4be96865eb040</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a1f345bc2addfd79b9e34485f5540f071</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a7a83bb650d26e2a84675a16add6fef82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>abc32cec7d7246b3d7a75f8468f882910</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>add30f56bf6e0022d9a897f29f7d239ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a544323fae5849bd6033ba6a08176755c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::OrientationTrackingTask</name>
    <filename>a00063.html</filename>
    <member kind="function">
      <type></type>
      <name>OrientationTrackingTask</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>ad1edc9ba39bb298ec7a1cbc30861140d</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const std::string &amp;bodyName, const Eigen::Vector3d &amp;bodyPoint, const Eigen::Vector3d &amp;bodyAxis, const std::vector&lt; std::string &gt; &amp;trackingJointsName, const Eigen::Vector3d &amp;trackedPoint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>trackedPoint</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a59dbb085045905d0e4e2091fe6724fdf</anchor>
      <arglist>(const Eigen::Vector3d &amp;tp)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>trackedPoint</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>adb6eaad4fae9cf7cc6a4382218771f1f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bodyPoint</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>aaa678759585e9637a17c6e683217f8b1</anchor>
      <arglist>(const Eigen::Vector3d &amp;bp)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>bodyPoint</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a246b32cd749155dd540e9a092b4589af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bodyAxis</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a5381bcc6a385319e3cb7819f8ecd38fe</anchor>
      <arglist>(const Eigen::Vector3d &amp;ba)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>bodyAxis</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a7e33d532820a52a1c5634ab26bead106</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>ae97d66bbc9c1f7993f5704d7ea229a1e</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateDot</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a371555e79bbb2217b373de54783fb55f</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a70ab5fae20b8faaa1280469f6b910c68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>jacDot</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>abe9bdf8376dbeeea30d171db7ccb2aa7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a3c1634367431d102e3d722cf666b5178</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::PIDTask</name>
    <filename>a00064.html</filename>
    <base>tasks::qp::SetPointTaskCommon</base>
    <member kind="function">
      <type></type>
      <name>PIDTask</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a783c2670608cceb45f38b16401b0a26d</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, HighLevelTask *hlTask, double P, double I, double D, double weight)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PIDTask</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>ac2fdc130fa9f635ac91a6481e7efbda9</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, HighLevelTask *hlTask, double P, double I, double D, const Eigen::VectorXd &amp;dimWeight, double weight)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>P</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a7a972f4bcbfef6f9ed77973c3971790a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>P</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>aa0c88004bc4ea75b740e9bc99c74cc47</anchor>
      <arglist>(double p)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>I</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a962d3bffa22573570659791feeff39d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>I</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>acd5b82eea8b6aabdc79009794208ce9e</anchor>
      <arglist>(double i)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>D</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a3d381faac78840c75f0a1089bd21d423</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>D</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>ac77eb878ae008a6368bc21a14179d7b7</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>error</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a76f9bbf011664a28795196d792cab96a</anchor>
      <arglist>(const Eigen::VectorXd &amp;err)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>errorD</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>ad6f5e4e28b24ab2675d397c0467c6191</anchor>
      <arglist>(const Eigen::VectorXd &amp;errD)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>errorI</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a5fc5bd479b8df6b3394688a42281c49e</anchor>
      <arglist>(const Eigen::VectorXd &amp;errI)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a3451251f555c6255871ca250bef2c3e9</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tasks::PolyTorqueBound</name>
    <filename>a00065.html</filename>
    <member kind="function">
      <type></type>
      <name>PolyTorqueBound</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a3dd3f2707509e52e84f0d1ed3edc1072</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolyTorqueBound</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a60ae0a607860c7b1eeb10c3eb1900d8d</anchor>
      <arglist>(std::vector&lt; std::vector&lt; Eigen::VectorXd &gt;&gt; lPTB, std::vector&lt; std::vector&lt; Eigen::VectorXd &gt;&gt; uPTB)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::vector&lt; Eigen::VectorXd &gt; &gt;</type>
      <name>lPolyTorqueBound</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a2940edde14b86bf399b4122861178b42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::vector&lt; Eigen::VectorXd &gt; &gt;</type>
      <name>uPolyTorqueBound</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a7f89616b892fe7142ff2159fbf3454b9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::PositionBasedVisServoTask</name>
    <filename>a00066.html</filename>
    <member kind="function">
      <type></type>
      <name>PositionBasedVisServoTask</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>abe06e4b1ed45ed0009b77b46b558bb16</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const std::string &amp;bodyName, const sva::PTransformd &amp;X_t_s, const sva::PTransformd &amp;X_b_s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PositionBasedVisServoTask</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>a2f7b68a83a47b63176246f5e32207331</anchor>
      <arglist>(const PositionBasedVisServoTask &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PositionBasedVisServoTask</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>a0e31b0b7e5c2c76094852a15b8a53fca</anchor>
      <arglist>(PositionBasedVisServoTask &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>PositionBasedVisServoTask &amp;</type>
      <name>operator=</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>aebe6dd5ac9f7688125ac747addd295dd</anchor>
      <arglist>(const PositionBasedVisServoTask &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PositionBasedVisServoTask &amp;</type>
      <name>operator=</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>a2a0d8bb48bc7ed8983808194dbaf33d4</anchor>
      <arglist>(PositionBasedVisServoTask &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>error</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>ae5aee442b94ceb3dae1a4dd51bc9d8fb</anchor>
      <arglist>(const sva::PTransformd &amp;X_t_s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>aa1075ff878937412274bcc7a27ce258b</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc, const std::vector&lt; sva::MotionVecd &gt; &amp;normalAccB)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>ab44f41d717d33c0d0b75e5191a4bdc3a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>ad088cdfd34db7c96efa4d5f58973e6ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>aac9d51047ff43ce6eba8bfdc8af6038b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>a3126cbd8cd35af00a35898f490ab2b5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jacDot</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>ae685f220dc6c85ff03404d503d12c38a</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::PositionBasedVisServoTask</name>
    <filename>a00067.html</filename>
    <base>tasks::qp::HighLevelTask</base>
    <member kind="function">
      <type></type>
      <name>PositionBasedVisServoTask</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a354e8653167d8351ace362339c4db9b0</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const std::string &amp;bodyName, const sva::PTransformd &amp;X_t_s, const sva::PTransformd &amp;X_b_s=sva::PTransformd::Identity())</arglist>
    </member>
    <member kind="function">
      <type>tasks::PositionBasedVisServoTask &amp;</type>
      <name>task</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a08e523b76b079de3ac9d0b4e36e0b7a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>error</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a18f74604dedd9fab8d985bfde7f939af</anchor>
      <arglist>(const sva::PTransformd &amp;X_t_s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dim</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a213c833e65d8821116ed930b32c21198</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ae2be9316a68e3352ff9850015601f360</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>addb8a02a4ba76e638067765fd8b29969</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a81e9669a31c378801fc8ace3716333b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a7509e2a36c2857751d097e7ffd043218</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ab5fbbaae4c505a0b40f2877d01fffcb8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::PositionTask</name>
    <filename>a00068.html</filename>
    <base>tasks::qp::HighLevelTask</base>
    <member kind="function">
      <type></type>
      <name>PositionTask</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a4e62387a66f8fcda315b09ccb5b7a61e</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const std::string &amp;bodyName, const Eigen::Vector3d &amp;pos, const Eigen::Vector3d &amp;bodyPoint=Eigen::Vector3d::Zero())</arglist>
    </member>
    <member kind="function">
      <type>tasks::PositionTask &amp;</type>
      <name>task</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a7f25f8900bd1f60713f457d644d7f475</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>position</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>ab87c8b5a100da4d6368c11564676267f</anchor>
      <arglist>(const Eigen::Vector3d &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>position</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a500019988dc2896e10c4745fc6ea29ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bodyPoint</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a64ffb42b4665cbe52c05e8de5349f4bd</anchor>
      <arglist>(const Eigen::Vector3d &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>bodyPoint</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a79515aa826d1860cdd6515ff56d6a10d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dim</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>ac08c5709083422f77b5010eb639566de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>ab9a518fdacb343362bdc137c5b4628db</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mb, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbc, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a715f4550f89886785918c13746c6d2c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a87503b6c1c5888f368d741779ba8fc15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a35a4f2b1734947f87262833af830b7f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a887e17d1ffefaaf4d85269ce3424b857</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::PositionTask</name>
    <filename>a00069.html</filename>
    <member kind="function">
      <type></type>
      <name>PositionTask</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a1a41b45043e1586d8fc684471f34e9c0</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const std::string &amp;bodyName, const Eigen::Vector3d &amp;pos, const Eigen::Vector3d &amp;bodyPoint=Eigen::Vector3d::Zero())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>position</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a818b07e3aabb8b4706b47a1e95a47a87</anchor>
      <arglist>(const Eigen::Vector3d &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>position</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>aca0294a881e75f7af43b2666a2f828b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bodyPoint</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a7a2ca4be9a7dbeb95a4446874895628d</anchor>
      <arglist>(const Eigen::Vector3d &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>bodyPoint</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a123ff828b3fd7faf4d576bede62e6d30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a7d3a8ff6985e75f435c7fb37828bfaf7</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a8751f0ff4aceca35a755979bb7e2343a</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc, const std::vector&lt; sva::MotionVecd &gt; &amp;normalAccB)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateDot</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a838e7875aeb7b6d34a083a48ca1124d7</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a01a416ce741e88b04fc98a31c8bfb29f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>afb5cabf0a0399f8688a7bd1c3cf4eadb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a6b39e58b8305e300821a5e8ed5f4d3b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>af9eca50308e445489e18b05ae5a6e735</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jacDot</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a09842eb181d7b1e47474878ada3816d4</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::PositiveLambda</name>
    <filename>a00070.html</filename>
    <base>ConstraintFunction&lt; Bound &gt;</base>
    <member kind="function">
      <type></type>
      <name>PositiveLambda</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>ab5e4993a0155ac603bf2f87514a5709f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateNrVars</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a982ac755941340aff7b37e58b80776d3</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a4c3ce80dc5fb1d643450068c1edafeb3</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbc, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>nameBound</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a14a34763f31400c00f181b0ce4af16ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>descBound</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>af4919a218e7ebc42e2d948df9d7d656c</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int line)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>beginVar</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a868de006149d7b887cce670cdd6f13ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>Lower</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>aa4d4b62554acc6b27f92b7d64a953c6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>Upper</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>ab73a22c2f9c35a8813903ebee8dd7a13</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::PostureTask</name>
    <filename>a00071.html</filename>
    <base>tasks::qp::Task</base>
    <member kind="function">
      <type></type>
      <name>PostureTask</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>ac9dfdb13cd506fa1adb7d2c43d9d5e1a</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, std::vector&lt; std::vector&lt; double &gt; &gt; q, double stiffness, double weight)</arglist>
    </member>
    <member kind="function">
      <type>tasks::PostureTask &amp;</type>
      <name>task</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a55df27b6efa8444d80f0d462d9349539</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>posture</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>ab8f144fb1be81c5f810825b0bab3f390</anchor>
      <arglist>(std::vector&lt; std::vector&lt; double &gt; &gt; q)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>posture</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a89dac80f14a316d871cfd6a3cc7c1bff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stiffness</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>abb4a54cf33e890233cc4df311f3caa09</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>damping</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>ae508abc11e90ab603a1c35f1315bb45d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffness</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a1b101f6bb5ffca9134a1988f622076a5</anchor>
      <arglist>(double stiffness)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gains</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a739a5d0d760ba01113ea18aa3160c0da</anchor>
      <arglist>(double stiffness)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gains</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a0d16ea5b77758fe575667d0f43f319f9</anchor>
      <arglist>(double stiffness, double damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jointsStiffness</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>ad19b1e4174a86647c7b20ec5f8044b33</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; JointStiffness &gt; &amp;jsv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jointsGains</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a23e6411a9dda29177e1e1fef921a1ff8</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; JointGains &gt; &amp;jgv)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::pair&lt; int, int &gt;</type>
      <name>begin</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>aaf6a6605b9398b2b61f1c6c447bb704d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateNrVars</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a23c3c8071491b1240bf5b853f984a539</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>ac28c8a3638359099dc4ffd1e5b51a5b2</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>Q</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>ab9b8b7e5378af2db729f5748cf032af6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>C</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a05ff1f65ec126d649a0b089da2dc2d19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a73af5c8447d1bed9f8467e3802a6446c</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::PostureTask</name>
    <filename>a00072.html</filename>
    <member kind="function">
      <type></type>
      <name>PostureTask</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a092d48b0db5013fdbc33d724ba0c35cc</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, std::vector&lt; std::vector&lt; double &gt; &gt; q)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>posture</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>acc70d1cb44181f2e385250b91d80ea91</anchor>
      <arglist>(std::vector&lt; std::vector&lt; double &gt; &gt; q)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>posture</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>acd0b3b2e3a5bfcd9dd2ffc21d9983133</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a2aa0643bd9456d8b976136327f491d59</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateDot</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a62ea6be0a8a5abfd3481c0650d330674</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>af8518db13277737b5670b045f146a161</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>aeeae9bc2fa976c395ad5311f8ebf9077</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jacDot</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>aae1245b67b9e039c675888e698375d7c</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tasks::QBound</name>
    <filename>a00073.html</filename>
    <member kind="function">
      <type></type>
      <name>QBound</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a9adaf296f18e8d83bea065e232714633</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QBound</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>adb75555826261616bcfc52c56ec0a863</anchor>
      <arglist>(std::vector&lt; std::vector&lt; double &gt;&gt; lQB, std::vector&lt; std::vector&lt; double &gt;&gt; uQB)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>lQBound</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a8b98c406f6daa08af4a7883ba00cf844</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>uQBound</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a5ed0fe5130f66d16efcb5af347c9f9be</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::QLDQPSolver</name>
    <filename>a00074.html</filename>
    <base>tasks::qp::GenQPSolver</base>
    <member kind="function">
      <type></type>
      <name>QLDQPSolver</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a23f91afba5699bb41d02a3081c1ab59e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateSize</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a83806ed05748975e53d74ba779868a34</anchor>
      <arglist>(int nrVars, int nrEq, int nrInEq, int nrGenInEq)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateMatrix</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>aec1b18dfcc8d9fc8df01f066547482f7</anchor>
      <arglist>(const std::vector&lt; Task * &gt; &amp;tasks, const std::vector&lt; Equality * &gt; &amp;eqConstr, const std::vector&lt; Inequality * &gt; &amp;inEqConstr, const std::vector&lt; GenInequality * &gt; &amp;genInEqConstr, const std::vector&lt; Bound * &gt; &amp;boundConstr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>solve</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>ad7fd879ceb4dbb5e8a6eab8a50c18925</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>result</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a4313bcbe4a5a212a57925ac7518fefb2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>errorMsg</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>af3ce529f75e491c1cd60b91dd284eb80</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; Task * &gt; &amp;tasks, const std::vector&lt; Equality * &gt; &amp;eqConstr, const std::vector&lt; Inequality * &gt; &amp;inEqConstr, const std::vector&lt; GenInequality * &gt; &amp;genInEqConstr, const std::vector&lt; Bound * &gt; &amp;boundConstr, std::ostream &amp;out) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::QPSolver</name>
    <filename>a00075.html</filename>
    <member kind="function">
      <type></type>
      <name>QPSolver</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a3dc6ee572596111c1fd7a90e70bac431</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~QPSolver</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>abf17142db1a5e1f0cd77bdf57cede049</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solve</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a925c6ba27e4dc9f7f3ff35a9124e64c6</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solveNoMbcUpdate</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a76f4a180008ecb981e5dd3cbd97e363a</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateMbc</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>ab4d972c74c2ec82d3a9e30e2bde66601</anchor>
      <arglist>(rbd::MultiBodyConfig &amp;mbc, int robotIndex) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateConstrSize</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a01ef16a400b03ee96b693178f8f8c3c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nrVars</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a3566db8fd39179b06716346ca38772f8</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, std::vector&lt; UnilateralContact &gt; uni, std::vector&lt; BilateralContact &gt; bi)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nrVars</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>ab3dd3c5949d7a306ec01c2ced45a2122</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateTasksNrVars</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a5217d3aec78234cac3983eebf7e2fa6e</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateConstrsNrVars</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a6197b5622aa1e48dd933aa99af66442b</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateNrVars</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a4de9975883e87ef7819295a27906147e</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEqualityConstraint</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a33f936bcb429bdd74db4faba1607372e</anchor>
      <arglist>(Equality *co)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeEqualityConstraint</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a96b89e11b3af378cf9b061081bc26bdc</anchor>
      <arglist>(Equality *co)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nrEqualityConstraints</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a20646eec867bdd1e544e9c51b0fa77ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addInequalityConstraint</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>ae6c099ec98ffff884dcd08a8c93db8de</anchor>
      <arglist>(Inequality *co)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeInequalityConstraint</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>aee00caa7486892ea0f803472efb4abc5</anchor>
      <arglist>(Inequality *co)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nrInequalityConstraints</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a496396b0d99c21c254926b9d32697d71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGenInequalityConstraint</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>af2ba5e078ecf042af01652575d4b5ce3</anchor>
      <arglist>(GenInequality *co)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeGenInequalityConstraint</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>ab99e8755f30071d58d724289d13da805</anchor>
      <arglist>(GenInequality *co)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nrGenInequalityConstraints</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>ac0ed50bf81828807160892f25cceccc9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addBoundConstraint</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>aea99c8e6fb55de731fdb1717994c0c4d</anchor>
      <arglist>(Bound *co)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeBoundConstraint</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a98be3e0e5961c0417dc0bbcb13c4d7a9</anchor>
      <arglist>(Bound *co)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nrBoundConstraints</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>ac56a25588c58414fb8253658e0f166b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addConstraint</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a26214b5fb5b521512df2538b936c8b80</anchor>
      <arglist>(Constraint *co)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addConstraint</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>add0e6284f22242fe8d821eaf4d9b70aa</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, Constraint *co)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeConstraint</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a28bac3dae8cd554eda5f29615ae4b19a</anchor>
      <arglist>(Constraint *co)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nrConstraints</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>af2d0592b8a32bdd484e3770c3513f35c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTask</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>aa9872e1bed92555f20c1e390931ace43</anchor>
      <arglist>(Task *task)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTask</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>aaeb05cde3bd5055144315c20c847a969</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, Task *task)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeTask</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>ad9707224d937e84053cb245ababd0b9b</anchor>
      <arglist>(Task *task)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTasks</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a038c63bcc76e9ddc446a1b993d6e6d7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nrTasks</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>add804a458acef9d905cc325566e9dc55</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solver</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>aa813f55ac59255d31627483693db1766</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const SolverData &amp;</type>
      <name>data</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a6f86a9e6c939b33b46bca4484df70024</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SolverData &amp;</type>
      <name>data</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a8a1acf24ccb416ecd607eb1169499387</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>result</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a7a11343b7f3f6c2188e363e8b988f5c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>alphaDVec</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>aa3fbb4ad2c6fadf22bb4f9b557144243</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>alphaDVec</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a5f76ef1d7e804dadbb03d2682e831ecf</anchor>
      <arglist>(int rIndex) const </arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>lambdaVec</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>ab8bc374c0cf2c5f8689ca8306fde2caf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>lambdaVec</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a22b61afc697baa30079d4abcc2e7e4af</anchor>
      <arglist>(int cIndex) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>contactLambdaPosition</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a81571faef7d74f418291f07dc6df63d1</anchor>
      <arglist>(const ContactId &amp;cId) const </arglist>
    </member>
    <member kind="function">
      <type>boost::timer::cpu_times</type>
      <name>solveTime</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>af65b4697670c88406bbf62a3bf283107</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>boost::timer::cpu_times</type>
      <name>solveAndBuildTime</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>ad6ec0743b1161a807e8ae2c3575fe156</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>preUpdate</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a52520a9ff09e393a0dfd2b957550c8af</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>postUpdate</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a702d09b66239c2beccbf258e86c7835e</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, bool success)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::RelativeDistTask</name>
    <filename>a00076.html</filename>
    <base>tasks::qp::HighLevelTask</base>
    <member kind="function">
      <type></type>
      <name>RelativeDistTask</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>aee57978784aaab94d4f038f06afecb63</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const int rIndex, const double timestep, tasks::RelativeDistTask::rbInfo &amp;rbi1, tasks::RelativeDistTask::rbInfo &amp;rbi2, const Eigen::Vector3d &amp;u1=Eigen::Vector3d::Zero(), const Eigen::Vector3d &amp;u2=Eigen::Vector3d::Zero())</arglist>
    </member>
    <member kind="function">
      <type>tasks::RelativeDistTask &amp;</type>
      <name>task</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a585bc9c8c947501a9a551de98c199157</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>robotPoint</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>ad3c8ae8598019167f9097a0ed3563747</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const std::string &amp;bName, const Eigen::Vector3d &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>envPoint</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a39c737ceec7d5b3242df364d6df79815</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const std::string &amp;bName, const Eigen::Vector3d &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vector</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>ab195e00cfebc156a2e62be8f5ca0ff8f</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const std::string &amp;bName, const Eigen::Vector3d &amp;u)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dim</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a7a10c1e28470f8f76f30f7a574fe05bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a081ddb05a7c4d1c7fe1f741bc55d27a8</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a1b0820a82fc2f488ca5dcea41bb314ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a1dadbd15c432b77273e6b40bdaa5999b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>aca76ddee633628ab4ffbb639c81190b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a6bfcbc5f3b2bce4d2da019dca6450d0b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::RelativeDistTask</name>
    <filename>a00077.html</filename>
    <member kind="typedef">
      <type>std::tuple&lt; std::string, Eigen::Vector3d, Eigen::Vector3d &gt;</type>
      <name>rbInfo</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a75ccd14f42390a90f4fa913647844840</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelativeDistTask</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>ae61d9885b5904b203d0290b0de489cd0</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const double timestep, const rbInfo &amp;rbi1, const rbInfo &amp;rbi2, const Eigen::Vector3d &amp;u1=Eigen::Vector3d::Zero(), const Eigen::Vector3d &amp;u2=Eigen::Vector3d::Zero())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>robotPoint</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a3ea4a20a552a873d090c584477f58c4f</anchor>
      <arglist>(const int bIndex, const Eigen::Vector3d &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>envPoint</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a2ac26562c72ef4f9c697e027ccc7e0e6</anchor>
      <arglist>(const int bIndex, const Eigen::Vector3d &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vector</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>acb8164d6f23aba4482cc14e56225081d</anchor>
      <arglist>(const int bIndex, const Eigen::Vector3d &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a1432afeef1ca0c5013e740c19fe11177</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc, const std::vector&lt; sva::MotionVecd &gt; &amp;normalAccB)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a1fe5c20ae5cc4f174b1f75173a23f7e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a8791d0b1561f1b265c35a77c2910c59d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a3d95f00b951cf908737e892b373decaa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>aed89b6c404631c49ea30466c87c8a116</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tasks::qp::JointsSelector::SelectedData</name>
    <filename>a00078.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>posInDof</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>ac2c3ce5bd04545655fefe4ac0a701159</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>dof</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>a67cd5c7c9bb87ce3c7e7940e2e75efce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::SetPointTask</name>
    <filename>a00079.html</filename>
    <base>tasks::qp::SetPointTaskCommon</base>
    <member kind="function">
      <type></type>
      <name>SetPointTask</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a1923d25709fc0342fb0fc3500073fd4c</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, HighLevelTask *hlTask, double stiffness, double weight)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetPointTask</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>aa6f09ff46587aa9096aad7fecdad4c7d</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, HighLevelTask *hlTask, double stiffness, const Eigen::VectorXd &amp;dimWeight, double weight)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stiffness</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>afea0b9087a682045868bd62d6dd78480</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffness</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a1c99498ee959a53b793d7d4159423f39</anchor>
      <arglist>(double stiffness)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>ab52f74164fd8223f03309d8fa82add29</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::SetPointTaskCommon</name>
    <filename>a00080.html</filename>
    <base>tasks::qp::Task</base>
    <member kind="function">
      <type></type>
      <name>SetPointTaskCommon</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>ab4b4f7d6cbbd698ef3104ba4359cc438</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, HighLevelTask *hlTask, double weight)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetPointTaskCommon</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>adb22d1e13f33aa6f200c11146b906808</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, HighLevelTask *hlTask, const Eigen::VectorXd &amp;dimWeight, double weight)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::pair&lt; int, int &gt;</type>
      <name>begin</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>ae24bf232c6ef5896aa552ffef422ab8f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dimWeight</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a7a88e6b7780d0c64a3c524900d57dc6b</anchor>
      <arglist>(const Eigen::VectorXd &amp;dim)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>dimWeight</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a3451be5213ef92cae4fc6262b2c36162</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateNrVars</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a6a9b1a57bd72b746bf207f278f6f0118</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>Q</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a8bf3046312c78f22de60871694828489</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>C</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>ac482dccc58a52761ee17f46788f250f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeQC</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>ae43173f7c7d010652d3d3fbf51efb63b</anchor>
      <arglist>(Eigen::VectorXd &amp;error)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HighLevelTask *</type>
      <name>hlTask_</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>ab1419cfba08d04f7d3937fcd173fcc2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>error_</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a693d49f655a124a1910ae42344230b17</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::SolverData</name>
    <filename>a00081.html</filename>
    <member kind="function">
      <type></type>
      <name>SolverData</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a807cfb7d85f3ba3f983572fdf9ad7899</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nrVars</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a35372348ca3899aed211f9e31fd9cd4a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>totalAlphaD</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>af36db1936325eb6edbe56443af562879</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>totalLambda</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>ab825d7dfbab4df7d84ac39a25d8a32f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>alphaD</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a4994d67943c883eba5673fb8d4ddeb4e</anchor>
      <arglist>(int robotIndex) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lambda</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a638789087cf4b7f977549da458b166fd</anchor>
      <arglist>(int contactIndex) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>alphaDBegin</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a222e53690b7f18a8d1e76a7ff82c1c2b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>alphaDBegin</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a7adc19a2e51222f0d73a3de8c1c28125</anchor>
      <arglist>(int robotIndex) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lambdaBegin</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>ae23581554c4b05de02bce8f9147afe9c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lambdaBegin</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>af2788e770a5a0673fe692a48a60234b3</anchor>
      <arglist>(int contactIndex) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nrUniLambda</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a8102394a78531aa2c16aeddc811b54df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nrBiLambda</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a9a33a6e2c0dc3f5791f2bbcbf84eedac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unilateralBegin</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a511892f573417ad9d0102faf216dece8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bilateralBegin</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a7c3a05d1416a730a45fc818e4aa2315e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nrContacts</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a6ad8830ab9b4ad7e60ec66cb1fc2b930</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; UnilateralContact &gt; &amp;</type>
      <name>unilateralContacts</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a43c8d55600ccd46d8a895f378beaa33b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; BilateralContact &gt; &amp;</type>
      <name>bilateralContacts</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a6677197e78a8ec3d3650baa6632b8226</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; BilateralContact &gt; &amp;</type>
      <name>allContacts</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a0eb6821c6523565a85e0d3b3054ab2d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeNormalAccB</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>aacb4416ef2b0ed5ea94a06780cbc2949</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; sva::MotionVecd &gt; &gt; &amp;</type>
      <name>normalAccB</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>af05459ed8ddc588fc511f5bf9e068df1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; sva::MotionVecd &gt; &amp;</type>
      <name>normalAccB</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>aa98f966b37649de15f90298528994c02</anchor>
      <arglist>(int robotIndex) const </arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>QPSolver</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>ab0c5d51bf80dcd62721abff05ce12961</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tasks::qp::SpringJoint</name>
    <filename>a00082.html</filename>
    <member kind="function">
      <type></type>
      <name>SpringJoint</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>ac25ad1f8efb3d7baa7c353a5e3f0aa89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpringJoint</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>aa9645391a0b018abb077090fd55ceb3d</anchor>
      <arglist>(const std::string &amp;jName, double K, double C, double O)</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>jointName</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a029b134a876b568f05bc4ad280a48a69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>K</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a5466a16b77a204b340d93543a770cdd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>C</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a2b393d84a55fe348e6e5ce04deefd329</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>O</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>aa2bcaab07c4831dde713bbab4e360ade</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tasks::qp::MotionSpringConstr::SpringJointData</name>
    <filename>a00083.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>index</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a7430c237c03d5a757c7cb76efb439ec9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>posInDof</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a2b1d3b44560d4a25373da6ac735e3e3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>K</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>aa00624e5a44c962fcdd3dc6b1009a32c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>C</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a03378bf454ffd094f82b6b80b3b6bbfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>O</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a130d19b1b79cc5a3fea54d09d150e5b4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::SurfaceOrientationTask</name>
    <filename>a00084.html</filename>
    <member kind="function">
      <type></type>
      <name>SurfaceOrientationTask</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>acc4cabcbaaef984c547bf06bfd0ecf11</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const std::string &amp;bodyName, const Eigen::Quaterniond &amp;ori, const sva::PTransformd &amp;X_b_s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SurfaceOrientationTask</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>adc8e70a684132754e18195c2c878e61a</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const std::string &amp;bodyName, const Eigen::Matrix3d &amp;ori, const sva::PTransformd &amp;X_b_s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>orientation</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>a96b6c6298e5e267d78049f479c4dae75</anchor>
      <arglist>(const Eigen::Quaterniond &amp;ori)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>orientation</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>abdc29c495fda3699fbd6e9698d315be2</anchor>
      <arglist>(const Eigen::Matrix3d &amp;ori)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Matrix3d &amp;</type>
      <name>orientation</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>a9fd619a08d1ab7def8f566f1ee803067</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>abbb14c2ef47665eefc63c560a5597859</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>a79111bb3e3d585fb4dba52b9078ca68d</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc, const std::vector&lt; sva::MotionVecd &gt; &amp;normalAccB)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateDot</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>a677f46baeb823dcfb9e2a9789145c059</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>a1312ba367db9200c56bf4194e6252e6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>a646bf7bc2928ec461ffc33733252c86b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>a1074ca01564dea7c487280311b66f4d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>a72397355a64a09bc1d685517d362a361</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jacDot</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>a93bcd6e89549ea224cd197c3568737ba</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::SurfaceOrientationTask</name>
    <filename>a00085.html</filename>
    <base>tasks::qp::HighLevelTask</base>
    <member kind="function">
      <type></type>
      <name>SurfaceOrientationTask</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a7e42a72cae5786c4c40ecab3441c3b54</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robodIndex, const std::string &amp;bodyName, const Eigen::Quaterniond &amp;ori, const sva::PTransformd &amp;X_b_s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SurfaceOrientationTask</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a46c468d42d70acc880049ea545ebc2c6</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robodIndex, const std::string &amp;bodyName, const Eigen::Matrix3d &amp;ori, const sva::PTransformd &amp;X_b_s)</arglist>
    </member>
    <member kind="function">
      <type>tasks::SurfaceOrientationTask &amp;</type>
      <name>task</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>aa5c981c373f19f76bd23e5c2fcff8cbb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>orientation</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a692bf859d8491cdfafe89ed4a76d243e</anchor>
      <arglist>(const Eigen::Quaterniond &amp;ori)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>orientation</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>ab8e5a867717a9883a655016c5f1c8ad0</anchor>
      <arglist>(const Eigen::Matrix3d &amp;ori)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Matrix3d &amp;</type>
      <name>orientation</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a91983f77166a984f342b10c03074e4d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dim</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a8a621ce3cc2be8bc37a71160c952bace</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a425af1cf34cf632139e4c8e8a9dc9456</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a4138dbdb35a425ea3db501a0fa8693f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a3540b2fa897bee1383d33c28c6cefaef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a54d5169bc3ded54e1fba33a9197449f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>aa6331130597eff8d07c7080758427d56</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::SurfaceTransformTask</name>
    <filename>a00086.html</filename>
    <base>TransformTaskCommon&lt; tasks::SurfaceTransformTask &gt;</base>
    <member kind="function">
      <type></type>
      <name>SurfaceTransformTask</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>ad080188983a173ad99bdbd63208eb189</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const std::string &amp;bodyName, const sva::PTransformd &amp;X_0_t, const sva::PTransformd &amp;X_b_p=sva::PTransformd::Identity())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>adbcaa601cc88daff3af002181a222bb9</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mb, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbc, const SolverData &amp;data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::SurfaceTransformTask</name>
    <filename>a00087.html</filename>
    <base>tasks::TransformTaskCommon</base>
    <member kind="function">
      <type></type>
      <name>SurfaceTransformTask</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a9ad5b122dfa8716abb481ed2e0679c6e</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const std::string &amp;bodyName, const sva::PTransformd &amp;X_0_t, const sva::PTransformd &amp;X_b_p=sva::PTransformd::Identity())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a5bce03f4d99d2ba3a40254a54269a002</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc, const std::vector&lt; sva::MotionVecd &gt; &amp;normalAccB)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::MatrixXd</type>
      <name>jacMatTmp_</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>af8655a5233d9b0d4f278b9f2fb1029fd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::TargetObjectiveTask</name>
    <filename>a00088.html</filename>
    <base>tasks::qp::Task</base>
    <member kind="function">
      <type></type>
      <name>TargetObjectiveTask</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a5281f1406a6d0aaf1ddfd2f7b876f62f</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, HighLevelTask *hlTask, double timeStep, double duration, const Eigen::VectorXd &amp;objDot, double weight)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TargetObjectiveTask</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a6add2c0aea1ff74afa4382f37b54a90f</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, HighLevelTask *hlTask, double timeStep, double duration, const Eigen::VectorXd &amp;objDot, const Eigen::VectorXd &amp;dimWeight, double weight)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>duration</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a0116e3e0c32ac50ed164ac2208960d6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>duration</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>ac9ffebd223bc3d7874edbbe9dcd236ff</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>iter</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a2a44c77f68894ce9212e9650a47e23a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>iter</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a0bbd08184d765ede109a3bbf20b7daf7</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nrIter</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a41f9fd7fd72ee29fbe71df7504faf933</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nrIter</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>ad65e24a2d614fa7019099d2c163a4936</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>objDot</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a05ab85fbb593b2ad4d3a00d9da2b0a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>objDot</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>aa978730c9ba864753bc8d9ce1c765d6b</anchor>
      <arglist>(const Eigen::VectorXd &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>dimWeight</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a15ce23a0cf72fc4ad7233a46ed4ad445</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dimWeight</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a9abf54174d6e8f3f5fc6d78694d3debd</anchor>
      <arglist>(const Eigen::VectorXd &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>phi</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>ab5fd5fd190b5a402fd0b6cff9e762e2b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>psi</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a2ea74a998fd33c5569d51a4df2f961e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::pair&lt; int, int &gt;</type>
      <name>begin</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>abfcf86211af93b00b40e5eebd65040ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateNrVars</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>ab711dfbe749e59e0c9c7acfb0dfe43ae</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>af72db76b161b2d6019da505289b93b28</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>Q</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a80cde543a96b2db2abdfc8a55e9e63dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>C</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>ab02c0f1911d219ae1f1cae55a057c662</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::Task</name>
    <filename>a00089.html</filename>
    <member kind="function">
      <type></type>
      <name>Task</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a240a4829e60aa9f824d8145a46c9b004</anchor>
      <arglist>(double weight)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Task</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>ac477f102c9a66128557f4800bfb3bb43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>weight</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a68f42852f1a759a1bdd6c2183c45ce0f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>weight</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a22f65e49796726052dd54f4a393b0566</anchor>
      <arglist>(double w)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::pair&lt; int, int &gt;</type>
      <name>begin</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a4fb40197774e65a243a371592fd48bbf</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>updateNrVars</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a5c5aceb3acc9164a75c73e3051b06577</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const SolverData &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>ae23731fb2968a088eab6a5298542437b</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>Q</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a1e36e39ffffe29c088d90b1c67ca2137</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>C</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a83cf452e29dc09f6f1190a950497e4de</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tasks::TorqueBound</name>
    <filename>a00090.html</filename>
    <member kind="function">
      <type></type>
      <name>TorqueBound</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a4e445b27e858692e0df90b0f4bf2d4d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TorqueBound</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>ab77f06d82e34e6b2b877fe3c5215cd7d</anchor>
      <arglist>(std::vector&lt; std::vector&lt; double &gt;&gt; lTB, std::vector&lt; std::vector&lt; double &gt;&gt; uTB)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>lTorqueBound</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a72e03b00c59f045abad493697d45a6eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>uTorqueBound</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a3d06c4ad22a6fbce388e01ac4f14d6bd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::TorqueTask</name>
    <filename>a00091.html</filename>
    <base>tasks::qp::Task</base>
    <member kind="function">
      <type></type>
      <name>TorqueTask</name>
      <anchorfile>a00091.html</anchorfile>
      <anchor>a3163e17d2bdd6c0ae542cb28322a58e7</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const TorqueBound &amp;tb, double weight)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TorqueTask</name>
      <anchorfile>a00091.html</anchorfile>
      <anchor>a27717972fc82e9dd7921b3d3e73cb2ed</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const TorqueBound &amp;tb, const Eigen::VectorXd &amp;jointSelect, double weight)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TorqueTask</name>
      <anchorfile>a00091.html</anchorfile>
      <anchor>ac011b1323c97601b29bcba56039f76f3</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const TorqueBound &amp;tb, const std::string &amp;efName, double weight)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateNrVars</name>
      <anchorfile>a00091.html</anchorfile>
      <anchor>aaf296fe8d8a2be96d8829b4edf35dba9</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00091.html</anchorfile>
      <anchor>ab36fff5ad52cd5c120dcf5121db4cb32</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::pair&lt; int, int &gt;</type>
      <name>begin</name>
      <anchorfile>a00091.html</anchorfile>
      <anchor>a3aab059411836c088e61da1bc0aa9b62</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>Q</name>
      <anchorfile>a00091.html</anchorfile>
      <anchor>ab0d00a7e0dbc6b54a4d4a1c7304e0cb6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>C</name>
      <anchorfile>a00091.html</anchorfile>
      <anchor>a358e215e748f51abb565a09136a1e41c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>jointSelect</name>
      <anchorfile>a00091.html</anchorfile>
      <anchor>a39500797b93affb67ca33ad5b176a331</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::TrackingTask</name>
    <filename>a00092.html</filename>
    <base>tasks::qp::SetPointTaskCommon</base>
    <member kind="function">
      <type></type>
      <name>TrackingTask</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>ae2c35b8f257be870f3bc00d4e003718e</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, HighLevelTask *hlTask, double gainPos, double gainVel, double weight)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrackingTask</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>ab4bf15311e7502060de127bcd48aaa11</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, HighLevelTask *hlTask, double gainPos, double gainVel, const Eigen::VectorXd &amp;dimWeight, double weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGains</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>adacea85596258631196cdc1dc5a50ae1</anchor>
      <arglist>(double gainPos, double gainVel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>errorPos</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a3239f7871cdab11b28e2f2e578e17912</anchor>
      <arglist>(const Eigen::VectorXd &amp;errorPos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>errorVel</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>aa7e75dcb2e63cfa39b0fa49226d7a575</anchor>
      <arglist>(const Eigen::VectorXd &amp;errorVel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refAccel</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a20e5c060814329fd2aef628b3c439234</anchor>
      <arglist>(const Eigen::VectorXd &amp;refAccel)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a9644d26234f5244b2f13ba2e8540adc5</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::TrajectoryTask</name>
    <filename>a00093.html</filename>
    <base>tasks::qp::SetPointTaskCommon</base>
    <member kind="function">
      <type></type>
      <name>TrajectoryTask</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a59da3ed4a1c7e832ed3c0901f3733646</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, HighLevelTask *hlTask, double gainPos, double gainVel, double weight)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrajectoryTask</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>ac5defd525f27953454f9dde50ee3c45d</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, HighLevelTask *hlTask, double gainPos, double gainVel, const Eigen::VectorXd &amp;dimWeight, double weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGains</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a80b3bb11ef78052992b837fe43b545eb</anchor>
      <arglist>(double gainPos, double gainVel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refVel</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>acb1ed22d8d4325d27016ba86d807b4f3</anchor>
      <arglist>(const Eigen::VectorXd &amp;refVel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refAccel</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>ab205f45b28c0df29e37c3906b4caa4c1</anchor>
      <arglist>(const Eigen::VectorXd &amp;refAccel)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a6fdbb39c099219ea31436daae1ca3a75</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::TransformTask</name>
    <filename>a00094.html</filename>
    <base>TransformTaskCommon&lt; tasks::TransformTask &gt;</base>
    <member kind="function">
      <type></type>
      <name>TransformTask</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>aeb57ca8a78852a55a16881a3c170b7c5</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const std::string &amp;bodyName, const sva::PTransformd &amp;X_0_t, const sva::PTransformd &amp;X_b_p=sva::PTransformd::Identity(), const Eigen::Matrix3d &amp;E_0_c=Eigen::Matrix3d::Identity())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>E_0_c</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>ae260b35ffe9afa1c939261a76a219982</anchor>
      <arglist>(const Eigen::Matrix3d &amp;E_0_c)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Matrix3d &amp;</type>
      <name>E_0_c</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a589e21d4a88fadf8c6f3c0c78a628a22</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a78fcf49ae7a26a0286cc3e1f690c7858</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mb, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbc, const SolverData &amp;data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::TransformTask</name>
    <filename>a00095.html</filename>
    <base>tasks::TransformTaskCommon</base>
    <member kind="function">
      <type></type>
      <name>TransformTask</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a47ef3ff9e94d1c029843cf2e8efd0e03</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const std::string &amp;bodyName, const sva::PTransformd &amp;X_0_t, const sva::PTransformd &amp;X_b_p=sva::PTransformd::Identity(), const Eigen::Matrix3d &amp;E_0_c=Eigen::Matrix3d::Identity())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>E_0_c</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>af28399b8910027ff33d9230fdf5611b8</anchor>
      <arglist>(const Eigen::Matrix3d &amp;E_0_c)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Matrix3d &amp;</type>
      <name>E_0_c</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a6d7fe6363bd841a1c1e96b5e834b4ada</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a2cdf770b2c150f752ff44c9a049f31b2</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc, const std::vector&lt; sva::MotionVecd &gt; &amp;normalAccB)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::TransformTaskCommon</name>
    <filename>a00096.html</filename>
    <member kind="function">
      <type></type>
      <name>TransformTaskCommon</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a480794408729e99dea19ae53fa51fa2a</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const std::string &amp;bodyName, const sva::PTransformd &amp;X_0_t, const sva::PTransformd &amp;X_b_p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>target</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a075f661f10fb49cfaed9a2694b6763d3</anchor>
      <arglist>(const sva::PTransformd &amp;X_0_t)</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>target</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>af6e9dd2e3323360f57b68f4eeffd4d82</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>X_b_p</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a9c6b4586c641fa3a22ce68ebe9f76d36</anchor>
      <arglist>(const sva::PTransformd &amp;X_b_p)</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>X_b_p</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a93729929225dc9cd1f7c32a2f423a103</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a5e3dcc7755bff2e7277f2e79a6f3a37d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a01e89269648b1c796264e041d803b965</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>af33694c4067e14376d6fd9e6eb8a4781</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a06c61480fcf0dd74ea8489fa945dd797</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::PTransformd</type>
      <name>X_0_t_</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a65b337e6e48ec7e93b8137364374752f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::PTransformd</type>
      <name>X_b_p_</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>af3c5c7d4e3e282c76d28c09563e6650d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>bodyIndex_</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a298e38439bbefa80e02f53ffbda17771</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>rbd::Jacobian</type>
      <name>jac_</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a5dd5ce12eb9762527a8d6933b1b23e90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>eval_</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a1f71e9037d4cd93cc297e0c0b54c0d9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>speed_</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>aa9faadfe66b2d0903cc393756277abe2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>normalAcc_</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a81993fa44af379d32b94a6c3388390af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::MatrixXd</type>
      <name>jacMat_</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>ae6fc32df4b5ed9cf52e94a95db598708</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::TransformTaskCommon</name>
    <filename>a00097.html</filename>
    <templarg>transform_task_t</templarg>
    <base>tasks::qp::HighLevelTask</base>
    <member kind="function">
      <type></type>
      <name>TransformTaskCommon</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>ad80e311e700791109d84fa22c954cb84</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const std::string &amp;bodyName, const sva::PTransformd &amp;X_0_t, const sva::PTransformd &amp;X_b_p=sva::PTransformd::Identity())</arglist>
    </member>
    <member kind="function">
      <type>transform_task_t &amp;</type>
      <name>task</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a14760ffdbe08973b70e3d2eea0e6aa40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>target</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>af0b3178505a2872ceb38462bcce08f29</anchor>
      <arglist>(const sva::PTransformd &amp;X_0_t)</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>target</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a642d181e09939e3a86bb110e276a6e27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>X_b_p</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a7a50df788c61e0303e09ead4409eddfb</anchor>
      <arglist>(const sva::PTransformd &amp;X_b_p)</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>X_b_p</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>ad41559d4366daf41c713e4f7c0f85681</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dim</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a01ef9b318383bbf46ddb52d22159ca60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a5c76a1ca13c7694ba2a5e2f329698ea8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a9b6ca4f75970c7ae05ed1c0573168bf8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a3b2d7bd03a11e05b11c06322cca365a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a6ed3ec0d10d894a6b210f8aee5e6c069</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>transform_task_t</type>
      <name>tt_</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a20b38faf7c45ad433e793b5bf375f61d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>robotIndex_</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a55c311d3cda616f83de11d836c6f3d18</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TransformTaskCommon&lt; tasks::SurfaceTransformTask &gt;</name>
    <filename>a00097.html</filename>
    <base>tasks::qp::HighLevelTask</base>
    <member kind="function">
      <type></type>
      <name>TransformTaskCommon</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>ad80e311e700791109d84fa22c954cb84</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const std::string &amp;bodyName, const sva::PTransformd &amp;X_0_t, const sva::PTransformd &amp;X_b_p=sva::PTransformd::Identity())</arglist>
    </member>
    <member kind="function">
      <type>tasks::SurfaceTransformTask &amp;</type>
      <name>task</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a14760ffdbe08973b70e3d2eea0e6aa40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>target</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>af0b3178505a2872ceb38462bcce08f29</anchor>
      <arglist>(const sva::PTransformd &amp;X_0_t)</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>target</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a642d181e09939e3a86bb110e276a6e27</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>X_b_p</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a7a50df788c61e0303e09ead4409eddfb</anchor>
      <arglist>(const sva::PTransformd &amp;X_b_p)</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>X_b_p</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>ad41559d4366daf41c713e4f7c0f85681</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dim</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a01ef9b318383bbf46ddb52d22159ca60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a5c76a1ca13c7694ba2a5e2f329698ea8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a9b6ca4f75970c7ae05ed1c0573168bf8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a3b2d7bd03a11e05b11c06322cca365a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a6ed3ec0d10d894a6b210f8aee5e6c069</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>tasks::SurfaceTransformTask</type>
      <name>tt_</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a20b38faf7c45ad433e793b5bf375f61d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>robotIndex_</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a55c311d3cda616f83de11d836c6f3d18</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TransformTaskCommon&lt; tasks::TransformTask &gt;</name>
    <filename>a00097.html</filename>
    <base>tasks::qp::HighLevelTask</base>
    <member kind="function">
      <type></type>
      <name>TransformTaskCommon</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>ad80e311e700791109d84fa22c954cb84</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const std::string &amp;bodyName, const sva::PTransformd &amp;X_0_t, const sva::PTransformd &amp;X_b_p=sva::PTransformd::Identity())</arglist>
    </member>
    <member kind="function">
      <type>tasks::TransformTask &amp;</type>
      <name>task</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a14760ffdbe08973b70e3d2eea0e6aa40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>target</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>af0b3178505a2872ceb38462bcce08f29</anchor>
      <arglist>(const sva::PTransformd &amp;X_0_t)</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>target</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a642d181e09939e3a86bb110e276a6e27</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>X_b_p</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a7a50df788c61e0303e09ead4409eddfb</anchor>
      <arglist>(const sva::PTransformd &amp;X_b_p)</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>X_b_p</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>ad41559d4366daf41c713e4f7c0f85681</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dim</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a01ef9b318383bbf46ddb52d22159ca60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a5c76a1ca13c7694ba2a5e2f329698ea8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a9b6ca4f75970c7ae05ed1c0573168bf8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a3b2d7bd03a11e05b11c06322cca365a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a6ed3ec0d10d894a6b210f8aee5e6c069</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>tasks::TransformTask</type>
      <name>tt_</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a20b38faf7c45ad433e793b5bf375f61d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>robotIndex_</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a55c311d3cda616f83de11d836c6f3d18</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tasks::qp::UnilateralContact</name>
    <filename>a00098.html</filename>
    <member kind="function">
      <type></type>
      <name>UnilateralContact</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a0f7a6e457279bef9aa1113d13b8a8b56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnilateralContact</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a4975439de18ef4c88fc9c491f6e5164f</anchor>
      <arglist>(int r1Index, int r2Index, const std::string &amp;r1BodyName, const std::string &amp;r2BodyName, std::vector&lt; Eigen::Vector3d &gt; r1Points, const Eigen::Matrix3d &amp;r1Frame, const sva::PTransformd &amp;X_b1_b2, int nrGen, double mu, const sva::PTransformd &amp;X_b1_cf=sva::PTransformd::Identity())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnilateralContact</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a7d67ff07f42cac5b82fb035f99788afc</anchor>
      <arglist>(int r1Index, int r2Index, const std::string &amp;r1BodyName, const std::string &amp;r2BodyName, int ambId, std::vector&lt; Eigen::Vector3d &gt; r1Points, const Eigen::Matrix3d &amp;r1Frame, const sva::PTransformd &amp;X_b1_b2, int nrGen, double mu, const sva::PTransformd &amp;X_b1_cf=sva::PTransformd::Identity())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnilateralContact</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a15966f21610db65d96b0cdb2153e8f9c</anchor>
      <arglist>(const ContactId &amp;cId, std::vector&lt; Eigen::Vector3d &gt; r1Points, const Eigen::Matrix3d &amp;r1Frame, const sva::PTransformd &amp;X_b1_b2, int nrGen, double mu, const sva::PTransformd &amp;X_b1_cf=sva::PTransformd::Identity())</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>force</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a78f7db8af64a7190f225b73ec0c024c0</anchor>
      <arglist>(const Eigen::VectorXd &amp;lambda, int p, const FrictionCone &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>force</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>ae289cf9828301b6f5463cab64ec87afb</anchor>
      <arglist>(const Eigen::VectorXd &amp;lambda, const FrictionCone &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>sva::ForceVecd</type>
      <name>force</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a6398e78eaa1ba8d9bf1b341aa7e74daa</anchor>
      <arglist>(const Eigen::VectorXd &amp;lambda, const std::vector&lt; Eigen::Vector3d &gt; &amp;r_b_pi, const FrictionCone &amp;c_pi_b) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nrLambda</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a78d5b1ee13e42f26189d72d328b07787</anchor>
      <arglist>(int point) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nrLambda</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a75334a2ac91f3ad7925e17ff205f22e2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>sForce</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a77da1185b91a982df94c1338900bc061</anchor>
      <arglist>(const Eigen::VectorXd &amp;lambda, int point, const FrictionCone &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>sForce</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a379b7a117e0757ad522014bcf7f08ecc</anchor>
      <arglist>(const Eigen::VectorXd &amp;lambda, const FrictionCone &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>sva::ForceVecd</type>
      <name>sForce</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a0b711a4edce541a7a1e937358885a7d4</anchor>
      <arglist>(const Eigen::VectorXd &amp;lambda, const std::vector&lt; Eigen::Vector3d &gt; &amp;r_b_pi, const FrictionCone &amp;c_pi_b) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sNrLambda</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a5f4c62291fae2b2749e296694ce99edf</anchor>
      <arglist>(int point) const </arglist>
    </member>
    <member kind="variable">
      <type>ContactId</type>
      <name>contactId</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a270f82eb683458249b864a73d3464021</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Eigen::Vector3d &gt;</type>
      <name>r1Points</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>af7e3cbf6139f5f5b34dc5cc36e7ee9c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Eigen::Vector3d &gt;</type>
      <name>r2Points</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a3ffa099f15791cc4efddb0f2bcea16b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FrictionCone</type>
      <name>r1Cone</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a3e166b10c87bccb10ff5b22559171623</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FrictionCone</type>
      <name>r2Cone</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a73df9714f72365e74a0682317107b646</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sva::PTransformd</type>
      <name>X_b1_b2</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a71abdba5f0d1df7cc91636b4385ee6e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sva::PTransformd</type>
      <name>X_b1_cf</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>aaa6507cf6e0d5cfcfdf1c6b3d5df6ca5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::VectorOrientationTask</name>
    <filename>a00099.html</filename>
    <member kind="function">
      <type></type>
      <name>VectorOrientationTask</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a915b78ec72edfd554234c61c883dc99b</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const std::string &amp;bodyName, const Eigen::Vector3d &amp;bodyVector, const Eigen::Vector3d &amp;targetVector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a0f73567b135c586035253002b91fa65f</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc, const std::vector&lt; sva::MotionVecd &gt; &amp;normalAccB)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bodyVector</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a0122d38e08243f8d504435e793fd0088</anchor>
      <arglist>(const Eigen::Vector3d &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>bodyVector</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a1b0dfb05be0369ee760cd80c0d840e18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>target</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>ac9688f4adf664318c90a22c3a82353a8</anchor>
      <arglist>(const Eigen::Vector3d &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>ab1abe0cd397bb1cfb4165c18d89fa4a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a660e11dcd8fe9e1deccc87931d4342e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>af7ffca08768f1677c31942798199d74a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a041cd4f9f56bf71abd471adfa2a69872</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tasks::qp::VectorOrientationTask</name>
    <filename>a00100.html</filename>
    <base>tasks::qp::HighLevelTask</base>
    <member kind="function">
      <type></type>
      <name>VectorOrientationTask</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>aa9d49889bd49416cbf821f8ee7607eca</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int robotIndex, const std::string &amp;bodyName, const Eigen::Vector3d &amp;bodyVector, const Eigen::Vector3d &amp;targetVector)</arglist>
    </member>
    <member kind="function">
      <type>tasks::VectorOrientationTask &amp;</type>
      <name>task</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>ac91165ba88b511181eabd515fb813c52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bodyVector</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a5f917e9e709ebe8dc6a6d4e0837c20a2</anchor>
      <arglist>(const Eigen::Vector3d &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d</type>
      <name>bodyVector</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>aa4c762f5c0723c763b50e3c4ddd65627</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>target</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a8cf2cae94d6f8db4c231927b0db6bfd5</anchor>
      <arglist>(const Eigen::Vector3d &amp;vector)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dim</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a0f596a516f5e674b98104ed98ec2fe15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a0df7b04283e1af87a96bc52bf6ba5e10</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const SolverData &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a215ee84a81f83cc520636739de6dffbf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>eval</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a3715b7b3b442e8dfef6969df2c034613</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>speed</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>aebe3ba136ec7d47f5cc2bca199c4460e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a17c0246efc6e08063ac1a5cf3b607f8c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>rbd</name>
    <filename>a00115.html</filename>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>aef3e2f68a8f7a4ce79266e72ddaabb5e</anchor>
      <arglist>(std::ostream &amp;out, const Body &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI Eigen::Vector3d</type>
      <name>computeCoM</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>aa3d5affc22a2a8da050bec954dbe49e7</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI Eigen::Vector3d</type>
      <name>computeCoMVelocity</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>aae7a9a01b7d8e8f0113ac0ced2f3359f</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI Eigen::Vector3d</type>
      <name>computeCoMAcceleration</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a66536ad8e1924b87c9b376d151f7321e</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI Eigen::Vector3d</type>
      <name>sComputeCoM</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a1dce1b30151f67949e67f9da9b248960</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI Eigen::Vector3d</type>
      <name>sComputeCoMVelocity</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a546da91f76a26766fe29b6269f4b6eaf</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI Eigen::Vector3d</type>
      <name>sComputeCoMAcceleration</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a36f0a66ff371f16920fa8451d48e3014</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>eulerJointIntegration</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>ab88f71d718e5b2284b82166e651e3696</anchor>
      <arglist>(Joint::Type type, const std::vector&lt; double &gt; &amp;alpha, double step, std::vector&lt; double &gt; &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>eulerIntegration</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>af1d5e428f8fea58734485e214420ad45</anchor>
      <arglist>(const MultiBody &amp;mb, MultiBodyConfig &amp;mbc, double step)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>sEulerIntegration</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>abd0e7a890bf8ed1ba9790c65f2b172c2</anchor>
      <arglist>(const MultiBody &amp;mb, MultiBodyConfig &amp;mbc, double step)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>forwardAcceleration</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a7cabedab4efa117bdc2f511c1277899a</anchor>
      <arglist>(const MultiBody &amp;mb, MultiBodyConfig &amp;mbc, const sva::MotionVecd &amp;A_0=sva::MotionVecd(Eigen::Vector6d::Zero()))</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>sForwardAcceleration</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a24c441619953f5394c7053ccf75714ba</anchor>
      <arglist>(const MultiBody &amp;mb, MultiBodyConfig &amp;mbc, const sva::MotionVecd &amp;A_0=sva::MotionVecd(Eigen::Vector6d::Zero()))</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>forwardKinematics</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a96c3cea742bc063bc8cac29d42411ac9</anchor>
      <arglist>(const MultiBody &amp;mb, MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>sForwardKinematics</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a11ae46b6402eb8d74f53677aca71babb</anchor>
      <arglist>(const MultiBody &amp;mb, MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>forwardVelocity</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a45a97f5d7650231c3d723a11c9408cd8</anchor>
      <arglist>(const MultiBody &amp;mb, MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>sForwardVelocity</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a6fdbf73c467ae855e5aadcc0589b55ab</anchor>
      <arglist>(const MultiBody &amp;mb, MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI Eigen::Matrix&lt; double, 6, 10 &gt;</type>
      <name>IMPhi</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a866fa89d4831928b912c77db84f30309</anchor>
      <arglist>(const sva::MotionVecd &amp;mv)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI Eigen::Matrix&lt; double, 10, 1 &gt;</type>
      <name>inertiaToVector</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a6269a1cc3506d5512fbd8ec28fcedb84</anchor>
      <arglist>(const sva::RBInertiad &amp;rbi)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI sva::RBInertiad</type>
      <name>vectorToInertia</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>ab336ae166080460a4b1eedce786f3fc3</anchor>
      <arglist>(const Eigen::Matrix&lt; double, 10, 1 &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI sva::RBInertiad</type>
      <name>sVectorToInertia</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a002a80a20c11b6e84b9dfc200412346b</anchor>
      <arglist>(const Eigen::VectorXd &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI Eigen::VectorXd</type>
      <name>multiBodyToInertialVector</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a0a9fb61b32a276321b743b72aa27fbbf</anchor>
      <arglist>(const rbd::MultiBody &amp;mb)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix3&lt; T &gt;</type>
      <name>QuatToE</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a7d00127b1f623476b945e05e88eb95d6</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>ac3088586b9fe6169533319c4dba20e9f</anchor>
      <arglist>(std::ostream &amp;out, const Joint &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI sva::ForceVecd</type>
      <name>computeCentroidalMomentum</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>af952b30ce2254dab6cebbe22e95baa9c</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc, const Eigen::Vector3d &amp;com)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI sva::ForceVecd</type>
      <name>computeCentroidalMomentumDot</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a8988ff9653a5fc0595dabd3938622b37</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc, const Eigen::Vector3d &amp;com, const Eigen::Vector3d &amp;comDot)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI sva::ForceVecd</type>
      <name>sComputeCentroidalMomentum</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a917e5b58d319f5b36753ea5e158b60b4</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc, const Eigen::Vector3d &amp;com)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI sva::ForceVecd</type>
      <name>sComputeCentroidalMomentumDot</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>afe9772d66d45b249d91b081492dddc5e</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc, const Eigen::Vector3d &amp;com, const Eigen::Vector3d &amp;comDot)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>paramToVector</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a4bf39e343eab5ea745b6b5ad06e1322c</anchor>
      <arglist>(const std::vector&lt; std::vector&lt; double &gt;&gt; &amp;v, Eigen::Ref&lt; Eigen::VectorXd &gt; e)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>sParamToVector</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>aa230afce88a5b03f4cdb24bbe5697709</anchor>
      <arglist>(const std::vector&lt; std::vector&lt; double &gt;&gt; &amp;v, Eigen::Ref&lt; Eigen::VectorXd &gt; e)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI Eigen::VectorXd</type>
      <name>paramToVector</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a4e97ed59ef038e4668d094c149f4dbf4</anchor>
      <arglist>(const MultiBody &amp;mb, const std::vector&lt; std::vector&lt; double &gt;&gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI Eigen::VectorXd</type>
      <name>sParamToVector</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a4553c85e948490a728217442f42017a5</anchor>
      <arglist>(const MultiBody &amp;mb, const std::vector&lt; std::vector&lt; double &gt;&gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI Eigen::VectorXd</type>
      <name>dofToVector</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a35ba4e7bcaf28864ee5b873aa2f7ad98</anchor>
      <arglist>(const MultiBody &amp;mb, const std::vector&lt; std::vector&lt; double &gt;&gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI Eigen::VectorXd</type>
      <name>sDofToVector</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a40551e81dcb5a17dc51f28e51df91ab7</anchor>
      <arglist>(const MultiBody &amp;mb, const std::vector&lt; std::vector&lt; double &gt;&gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>vectorToParam</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>ae1506b1cecfe2dc93145cdee35024021</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;e, std::vector&lt; std::vector&lt; double &gt;&gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>sVectorToParam</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>aa53030956d0aaa3b8f8573f876551cdf</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;e, std::vector&lt; std::vector&lt; double &gt;&gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>vectorToParam</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>ad81da92788d049e1111ea95aad747d9a</anchor>
      <arglist>(const MultiBody &amp;mb, const Eigen::VectorXd &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>sVectorToParam</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a9a12e59958ebc1de682cb558002236fa</anchor>
      <arglist>(const MultiBody &amp;mb, const Eigen::VectorXd &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>vectorToDof</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a4e26c3bab795feca51d727beb784cf13</anchor>
      <arglist>(const MultiBody &amp;mb, const Eigen::VectorXd &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>sVectorToDof</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>aac7e53f4e1a1bf92a34842130f017325</anchor>
      <arglist>(const MultiBody &amp;mb, const Eigen::VectorXd &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkMatchBodiesVector</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a962a1e605f4f3936684e8a18c30e10c6</anchor>
      <arglist>(const MultiBody &amp;mb, const std::vector&lt; T &gt; &amp;vec, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkMatchJointsVector</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a4a2ee0f62601c711eeeedd9b38191c8c</anchor>
      <arglist>(const MultiBody &amp;mb, const std::vector&lt; T &gt; &amp;vec, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>checkMatchBodyPos</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>ab3ad6457f66a076b7e3743ba5883d774</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>checkMatchParentToSon</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>ac65ee5665504496fefb03acd8510c41b</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>checkMatchBodyVel</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a9052f21a2d371b7cceeca3ae9d7c5027</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>checkMatchBodyAcc</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a35a9b4e0d1a7d097f947005ae638e398</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>checkMatchJointConf</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>ac3dec972fc9c0669fbb28e584c036f78</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>checkMatchJointVelocity</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>ad9ea39279af93f142550f8aea088a257</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>checkMatchJointTorque</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>ac6f14bfe8a4062f836871f2a42149c28</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>checkMatchMotionSubspace</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a1327f38fc720ddfc67438a26b5d47a64</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>checkMatchQ</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a1f429d7788904c24634cb927b04b4dfc</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>checkMatchAlpha</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a79207fb4bfe485b88f7cced51418f1fa</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>checkMatchAlphaD</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a5a321010d59e162b9e53722eee7a97b3</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>checkMatchForce</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a7c0a3a499a70eddeb7eb992690ab4985</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>imagePointJacobian</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a07491bc6c9c4efc66e979df49eec7a77</anchor>
      <arglist>(const Eigen::Vector2d &amp;point2d, const double depthEstimate, Eigen::Matrix&lt; double, 2, 6 &gt; &amp;jac)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>imagePointJacobian</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a3f883d5b2cb2d74f03f930d7097aa91e</anchor>
      <arglist>(const Eigen::Vector3d &amp;point3d, Eigen::Matrix&lt; double, 2, 6 &gt; &amp;jac)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>imagePointJacobianDot</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>af911cb4aaa8f45c453f0eb8af449e402</anchor>
      <arglist>(const Eigen::Vector2d imagePoint, const Eigen::Vector2d imagePointSpeed, const double depth, const double depthDot, Eigen::Matrix&lt; double, 2, 6 &gt; &amp;jac)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>poseJacobian</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>aa7c485df3cfdbc0819e75bbea7cb2632</anchor>
      <arglist>(const Eigen::Matrix3d &amp;rotation, Eigen::Matrix&lt; double, 6, 6 &gt; &amp;jac, const double rot_angle_threshold=1.0e-8)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>depthDotJacobian</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a731b8c0b3d37872f0a22fd46d008e970</anchor>
      <arglist>(const Eigen::Vector2d imagePointSpeed, const double depthEstimate, Eigen::Matrix&lt; double, 1, 6 &gt; &amp;jac)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>getAngleAxis</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a42e2c6560ae5a3978c5d999e5dfb9375</anchor>
      <arglist>(const Eigen::Matrix3d &amp;rotation, double &amp;rot_angle, Eigen::Vector3d &amp;rot_axis)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>getSkewSym</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>af84dc61728c402a7a3a5b61dc7b8a780</anchor>
      <arglist>(const Eigen::Vector3d &amp;vector, Eigen::Matrix3d &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI Eigen::Vector3d</type>
      <name>computeCentroidalZMP</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a394e1cd05547fb851d8dbe8f0ddbbbe5</anchor>
      <arglist>(MultiBodyConfig &amp;mbc, Eigen::Vector3d &amp;com, Eigen::Vector3d &amp;comA, double altitude)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>computeCentroidalZMPNoGravity</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a29fb02f3699713bd952eac420794f673</anchor>
      <arglist>(Eigen::Vector3d &amp;com, Eigen::Vector3d &amp;comA, double altitude)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>computeCentroidalZMPComplete</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>afeb4fb0f92e547a41ae4bd57b09febc7</anchor>
      <arglist>(MultiBodyConfig &amp;mbc, Eigen::Vector3d &amp;com, Eigen::Vector3d &amp;comA, double altitude, sva::ForceVecd wr_external, double mass)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>sch</name>
    <filename>a00116.html</filename>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>Index_t</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>adb1185148e3cd3bcc448295be8c26bcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Scalar</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a23db84571b7527634d5e5d5fd69995e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CD_Matrix::Vector3T&lt; Scalar, false &gt;</type>
      <name>Vector3</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a26a421e6cdc08aedcfc5b9c68277f657</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CD_Matrix::Vector4T&lt; Scalar &gt;</type>
      <name>Vector4</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a4054ebd9c67e205f14399d288090905b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector3</type>
      <name>Point3</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>ab0c5b1c6e2f86393e75ee9e55e346509</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CD_Matrix::Matrix3x3T&lt; Scalar &gt;</type>
      <name>Matrix3x3</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>ad62be10192b061dcae7b013d0f5e194e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CD_Matrix::QuaternionT&lt; Scalar &gt;</type>
      <name>Quaternion</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a84a5f2e4a6807b76657edddbd1b53db9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CD_Matrix::Matrix4x4T&lt; Scalar &gt;</type>
      <name>Matrix4x4</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a3041e1b0d9a898938dd026b1bd3d4112</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CD_Matrix::Vector3T&lt; Scalar, true &gt;</type>
      <name>Vector3NormOptimized</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a49d67c4c14d4386acdf2f084e68d4700</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct sch::_TimeStamp</type>
      <name>S_ObjectTimeStamp</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>ab167976403857dc3577c4cd022c6c13f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct sch::s_toruslinkedBV</type>
      <name>toruslinkedBV</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a5acd0335a65507856bfecf941193515e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct sch::s_Triangle</type>
      <name>Triangle</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>ad02b3d5e368caaabe1eff7ad33d557ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct sch::s_SphereApproxim</type>
      <name>SphereApproxim</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a50488b6de166145f7320dc22de55de99</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sch::s_PointsComparator</type>
      <name>PointsComparator</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>aeac2d6f203d6cda404d023b7b9e19178</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct sch::s_STP_VVR</type>
      <name>STP_VVR</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>abbeaad29b70f4c43093dcb7daecf9b02</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct sch::s_STN_VVR</type>
      <name>STN_VVR</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a43b208a34398f097c2c7e5cb780c5da6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct sch::s_STP_STBVData</type>
      <name>STP_STBVData</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a386e496f31b5959dc743fcb86b42b513</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct sch::s_STP_Circle</type>
      <name>STP_Circle</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>ae46e0ff886e55423b0e240b172cf46bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CD_SimplexType</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a930a706e3c80e6ede6f68e34809da11b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ArchiveType</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>aec0f4168a7c3d90bebc8db0c1f6c8fa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>STP_Featuretype</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>aaa9a2e71c9a9687a84c75aa15b75f384</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CD_SimplexExchangeTest</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a284a80995524c3d5eaed3ea51da13643</anchor>
      <arglist>(T &amp;a, T &amp;b, T &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CD_SimplexExchange</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>abdc7bf615642be512fefd34ee873f968</anchor>
      <arglist>(T &amp;a, T &amp;b, T &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>link</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a235a27c871322caece36bebbcd91a7dd</anchor>
      <arglist>(const Depth_Edge &amp;edge0, const Depth_Edge &amp;edge1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>half_link</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>acb2c9a0b200977237f5093c7ccec603b</anchor>
      <arglist>(const Depth_Edge &amp;edge0, const Depth_Edge &amp;edge1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>circ_next</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a63fed86080ee69e69887b2595749a970</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>circ_prev</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a32914d73e1c64c0fcf109d4a95a697fc</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>CD_Point</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a930a706e3c80e6ede6f68e34809da11baa5c6082a32a66d4af6003761ea6deda3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>CD_Segment</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a930a706e3c80e6ede6f68e34809da11bab36aa1ddee8b169c10a889a4e3ab1b5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>CD_Triangle</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a930a706e3c80e6ede6f68e34809da11bafc5b37fbb4c185050a98a5aed180bc5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>CD_Tetrahedron</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a930a706e3c80e6ede6f68e34809da11ba2f2014cdc3df6cf071f4a69eaa35dbd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>CD_None</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a930a706e3c80e6ede6f68e34809da11bacf450d6b46df39b660bbb358db5141e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>BINARY_ARCHIVE</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>aec0f4168a7c3d90bebc8db0c1f6c8fa9a3dd05585336ccf671c6058e2782b549c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>TEXT_ARCHIVE</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>aec0f4168a7c3d90bebc8db0c1f6c8fa9a9962c77094354fe5e99e8e1f32dffd93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>SMALLSPHERE</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>aaa9a2e71c9a9687a84c75aa15b75f384aadf03b67ba0cfd2c8e3981f9ac9545d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>BIGSPHERE</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>aaa9a2e71c9a9687a84c75aa15b75f384a79d68d1e7ce2544bcc02887372df84c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>TORUS</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>aaa9a2e71c9a9687a84c75aa15b75f384ae7bbb858d6b41ad95de52f0347a57688</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>MaxTriangles</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>ac43c10154845e8f2e319ccb287548b64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Scalar</type>
      <name>infinity</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a27f844328430dc3778ba427657947cd2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>tasks</name>
    <filename>a00118.html</filename>
    <namespace>tasks::qp</namespace>
    <class kind="struct">tasks::AlphaBound</class>
    <class kind="class">tasks::CoMTask</class>
    <class kind="class">tasks::GazeTask</class>
    <class kind="class">tasks::LinVelocityTask</class>
    <class kind="class">tasks::MomentumTask</class>
    <class kind="class">tasks::MultiCoMTask</class>
    <class kind="class">tasks::MultiRobotTransformTask</class>
    <class kind="class">tasks::OrientationTask</class>
    <class kind="class">tasks::OrientationTrackingTask</class>
    <class kind="struct">tasks::PolyTorqueBound</class>
    <class kind="class">tasks::PositionBasedVisServoTask</class>
    <class kind="class">tasks::PositionTask</class>
    <class kind="class">tasks::PostureTask</class>
    <class kind="struct">tasks::QBound</class>
    <class kind="class">tasks::RelativeDistTask</class>
    <class kind="class">tasks::SurfaceOrientationTask</class>
    <class kind="class">tasks::SurfaceTransformTask</class>
    <class kind="struct">tasks::TorqueBound</class>
    <class kind="class">tasks::TransformTask</class>
    <class kind="class">tasks::TransformTaskCommon</class>
    <class kind="class">tasks::VectorOrientationTask</class>
  </compound>
  <compound kind="namespace">
    <name>tasks::qp</name>
    <filename>a00119.html</filename>
    <class kind="struct">tasks::qp::BilateralContact</class>
    <class kind="class">tasks::qp::Bound</class>
    <class kind="class">tasks::qp::BoundedSpeedConstr</class>
    <class kind="class">tasks::qp::CollisionConstr</class>
    <class kind="class">tasks::qp::CoMIncPlaneConstr</class>
    <class kind="class">tasks::qp::CoMTask</class>
    <class kind="struct">tasks::qp::constr_traits</class>
    <class kind="struct">tasks::qp::constr_traits&lt; Equality &gt;</class>
    <class kind="struct">tasks::qp::constr_traits&lt; GenInequality &gt;</class>
    <class kind="struct">tasks::qp::constr_traits&lt; Inequality &gt;</class>
    <class kind="class">tasks::qp::Constraint</class>
    <class kind="class">tasks::qp::ConstraintFunction</class>
    <class kind="class">tasks::qp::ContactAccConstr</class>
    <class kind="class">tasks::qp::ContactConstr</class>
    <class kind="class">tasks::qp::ContactConstrCommon</class>
    <class kind="struct">tasks::qp::ContactId</class>
    <class kind="class">tasks::qp::ContactPosConstr</class>
    <class kind="class">tasks::qp::ContactSpeedConstr</class>
    <class kind="class">tasks::qp::ContactTask</class>
    <class kind="class">tasks::qp::DamperJointLimitsConstr</class>
    <class kind="class">tasks::qp::Equality</class>
    <class kind="class">tasks::qp::ForceMinimizationTask</class>
    <class kind="class">tasks::qp::ForceSmoothDotTask</class>
    <class kind="struct">tasks::qp::FrictionCone</class>
    <class kind="class">tasks::qp::GazeTask</class>
    <class kind="class">tasks::qp::GenInequality</class>
    <class kind="class">tasks::qp::GenQPSolver</class>
    <class kind="class">tasks::qp::GripperTorqueConstr</class>
    <class kind="class">tasks::qp::GripperTorqueTask</class>
    <class kind="class">tasks::qp::HighLevelTask</class>
    <class kind="class">tasks::qp::ImageConstr</class>
    <class kind="class">tasks::qp::Inequality</class>
    <class kind="class">tasks::qp::JointAccConstr</class>
    <class kind="struct">tasks::qp::JointGains</class>
    <class kind="class">tasks::qp::JointLimitsConstr</class>
    <class kind="class">tasks::qp::JointsSelector</class>
    <class kind="struct">tasks::qp::JointStiffness</class>
    <class kind="class">tasks::qp::LambdaConstr</class>
    <class kind="class">tasks::qp::LinVelocityTask</class>
    <class kind="class">tasks::qp::LSSOLQPSolver</class>
    <class kind="class">tasks::qp::MomentumTask</class>
    <class kind="class">tasks::qp::MotionConstr</class>
    <class kind="class">tasks::qp::MotionConstrCommon</class>
    <class kind="class">tasks::qp::MotionPolyConstr</class>
    <class kind="class">tasks::qp::MotionSpringConstr</class>
    <class kind="class">tasks::qp::MultiCoMTask</class>
    <class kind="class">tasks::qp::MultiRobotTransformTask</class>
    <class kind="class">tasks::qp::OrientationTask</class>
    <class kind="class">tasks::qp::OrientationTrackingTask</class>
    <class kind="class">tasks::qp::PIDTask</class>
    <class kind="class">tasks::qp::PositionBasedVisServoTask</class>
    <class kind="class">tasks::qp::PositionTask</class>
    <class kind="class">tasks::qp::PositiveLambda</class>
    <class kind="class">tasks::qp::PostureTask</class>
    <class kind="class">tasks::qp::QLDQPSolver</class>
    <class kind="class">tasks::qp::QPSolver</class>
    <class kind="class">tasks::qp::RelativeDistTask</class>
    <class kind="class">tasks::qp::SetPointTask</class>
    <class kind="class">tasks::qp::SetPointTaskCommon</class>
    <class kind="class">tasks::qp::SolverData</class>
    <class kind="struct">tasks::qp::SpringJoint</class>
    <class kind="class">tasks::qp::SurfaceOrientationTask</class>
    <class kind="class">tasks::qp::SurfaceTransformTask</class>
    <class kind="class">tasks::qp::TargetObjectiveTask</class>
    <class kind="class">tasks::qp::Task</class>
    <class kind="class">tasks::qp::TorqueTask</class>
    <class kind="class">tasks::qp::TrackingTask</class>
    <class kind="class">tasks::qp::TrajectoryTask</class>
    <class kind="class">tasks::qp::TransformTask</class>
    <class kind="class">tasks::qp::TransformTaskCommon</class>
    <class kind="struct">tasks::qp::UnilateralContact</class>
    <class kind="class">tasks::qp::VectorOrientationTask</class>
    <member kind="function">
      <type>TASKS_DLLAPI GenQPSolver *</type>
      <name>createQPSolver</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>aada2800b4fa88d085376a20b1105b87e</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillQC</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a3acd478a67503f59d9247a42d049ccab</anchor>
      <arglist>(const std::vector&lt; Task * &gt; &amp;tasks, int nrVars, Eigen::MatrixXd &amp;Q, Eigen::VectorXd &amp;C)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fillEq</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a483f5734b17b8c4500a85814c867ebc9</anchor>
      <arglist>(const std::vector&lt; Equality * &gt; &amp;eq, int nrVars, int nrALines, Eigen::MatrixXd &amp;A, Eigen::VectorXd &amp;AL, Eigen::VectorXd &amp;AU)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fillInEq</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a77e5a5962c21c03aeda39abeeb516912</anchor>
      <arglist>(const std::vector&lt; Inequality * &gt; &amp;inEq, int nrVars, int nrALines, Eigen::MatrixXd &amp;A, Eigen::VectorXd &amp;AL, Eigen::VectorXd &amp;AU)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fillGenInEq</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>aab329f620a78124fb5d860881f293835</anchor>
      <arglist>(const std::vector&lt; GenInequality * &gt; &amp;genInEq, int nrVars, int nrALines, Eigen::MatrixXd &amp;A, Eigen::VectorXd &amp;AL, Eigen::VectorXd &amp;AU)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fillEq</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a4af6028d8957e20c500d0bb31a2b9231</anchor>
      <arglist>(const std::vector&lt; Equality * &gt; &amp;eq, int nrVars, int nrALines, Eigen::MatrixXd &amp;A, Eigen::VectorXd &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fillInEq</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a5f31965982894310938eeee89933c06f</anchor>
      <arglist>(const std::vector&lt; Inequality * &gt; &amp;inEq, int nrVars, int nrALines, Eigen::MatrixXd &amp;A, Eigen::VectorXd &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fillGenInEq</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a0194ab22689c282d9e6205c973bce141</anchor>
      <arglist>(const std::vector&lt; GenInequality * &gt; &amp;genInEq, int nrVars, int nrALines, Eigen::MatrixXd &amp;A, Eigen::VectorXd &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillBound</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>aca70e0c2bf7e2fe95b1817865ae65bd8</anchor>
      <arglist>(const std::vector&lt; Bound * &gt; &amp;bounds, Eigen::VectorXd &amp;XL, Eigen::VectorXd &amp;XU)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printConstr</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a65d9ff284da05686474a0fb01276bbce</anchor>
      <arglist>(const Eigen::VectorXd &amp;result, T *constr, int line, std::ostream &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printConstr</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a9694a15e3e5b744843aa6dae4fa134da</anchor>
      <arglist>(const Eigen::VectorXd &amp;result, Equality *constr, int line, std::ostream &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printConstr</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>abda68512c902b700787e7eea478cd71a</anchor>
      <arglist>(const Eigen::VectorXd &amp;result, Inequality *constr, int line, std::ostream &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printConstr</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a92dd7d7ce7ea80e3cf096e82061d0b66</anchor>
      <arglist>(const Eigen::VectorXd &amp;result, GenInequality *constr, int line, std::ostream &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>constrErrorMsg</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a1d2dfd5d6e03be7321854fb1e2bc32df</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const Eigen::VectorXd &amp;result, int ALine, const std::vector&lt; T * &gt; &amp;constr, int &amp;start, int &amp;end, std::ostream &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>TASKS_DLLAPI sch::Matrix4x4</type>
      <name>tosch</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a2887fd65f669f54a2aaaa911c724a089</anchor>
      <arglist>(const sva::PTransformd &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findJointFromVector</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>ac4a39f2423f38a93bb34cd5d0dba891c</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, int line, bool withBase)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compareDof</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a9d2ad288554eb8df94fadd7bfc77009d</anchor>
      <arglist>(const rbd::MultiBody &amp;mb1, const rbd::MultiBody &amp;mb2)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>DIAG_CONSTANT</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a31e12b1cde7cfcf43f25004aab165bb3</anchor>
      <arglist></arglist>
    </member>
  </compound>
</tagfile>
